<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yln&#39;blog</title>
  
  
  <link href="http://www.blog.yln956.top/atom.xml" rel="self"/>
  
  <link href="http://www.blog.yln956.top/"/>
  <updated>2021-09-03T05:56:54.415Z</updated>
  <id>http://www.blog.yln956.top/</id>
  
  <author>
    <name>yln</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络攻击与防御</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</id>
    <published>2021-04-19T02:57:32.000Z</published>
    <updated>2021-09-03T05:56:54.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不会，等一手龙哥带</p><h1 id="网络安全概述"><a href="#网络安全概述" class="headerlink" title="网络安全概述"></a>网络安全概述</h1><p>信息安全三原则</p><ul><li>信息本身的<strong>机密性</strong>（Confidentiality）、<strong>完整性</strong>（Integrity）和<strong>可用性</strong>（Availability）的保持，即防止防止未经授权使用信息、防止对信息的非法修改和破坏、确保及时可靠地使用信息。</li></ul><p>信息安全定义</p><ul><li>狭义：密码学为基础；广义：综合性学科</li><li>国际标准化组织ISO对信息安全定义的建议是：为数据处理系统建立和采取的技术和管理的安全保护。保护计算机的硬件、软件和数据不因偶然的或恶意的原因而受到破坏、更改、泄漏。</li><li>沈昌祥院士将信息安全定义为：保护信息和信息系统不被未经授权的访问、使用、泄露、修改和破坏，为信息和信息系统提供<strong>保密性、完整性、可用性、可控性和不可否认性</strong>。</li></ul><p>黑客</p><ul><li>Hacker：经典黑客</li><li>Cracker：恶意攻击者</li></ul><p>POC</p><ul><li>Proof of concept。这个短语会在漏洞报告中使用，漏洞报告中的POC则是一段说明或者一个攻击的样例，使得读者能够确认这个漏洞是真实存在的。</li></ul><p>EXP，Exploit</p><ul><li>意思是一段对漏洞如何利用的详细说明或者一个演示的漏洞攻击代码，可以使得读者完全了解漏洞的机理以及利用的方法。</li></ul><p>0day</p><ul><li>在安全漏洞生命周期中，从安全漏洞被发现到厂商发布补丁程序用于修补该漏洞之前的这段时间，被安全社区普遍地称为0day。</li><li><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/image-20210626105841505.png" alt="image-20210626105841505" loading="lazy"></li></ul><p>APT：（Advanced Persistent Threat）高级持续性威胁。</p><ul><li>是指组织(特别是政府)或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的攻击形式。</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>信息收集</p><ul><li>信息收集是指通过各种方式获取所需要的信息。</li></ul><p>goole hacking</p><ul><li>在使用Google搜索时，*符号用于模糊匹配某些内容。当利用google进行搜索想要只搜某网站的内容时，可以使用site关键字。</li></ul><p>ICANN</p><ul><li>互联网名称与数字地址分配机构（The Internet Corporation for Assigne-Names an-Numbers，ICANN）是美国加利福尼亚的非营利社团，主要由互联网协会的成员组成，成立于1998年10月，目的是接管包括管理域名和IP地址的分配等与互联网相关的任务，是一个集合了全球网络界商业、技术及学术各领域专家的非营利性国际组织，负责<strong>互联网协议（IP）地址的空间分配、协议标识符的指派、通用顶级域名（gTLD）以及国家和地区顶级域名（ccTLD）系统的管理、以及根服务器系统的管理</strong></li></ul><p>GNSO 和CNNSO</p><ul><li>基本名称支持组织GNSO ：负责通用顶级域名（gTLD）分配包括.com、.net、.edu、.org和.info等<br>国家代码域名支持组织CNNSO：负责国家顶级域名分配，包括.us、.cn、.jp等。</li></ul><p>可以使用Whois查询特定域名的详细注册信息。</p><p>dig（Domain Information Groper，域信息搜索器）命令是一个用于询问 DNS 域名服务器的工具。它执行 DNS 搜索，显示从受请求的域名服务器返回的答复。多数 DNS 管理员利用 dig 作为 DNS 问题的故障诊断。</p><ul><li>常用选项：</li><li>-f:批处理模式下运行</li><li>-x选项，逆向查询选项</li><li>+trace，查询路径跟踪</li><li>域名信息探测命令dig有交互式和非交互式两种模式。使用Dig命令查询邮件服务器时所使用的querytype选项是MX。域名信息探测命令：dig @dnsserver name querytype，其中参数querytype有A、AAAA、PTR、MX和ANY五种类型。</li></ul><p>Tracert </p><ul><li>Tracert 命令使用用 IP 生存时间 (TTL) 字段和 ICMP 错误消息来确定从一个主机到网络上其他主机的路由</li></ul><h1 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h1><p>网络扫描的基本目的是探测目标网络，以找出尽可能多的连接目标，然后再进一步探测获取类型、存在的安全弱点等信息，为进一步攻击选择恰当目标和通道提供支持。</p><p>网络扫描类型和目的</p><ul><li><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/image-20210626134448373.png" alt="image-20210626134448373" loading="lazy"></li></ul><p>TCP/IP三次握手</p><ul><li><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/image-20210626134712807.png" alt="image-20210626134712807" loading="lazy"></li></ul><p>TCP ACK Ping主机扫描</p><ul><li><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/image-20210626134821343.png" alt="image-20210626134821343" loading="lazy"></li></ul><p>DHCP协议过程分析：</p><ul><li><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps1.png" alt="img" loading="lazy"> </p></li><li><p>No106：本机localhost（10.133.81.229）向DHCP server（10.133.0.1）发送了一个DHCP Release数据包，终止了ip租赁。将本机IP地址清空。</p></li><li><p>No267：本机localhost向局域网广播一个DHCP Discover包，此时本机localhost的IP地址为0.0.0.0。广播地址为255.255.255.255。本地端口为68，目的端口为67。</p></li><li><p>No277：Ipv4地址为10.133.0.1的DHCP服务器收到该包后，向本机发送一个DHCP Offer数据包。</p></li><li><p>No278：DHCP Request包由本机localhost广播，表示本机已经收到DHCP Offer包，对此事进行通告，通告的内容包括预分配给本机的IP地址，本机的MAC地址，本机的计算机名等信息。</p></li><li><p>No279：DHCP server（10.133.0.1）向本机localhost（10.133.81.229）发送了一个DHCP Ack数据包。确认IP地址，路由、DNS、IP租赁时间、子网掩码等信息。</p></li></ul><p>端口扫描：</p><ul><li><p>是一种用来确定目标主机<strong>TCP端口和UDP端口</strong>状态的方法。开放某个端口，意味着提供某种网络服务。</p></li><li><p>TCP/UDP 均定义了1-65535端口范围，由ICANN负责分配。</p></li><li><p>MySQL数据库默认的端口号是3306。</p></li><li><p>MSSQL SERVER的默认端口号是1433。</p></li><li><p>SSH的默认端口号是22。</p></li><li><p>phpstudy默认的端口号为80。</p></li><li><p>HTTP服务，默认的端口号为80/tcp；</p></li><li><p>HTTPS服务，默认的端口号为443/tcp 443/udp；</p></li><li><p>SSH（安全登录），默认的端口号为22/tcp；</p></li><li><p>SMTP 默认的端口号为25/tcp</p></li><li><p>TOMCAT，默认的端口号为8080；</p></li><li><p>WINDOWS远程登陆，默认的端口号为3389；</p></li><li><p>FTP，默认的端口号为21/tcp</p></li></ul><p>CVE：</p><ul><li>安全漏洞命名索引的业界事实标准。由美国国土安全部资助的MITRE公司负责维护。CVE漏洞库为每个确认的公开披露安全漏洞提供了索引CVE编号，以及一段简单的漏洞信息描述，CVE编号就是业界标识该漏洞的<strong>标准索引号</strong>。</li></ul><p>Http状态码为404表明无法找到指定位置的资源。</p><p>CNNVD：中国国家漏洞库</p><p>CNVD：中国国家信息安全漏洞共享平台</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>SQL语言规定，将单引号解析成代码与数据之间的分界线。</p><p>MySQL数据库中的注释符有3种，分别是#、/**/、– 。</p><p>floor（rand（）*2）函数返回值为0或者1。</p><p>UNION 操作符的作用：UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>UNION使用要求：UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p><p>常用数据库带有很多默认的用户预安装内容，如SQL Server使用sa作为默认的数据库系统管理员账户。</p><p>为了安全起见，应保证程序的数据库访问在最低权限模型下运行。</p><p>SQL的时间延迟漏洞的识别。</p><p>利用时间延迟进行数据库长度的猜测：攻击者可以构造and if(length(database())=100,sleep(1),1)# 语句来猜测数据库名的长度是否为100，如果检测到服务器响应时间延迟了1秒钟，则表明猜测正确，否则修改数字4为其他数字，依次猜测。</p><p>SQL漏洞的防范：</p><p>应该使用参数化语句（也称为预处理语句，PHP中使用PDO）而非动态SQL来组装SQL查询。</p><p>使用白名单对输入内容进行验证，确保验证应用收到的所有用户控制的输入类型、大小、范围和内容。</p><p>确保对包含用户可控制输入的查询进行正确编码，以防止使用单引号或其他字符来修改查询。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS是一种经常出现在Web应用程序中的计算机安全漏洞，是由于Web应用程序对用户的输入过滤不足而产生的。XSS跨站脚本攻击本身对Web服务器没有直接危害，它借助网站进行传播，使网站的大量用户受到攻击。XSS攻击可分为反射型、存储型和基于Dom的。</p><p>javaScript用于设置Cookie的函数是setCookie。</p><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而存储在用户本地终端上的数据（通常经过加密）,它是用户和服务器之间的桥梁。</p><p>同源策略，它是由Netscape提出的一个著名的安全策略。所谓同源是指：域名、协议、端口相同。</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps2.jpg" alt="img" loading="lazy"> </p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps3.jpg" alt="img" loading="lazy"> </p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps4.jpg" alt="img" loading="lazy"> </p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF攻击示例（只针对课件示例，请具体问题具体分析进行使用）：</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps5.jpg" alt="img" loading="lazy"> </p><p>CSRF攻击代码示例（只针对课件示例，请具体问题具体分析进行使用）：</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps6.jpg" alt="img" loading="lazy"> </p><p>防范CSRF攻击的措施。</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps7.jpg" alt="img" loading="lazy"> </p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps8.jpg" alt="img" loading="lazy"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>上传漏洞的识别及绕过。</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps9.jpg" alt="img" loading="lazy"> </p><p>MIME检测过滤的绕过：burpsuite抓包，修改content-type的值为白名单中的类型。</p><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><p>暴力破解是一种针对密码或身份认证的破解方法，穷举各种可能，找到突破身份认证的一种攻击方法。Burpsuite 进行暴力破解时，需要把抓取到的包发送到Intruder功能页面。</p><p>暴力破解的防御措施：</p><p><img src="/2021/04/19/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/wps10.jpg" alt="img" loading="lazy"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络攻防" scheme="http://www.blog.yln956.top/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>病毒原理</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-19T02:57:18.000Z</published>
    <updated>2021-09-03T05:56:55.572Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学不会啊，龙哥快带带我，5555</p><h1 id="先压手题目"><a href="#先压手题目" class="headerlink" title="先压手题目"></a>先压手题目</h1><h2 id="病毒概念"><a href="#病毒概念" class="headerlink" title="病毒概念"></a>病毒概念</h2><p>比如哪些是DOS病毒，WINDOWS病毒</p><p>第一个勾勒出病毒蓝图的是谁</p><p>病毒命名，告诉你前缀，让你判断是什么病毒，比如蠕虫“Worm”，木马“Trojan”，脚本“vbs”,”js”,</p><p>反病毒技术有哪些</p><ul><li>特征码扫描<pre><code>缺点：不能检测病毒变种或新型病毒；      特征库越来越大。</code></pre></li><li>启发式扫描<pre><code>缺点：检测结果不准确           无法准确辨认病毒的名称和类别</code></pre></li><li>虚拟机技术 <pre><code> 缺点：占用较多的系统资源，影响系统性能            要很难准确辨认病毒类别            开发投入较多</code></pre></li></ul><h2 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h2><p>怎么判断PE文件，不是怎么修改成PE文件</p><p>节表，节表的信息，节的属性</p><p>重定位技术</p><p>改变程序的执行流程，添加节为主</p><p>动态获取API原理，两个重要的API,</p><h2 id="引导型病毒"><a href="#引导型病毒" class="headerlink" title="引导型病毒"></a>引导型病毒</h2><p>主引导分区字段含义，比如55AA标识，0F表示拓展分区</p><p>系统引导过程，（压个填空？），从哪里到哪里</p><p>引导型病毒原理</p><h2 id="缓存区溢出"><a href="#缓存区溢出" class="headerlink" title="缓存区溢出"></a>缓存区溢出</h2><p>缓存区溢出原理</p><p>怎么覆盖的返回地址，高低位怎么覆盖的</p><p>为什么+4</p><h2 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h2><p>概念</p><p>木马的组成</p><p>特性</p><p>侵入过程</p><p>手段和防治</p><h1 id="病毒基本概念"><a href="#病毒基本概念" class="headerlink" title="病毒基本概念"></a>病毒基本概念</h1><h2 id="病毒定义"><a href="#病毒定义" class="headerlink" title="病毒定义"></a>病毒定义</h2><ul><li><p><strong>计算机病毒是计算机程序中被嵌入的一组破坏计算机功能或毁坏数据的计算机指令或者程序代码。</strong></p><p><strong>人为的恶意代码。</strong></p></li></ul><h2 id="病毒起源"><a href="#病毒起源" class="headerlink" title="病毒起源"></a>病毒起源</h2><ul><li>第一个勾勒出病毒程序蓝图的科学家？<br>冯诺依曼</li><li>科学的发展需要想象力<br>美国科普作家</li><li>病毒的雏形<br>“磁心大战”游戏</li></ul><h2 id="病毒生命周期"><a href="#病毒生命周期" class="headerlink" title="病毒生命周期"></a>病毒生命周期</h2><ul><li>在生命周期中，病毒一般会经历如下四个阶段： <ul><li>传染阶段：</li><li>潜伏阶段：</li><li>触发阶段：</li><li>发作阶段：表现/破坏</li></ul></li></ul><h2 id="计算机病毒的特性"><a href="#计算机病毒的特性" class="headerlink" title="计算机病毒的特性"></a>计算机病毒的特性</h2><ul><li><strong>传染性</strong></li><li>隐蔽性</li><li>潜伏性</li><li>破坏性</li><li>不可预见性</li></ul><h2 id="病毒分类"><a href="#病毒分类" class="headerlink" title="病毒分类"></a>病毒分类</h2><ul><li><p>按操作系统</p><ul><li>DOS病毒<ul><li>引导区病毒</li><li>文件型病毒</li><li>混合型病毒</li></ul></li><li>Windows病毒<ul><li>脚本病毒</li><li>宏病毒</li><li>PE病毒</li><li>网页病毒</li></ul></li><li>其它平台病毒<ul><li>*NIX系列</li><li>手机病毒</li><li>……</li></ul></li></ul></li><li><p>按照计算机病毒的破坏情况分类</p><ul><li>良性病毒：是不包含对计算机系统产生直接破坏作用的代码的计算机病毒。</li><li>恶性病毒：指在代码中包含有破坏计算机系统操作代码的计算机病毒。  </li></ul></li><li><p>按传播媒介来分类</p><ul><li>单机病毒：单机病毒的载体是磁盘或光盘。常见的是通过从软盘传入硬盘，感染系统后，再传染其它软盘。软盘又感染其它系统。</li><li>网络病毒：网络为病毒提供了最好的传播途径，它的破坏力是前所未有的。网络病毒利用计算机网络的协议或命令以及Email等进行传播，常见的是通过QQ、BBS、Email、FTP、Web等传播。 </li></ul></li><li><p>按寄生方式和传染途径分类:</p><ul><li>引导型病毒</li><li>文件型病毒</li><li>引导型兼文件型病毒-混合型病毒</li></ul></li></ul><h2 id="病毒命名"><a href="#病毒命名" class="headerlink" title="病毒命名"></a>病毒命名</h2><p>为了方便的表示病毒的类型、名称（或者命名的原因）、和重要特征，一般而言，病毒的名称可以都可以分成三个部分：</p><ul><li><p>前缀 + 病毒名 + 后缀。 </p></li><li><p>前缀表示该病毒发作的操作平台或者病毒的类型，Macro,PE,Win32,Win95,VBS,BackDoor,Trojan,Worm…</p><ul><li>如果没有前缀，一般表示DOS操作系统下的病毒。</li></ul></li><li><p>病毒名为该病毒的名称及其家族；</p></li></ul><ul><li>后缀一般可以不要，只是以此区别在该病毒家族中各病毒的不同，可以为字母表示病毒是某一个家族的第几种变种，或者为数字（数字一般是病毒的大小，以病毒的大小来区分同一家族的不同病毒变种）。</li><li>如果一个病毒的变种数非常多，则可以用字母与数字混合在一起做为病毒后缀 </li></ul><p>按病毒发作的时间命名 ：黑色星期五；</p><p>按病毒发作症状命名：“小球” /“火炬” /Yankee </p><p>按病毒自身包含的标志命名：以病毒中出现的字符串、病毒标识、存放位置或病发表现时病毒自身宣布的名称来命名。<br>如Stone（石头）病毒，爱虫病毒，Nimda病毒，Runonce，NetSky，Sasser, MsBlaster…</p><p>按病毒发现地命名 ：Jurusalem(耶路撒冷)病毒，Vienna(维也纳)病毒 </p><p>按病毒的字节长度命名： 以病毒传染文件时文件的增加长度或病毒自身代码的长度来命名，如1575、2153、1701、1704、1514、4096 </p><h2 id="计算机病毒的命名–〉广义计算机病毒，即恶意代码"><a href="#计算机病毒的命名–〉广义计算机病毒，即恶意代码" class="headerlink" title="计算机病毒的命名–〉广义计算机病毒，即恶意代码"></a>计算机病毒的命名–〉广义计算机病毒，即恶意代码</h2><p>系统病毒 </p><ul><li><p>系统病毒的前缀为：Win32、PE、Win95、W32、W95等。</p></li><li><p>这些病毒的一般公有的特性是可以感染windows操作系统的 *.exe 和 *.dll 文件，并通过这些文件进行传播。</p></li><li><p>如CIH（Win32.cih）、FUNLOVE(Win32.Funlove) </p><p>蠕虫病毒</p></li><li><p>蠕虫病毒的前缀是：Worm。这种病毒的公有特性是通过网络或者系统漏洞进行传播，很大部分的蠕虫病毒都有向外发送带毒邮件，阻塞网络的特性。比如冲击波（阻塞网络），小邮差（发带毒邮件） 等。<br>如Worm.Sasser.f, Worm.Blaster.g</p></li></ul><p>木马、黑客程序</p><ul><li>木马其前缀是：Trojan，黑客程序前缀名一般为Hack 。<br>Trojan.QQ3344, Backdoor.NeThief.10<br>Hack.Nether.Client,<br>Backdoor.Nethief.yi, Backdoor.NeThief.10.a<br>Trojan.Pwd.Oicq.c.enc </li></ul><p>脚本病毒：带有脚本前缀，如Script,VBS，JS等</p><ul><li>新欢乐时光（Script.Redlof）<br>欢乐时光（VBS.Happytime）<br>十四日（Js.Fortnight.c.s） </li></ul><p>宏病毒：宏病毒的前缀是：Macro，第二前缀是：Word、Word97、Excel、Excel97</p><ul><li>如Macro.Melissa</li></ul><p>后门程序：后门病毒的前缀是：Backdoor </p><ul><li>如Backdoor.Agobot.frt, Backdoor.HacDef.ays  </li></ul><p>病毒种植程序：前缀是：Dropper</p><ul><li>这类病毒的公有特性是运行时会从体内释放出一个或几个新的病毒到系统目录下，由释放出来的新病毒产生破坏。<br>冰河播种者（Dropper.BingHe2.2C）、MSN射手(Dropper.Worm.Smibag)等 </li></ul><p>破坏性程序</p><ul><li>破坏性程序病毒的前缀是：Harm<br>如Harm.AntiVirFree.a，Harm.DelFiles.f  </li></ul><p>玩笑程序</p><ul><li>玩笑病毒的前缀是：Joke<br>如Joke.BAT.Msgbox.a, Joke.Bomb.a </li></ul><p>捆绑机</p><ul><li>捆绑机病毒的前缀是：Binder<br>如Binder.Addbyte.a</li></ul><p>其它：</p><ul><li>DoS程序：会针对某台主机或者服务器进行DoS攻击；<br>Exploit程序：会自动通过溢出对方或者自己的系统漏洞来传播自身，或者他本身就是一个用于Hacking的溢出工具；<br>HackTool：黑客工具，也许本身并不破坏你的机子，但是会被别人加以利用来用你做替身去破坏别人<br>BotNet：僵尸网络程序</li></ul><h1 id="PE文件型病毒"><a href="#PE文件型病毒" class="headerlink" title="PE文件型病毒"></a>PE文件型病毒</h1><p>PE文件格式、PE头部（Signature、FileHeader、OptionalHeader）、节表、引入节和引出节（概念、如何定位等）、如何判定PE文件、重定位技术、如何获取API函数地址（静态、动态（两个重要函数，这两个函数存放的位置、如何获得模块基地址、获得基地址后如何获取函数地址等 原理及代码是实现））、病毒如何感染PE文件（添加节、加长最后一个节、插入节；其中添加节方式作为重点）。</p><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615162907561.png" alt="image-20210615162907561" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/PE%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E5%9B%BE.png" alt="PE格式文件图" loading="lazy"></p><h3 id="PE的简单分析（使用WINHEX）"><a href="#PE的简单分析（使用WINHEX）" class="headerlink" title="PE的简单分析（使用WINHEX）"></a>PE的简单分析（使用WINHEX）</h3><h4 id="PE文件格式图"><a href="#PE文件格式图" class="headerlink" title="PE文件格式图"></a>PE文件格式图</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615183823693.png" alt="image-20210615183823693" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615183837091.png" alt="image-20210615183837091" loading="lazy"></p><h4 id="这给个没标记的可以试着自己分析一下，下面有分析"><a href="#这给个没标记的可以试着自己分析一下，下面有分析" class="headerlink" title="这给个没标记的可以试着自己分析一下，下面有分析"></a>这给个没标记的可以试着自己分析一下，下面有分析</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/0IG%25IQ%7DSHLUSF1%600WLWJAMQ.png" alt="img" loading="lazy"></p><h4 id="分析（前面的数字表示偏移，后面表示图片上的位置-16进制）"><a href="#分析（前面的数字表示偏移，后面表示图片上的位置-16进制）" class="headerlink" title="分析（前面的数字表示偏移，后面表示图片上的位置,16进制）"></a>分析（前面的数字表示偏移，后面表示图片上的位置,16进制）</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615183652528.png" alt="image-20210615183652528" loading="lazy"></p><p><strong>首先是DOS_HEADER</strong></p><p>00首先最开始是MZ标记“\x4D\x5A”（00）</p><p>3C然后偏移为3C的地方为“\x40\x00\x00\x00”,用来定位PE头(3C)</p><p><strong>接着就是PE_HEADER(由上述偏移3C的位置可以知道PE头偏移在40)</strong></p><p>看40，PE头“\x50\x45\x00\x00”(40)</p><p>00接着第一个就是运行的CPU型号，这里是“0x14C”，表示386及后续处理器（44）</p><p>02节的数目，这里是“3”（46）</p><p>10可选PE头的大小，这里是“0xE0”（54）</p><p><strong>接着就是OPTIONAL PE_ HEADER</strong></p><p>00文件类型，这里是”10B”,表示32位下的PE文件（58）</p><p>10程序入口点，这里是“0x1000”(68)</p><p>1c内存镜像基址，这里是“0x400000”（74）</p><p>20接着就是内存对齐“0x1000”(78)</p><p>24然后就是文件对齐”0x200”(7C)</p><p>38整个PE文件映射的尺寸“0x301C”(90)</p><p>3c所有头+节表按照文件对齐后的大小“0x200”(94)</p><p>60结构体数组（B8-137）</p><p><strong>然后就是节表Sections</strong></p><p>上述OPTIONAL PE_ HEADER的结构数组接着就是每个节，下面分析一下第一个节，后面的节类似</p><p>00节的名称（138）</p><p>08节没有对齐前的真实尺寸”0x1000”（140）</p><p>0c节在内存的偏移”0x1000”，加上imagebase才是内存中的真正地址（144）</p><p>10节在文件中对齐后的尺寸”0x29”(148)</p><p>14节区在文件中的偏移”0x200”(14C)</p><p>24节的属性，这里是“0x60000020”，表示可读可执行包含代码(15C)</p><p><strong>20H：包含代码</strong></p><p><strong>40H：包含已初始化的数据</strong></p><p><strong>80H：包含未初始化的数据</strong></p><p><strong>20000000H：可执行</strong></p><p><strong>40000000H：可读</strong></p><p><strong>80000000H：可写</strong></p><h3 id="PE导出表"><a href="#PE导出表" class="headerlink" title="PE导出表"></a>PE导出表</h3><h4 id="格式图"><a href="#格式图" class="headerlink" title="格式图"></a>格式图</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615204641538.png" alt="image-20210615204641538" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615204650287.png" alt="image-20210615204650287" loading="lazy"></p><h4 id="没标记的图"><a href="#没标记的图" class="headerlink" title="没标记的图"></a>没标记的图</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615204539538.png" alt="image-20210615204539538" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615204548150.png" alt="image-20210615204548150" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615204556730.png" alt="image-20210615204556730" loading="lazy"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先找到导出表的位置(在OPTIONAL PE_ HEADER中的结构体数组的第一个字段指向其地址)</p><p>前面就是对PE的简单分析，跟前面写的一样。这就不分析了。</p><p>这里可以看到导出表的位置在“5A90”</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615210313969.png" alt="image-20210615210313969" loading="lazy"></p><p>接着跳到5A90看</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615214456095.png" alt="image-20210615214456095" loading="lazy"></p><p>0C指向导出表文件名字字符串，在“5AE2”,从图上可以看到是MyDll,dll(509C)</p><p>10导出函数的起始序号“4”（50A0）</p><p>14导出函数的个数“6”(50A4)</p><p>18以名字导出的函数个数“3”(50A8)</p><p>1c导出函数地址表RVA“5AB8”(50AC)</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615221328845.png" alt="image-20210615221328845" loading="lazy"></p><p>20导出函数名称表RVA“5AD0”(50B0)</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615221520227.png" alt="image-20210615221520227" loading="lazy"></p><p>24导出函数序号表RVA“5ADC”(50B4)</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615221557832.png" alt="image-20210615221557832" loading="lazy"></p><p>总结</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615221404733.png" alt="image-20210615221404733" loading="lazy"></p><h3 id="PE导入表"><a href="#PE导入表" class="headerlink" title="PE导入表"></a>PE导入表</h3><h4 id="格式图-1"><a href="#格式图-1" class="headerlink" title="格式图"></a>格式图</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615225422649.png" alt="image-20210615225422649" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615225454785.png" alt="image-20210615225454785" loading="lazy"></p><h4 id="没标记的图-1"><a href="#没标记的图-1" class="headerlink" title="没标记的图"></a>没标记的图</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615224049534.png" alt="image-20210615224049534" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615224059021.png" alt="image-20210615224059021" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615224106702.png" alt="image-20210615224106702" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615224116491.png" alt="image-20210615224116491" loading="lazy"></p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>首先找到导出表的位置(在OPTIONAL PE_ HEADER中的结构体数组的第二个字段指向其地址)</p><p>前面就是对PE的简单分析，跟前面写的一样。这就不分析了。</p><p>这里可以看到导出表的位置在“543C”</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615231119408.png" alt="image-20210615231119408" loading="lazy"></p><p>接着跳到“543C”看</p><p>可以看到有三个表（553C-554F,5450-5463,5464后面那个表是全0表示结束）</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615232534447.png" alt="image-20210615232534447" loading="lazy"></p><p>分析一下第一个表，后面的以此类推</p><p>00 INT表“5514”,可以看到调用了MessageBoxA（543C）</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615233334016.png" alt="image-20210615233334016" loading="lazy"></p><p>0C 指向函数名称”552A”,图上看是USER32.DLL(5448)</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615233424781.png" alt="image-20210615233424781" loading="lazy"></p><p>10 IAT表“509C”,也是MessageBoxA(544C)</p><p>注：静态的时候IAT与INT指向的都是函数名称，加载后IAT会改变，指向INT指向的函数地址</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615233606749.png" alt="image-20210615233606749" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210615233654359.png" alt="image-20210615233654359" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616002101267.png" alt="image-20210616002101267" loading="lazy"></p><h2 id="病毒感染PE文件"><a href="#病毒感染PE文件" class="headerlink" title="病毒感染PE文件"></a>病毒感染PE文件</h2><h3 id="如何感染"><a href="#如何感染" class="headerlink" title="如何感染"></a>如何感染</h3><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616005652348.png" alt="image-20210616005652348" loading="lazy"></p><p>怎么判断PE文件</p><ul><li>检验文件头部第一个字的值是否等于MZ,如果是，则DOS头有效。</li><li>用DOS头的字段e_lfanew来定位PE头。比较PE透的第一个双字的值是否等于45500000H(PE\0\0)。</li></ul><p>PE病毒编写的关键技术</p><ul><li><strong>定位</strong></li><li><strong>获取API函数</strong></li><li>搜索目标文件</li><li><strong>感染</strong></li><li>破坏</li></ul><p>病毒编写难点</p><ul><li>病毒是在宿主的运行环境下运行，所以无法像在自己本身的运行环境下一样访问自己的静态（全局）变量的数据和直接调用系统API。</li></ul><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p><strong>为什么要重定位？</strong></p><p>重定位的本质：修正实际地址和预期地址的差异。</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616010650654.png" alt="image-20210616010650654" loading="lazy"></p><p><strong>CALL语句</strong></p><ul><li>CALL 指令将返回地址压入堆栈（即CALL的下一条指令地址压入堆栈）</li></ul><p><strong>得到病毒代码基地址</strong></p> <pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">    call delta;把delta的地址压入堆栈delta:  pop eax;把delta的地址给eax      sub eax,offset delta ;eax（这是delta的地址）减去delta的偏移,就得到了delta的基地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>AIDOAHSNDAHD</p><ul><li>运行后，eax中存放的是病毒代码基地址，则<strong>V2的地址 =  eax + offset v2</strong></li></ul><h3 id="获取API函数地址"><a href="#获取API函数地址" class="headerlink" title="获取API函数地址"></a>获取API函数地址</h3><p><strong>为什么要获取API函数地址</strong></p><ul><li><p>Win32下的系统功能调用一般通过调用动态连接库中的API函数实现。</p></li><li><p>API函数调用的实质是找到函数地址，然后call</p></li><li><p>病毒和普通程序一样需要调用API函数实现某些功能，但病毒运行在宿主环境下，在编写上不能直接写函数名去调用API（引入表提供把函数名转换为函数地址），必须病毒自身去获取API函数地址（动态调用API）。</p></li></ul><p><strong>病毒获取API函数地址</strong></p><ul><li>静态方式：调用时，根据函数名查引入表，就可以获取该函数的地址。</li><li>动态方式：使用函数LoadLibrary装载需要调用的函数所在的dll文件，获取模块句柄。然后调用GetProcAddress获取需要调用的函数地址。这种方式是在需要调用函数时才将函数所在的模块调入到内存中，同时也不需要编译器为函数在引入表中建立相应的项。</li></ul><p><strong>两个有用的API</strong></p><ul><li>LoadLibrary加载一个DLL，返回DLL地址</li><li>GetProcAddress通过DLL地址和API函数名获得API函数的地址</li></ul><p>LoadLibrary ,  GetProcAddress函数始终在内存中吗？</p><p>显然不是，所以我们要转换一下思路</p><p><strong>动态获得LoadLibrary和GetProcAddress的地址</strong></p><ul><li>这两函数是系统模块kernel32.dll提供的，所以他们必定在kernel32的引出表中被导出。</li><li>只要我们能得到kernel32的地址，我们就可以通过搜索kernel32的引出表，搜索得到它们的地址。</li></ul><h3 id="得到模块kernel32-DLL的地址"><a href="#得到模块kernel32-DLL的地址" class="headerlink" title="得到模块kernel32.DLL的地址"></a>得到模块kernel32.DLL的地址</h3><h6 id="方法一（重点）"><a href="#方法一（重点）" class="headerlink" title="方法一（重点）"></a><strong>方法一（重点）</strong></h6><ul><li>由于程序入口点是被kernel32某个函数调用的，所以这个调用函数肯定在kernel32的地址空间上。</li><li>那么我们只要取得这个返回地址，就得到了一个kernel32空间中的一个地址。</li><li>通过这个地址，我们可以从高地址向低地址方向进行搜索，通过PE标志的判断，搜索到kernel32模块的基地址！</li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616104059282.png" alt="image-20210616104059282" loading="lazy"></li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616104122728.png" alt="image-20210616104122728" loading="lazy"></li></ul><p>方法二</p><p>原理：通过宿主进程的PEB（进程环境块获得）<br>Fs寄存器-&gt;TEB<br>TEB + 0x30-&gt;PEB<br>PEB + 0xc-&gt;PEB_LDR_DATA<br>PEB_LDR_DATA+0x1c处存放了一些DLL的地址，第一个是nt.dll地址，第二个就是kernel32.dll的地址。</p><p>方法三</p><p>原理：通过SEH(结构化异常处理)获取，SEH链表中最顶层的异常处理函数是Kernel32.dll中的一个函数。<br>可以遍历这个链表去搜索这个函数地址，通过这个函数地址向低地址方向以64KB为对齐单位查找PE文件的DOS头标志(MZ)，从而找到Kernel32.dll的地址。</p><p>方法四</p><p>原理：宿主进程中的TEB（线程环境块），这个块存放了线程的栈顶地址，这个地址+0x1c肯定位于kernel32.dll中（NT系统）</p><h3 id="获取API函数地址-1"><a href="#获取API函数地址-1" class="headerlink" title="获取API函数地址"></a>获取API函数地址</h3><ul><li>在得到了Kernel32的模块地址以后，就可以搜索他的导出表得到GetProcAddress和LoadLibrary两个API函数的地址。</li><li>对这两个API函数的联合调用就可以得到WIN32 应用层上任何所需要的API函数地址了。</li></ul><p><strong>通过函数名称查找函数地址</strong>（这需要用到前面所讲的导出表的知识）</p><ul><li>定位到PE文件头。</li><li>从PE文件头中的可选文件头中取出数据目录表的第一个数据目录，得到导出表的地址。</li><li>从导出表的NumberOfNames字段得到以命名函数的总数，并以这个数字做微循环的次数来构造一个循环。</li><li>从AddressOfNames字段指向的函数名称地址表的第一项开始，在循环中将每一项定义的函数名与要查找的函数名比较，如果没有任何一个函数名符合，说明文件中没有指定名称的函数。</li><li>如果某一项定义的函数名与要查找的函数名符合，那么记住这个函数名在字符串地址表中的索引值（如x），然后在AddressOfNameOrdinals指向的数组中以同样的索引值x去找数组项中的值，假如该值为y。</li><li>以y值作为索引值，在AddressOfFunctions字段指向的函数入口地址表中获取的RVA就是函数的入口地址，当函数被装入内存后，这个RVA值加上模块实际装入的基址(ImageBase)，就得到了函数真正的入口地址。</li></ul><p><strong>搜索目标文件</strong></p><ul><li><p>PE病毒通常以PE文件格式的文件（如EXE、SCR、DLL等）作为感染目标。</p></li><li><p>在对目标进行搜索时一般采用两个关键的API函数：</p><ul><li><strong>FindFirstFile</strong></li><li><strong>FindNextFile</strong></li></ul></li><li><p>其一般搜索“*.exe”、“*.scr”等文件进行感染。</p></li><li><p>在算法上可以采用递归或者非递归算法对所有盘符进行搜索。</p></li><li><p>一个被病毒感染的HOST程序通常首先执行病毒代码，然后执行HOST程序的正常代码。这既保证病毒首先获得控制权，同时也不影响HOST程序的正常执行。</p></li><li><p>另外也可能在HOST程序执行的过程中调用病毒代码，例如病毒的EPO技术中就采用这种方式。</p></li><li><p>EPO是EntryPoint Obscuring技术的简写，意即入口模糊技术，该技术改变了传统的修改PE头部的入口点，使其指向病毒代码入口而使病毒代码得以执行的典型方法。</p></li></ul><h3 id="病毒对PE文件的修改方式"><a href="#病毒对PE文件的修改方式" class="headerlink" title="病毒对PE文件的修改方式"></a>病毒对PE文件的修改方式</h3><h4 id="添加节（重点）"><a href="#添加节（重点）" class="headerlink" title="添加节（重点）"></a><strong>添加节（重点）</strong></h4><p>在文件的最后建立一个新节，在节表结构的后面建立一个节表，用以表述该节。入口地址修改为病毒所在节</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616110926507.png" alt="image-20210616110926507" loading="lazy"></p><p>添加一个节步骤</p><ul><li><p>先把病毒代码追加到文件尾部。</p></li><li><p>在节表中增加一个section header各项数据填写正确（VirtualSize,VirtualAddress,PointerToRawData…..）。</p></li><li><p>在FILEHEADER中修改节表项数目： +1。</p></li><li><p>重新计算SizeofHeaders，并替换原值。</p></li><li><p>重新计算SizeofImage，并替换原值。</p></li><li><p>记录未感染时的AOEP（入口地址），因为在病毒代码结束时要让宿主程序正常执行。所以要先记录AOEP，在病毒程序结束后JMP跳到宿主程序的AOEP。  </p></li><li><p>修改OptionalHEADER中的AddressOfEntryPoint，让它指向新加节的入口代码</p></li></ul><p>扩展节</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616111222842.png" alt="image-20210616111222842" loading="lazy"></p><ul><li>先把病毒代码追加到最后一个节的尾部。</li><li>修改节表中相应字段大小和内存布局大小。</li></ul><p>插入节</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616111256775.png" alt="image-20210616111256775" loading="lazy"></p><ul><li>这种方式不增加节的个数和文件长度，病毒搜寻到一个可执行文件后，分析每个节，查询节的空白空间是否可以容纳病毒代码，若可以，则感染之。CIH病毒就是采用这种方法感染可执行文件的。</li></ul><h1 id="DOS引导型病毒"><a href="#DOS引导型病毒" class="headerlink" title="DOS引导型病毒"></a>DOS引导型病毒</h1><p>DOS引导型病毒：硬盘结构、主引导扇区结构（MBR、分区信息、活动分区判定、结束标志）、DPT、系统引导过程、引导型病毒工作原理、与病毒相关的中断INT13H（如何清除掉引导型病毒）、病毒程序如何常驻内存高端、引导型病毒的特点。</p><h2 id="硬盘的数据结构"><a href="#硬盘的数据结构" class="headerlink" title="硬盘的数据结构"></a>硬盘的数据结构</h2><p>这里讲的是老式的CHS结构，一些基础知识就不赘述了</p><h3 id="主引导扇区的组成"><a href="#主引导扇区的组成" class="headerlink" title="主引导扇区的组成"></a>主引导扇区的组成</h3><ul><li>主引导扇区(Boot Sector),其位置在计算机磁盘的0柱面、0磁头、1扇区</li><li>主引导记录(Master Boot Record，MBR)</li><li>主分区表(磁盘分区表) (Disk Partition Table，DPT)</li><li>引导扇区标记(Boot Record ID/Signature)</li></ul><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616112200887.png" alt="image-20210616112200887" loading="lazy"></p><p>简单分析一下，从55AA标识开始，往上数4行（64字节）</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113312169.png" alt="image-20210616113312169" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113421267.png" alt="image-20210616113421267" loading="lazy"></p><p>分区表项含义（16字节）</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113457787.png" alt="image-20210616113457787" loading="lazy"></p><p>分区示意图</p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113517389.png" alt="image-20210616113517389" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113529327.png" alt="image-20210616113529327" loading="lazy"></p><p><strong>当磁盘被格式化之后，文件系统需要用到一些特殊的区域来组织它本身的数据：</strong></p><ul><li>操作系统引导记录(Boot Record，BR)</li><li>文件分配表(File Allocation Table，FAT)</li><li>文件目录表(File Directory Table，FDT)</li><li>数据区</li></ul><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616113656029.png" alt="image-20210616113656029" loading="lazy"></p><h3 id="系统引导过程"><a href="#系统引导过程" class="headerlink" title="系统引导过程"></a>系统引导过程</h3><ul><li>BIOS（基本输入输出系统）：是固化在计算机硬件中、直接与硬件打交道的一组程序，计算机的启动过程是在主板BIOS的控制下进行的，我们也常把它称为“系统BIOS”。</li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616122939341.png" alt="image-20210616122939341" loading="lazy"></li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616123043881.png" alt="image-20210616123043881" loading="lazy"></li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616123952408.png" alt="image-20210616123952408" loading="lazy"></li></ul><p><strong>系统启动过程代码分析</strong></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">定位到0000：7C00CLIXOR AX,AXMOV SS,AXMOV SP,7C00MOV SI,SPPUSH AXPOP ESPUSH AXPOP DSSTI把MBR重定位到0600MOV DI,0600MOV CX,0100REPNZMOVSW在新位置继续执行MBR，查找活动分区JMP  0000：061DMOV SI,07BEMOV BL,04SEARCH_LOOP1：CMP BYTE PTR [SI],80JZ FOUND_ACTIVECMP BYTE PTR [SI],00JNZ NOT_ACTIVE继续查找，直到找到活动分区ADD SI,10DEC BLJNZ SEARCH_LOOP1FOUND_ACTIVE: MOV DX, [SI]MOV CX,[SI+02]MOV BP,SI将活动分区第一个扇区读入内存地址0000:7C00MOV BX,7C00MOV AX,0201INT 13检查引导区标志，一切正常则跳转到7C00MOV DI,7DFECMP WORD PTR [DI],AA55JNZ DISPLAY_MSGJMP 0000:7C00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中断概念"><a href="#中断概念" class="headerlink" title="中断概念"></a>中断概念</h3><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616131651656.png" alt="image-20210616131651656" loading="lazy"></p><ul><li><p> 中断是指CPU对系统中发生的无一定时序关系的随机事件的响应，也就是在CPU工作过程中，当出现某种较为紧急的事件时，令CPU暂时停止当前的工作，转去执行处理此事件的程序。该处理程序完成该完成的工作后，立即返回断点，CPU继续执行原程序，这个过程叫做中断</p></li><li><p>中断优先权：CPU为了处理并发的中断请求，规定了中断的优先权，中断优先权由高到底的顺序是除法错误；不可屏蔽中断；可屏蔽中断；单步中断。</p></li><li><p>中断向量表：为了有效地管理各种中断，系统初始化之后在内存的最低端建立了一张中断向量表，它占有0000H~03FFH的1KB地址空间。该表用来存放各种中断程序的入口地址，每一种中断向量的入口地址占4B，高两字节存放段地址，低两字节存放中断向量的偏移地址。</p></li></ul><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616130338279.png" alt="image-20210616130338279" loading="lazy"></p><h3 id="引导型病毒工作原理"><a href="#引导型病毒工作原理" class="headerlink" title="引导型病毒工作原理"></a>引导型病毒工作原理</h3><ul><li>引导型病毒是一种在ROM BIOS之后，系统引导时出现的病毒，它先于操作系统，依托的环境是BIOS中断服务程序。引导型病毒是利用操作系统的引导模块放在某个固定的位置，并且控制权的转交方式是以物理位置为依据，而不是以操作系统引导区的内容为依据，因而病毒占据该物理位置即可获得控制权，而将真正的引导区内容搬家转移或替换，待病毒程序执行后，将控制权交给真正的引导区内容，使得这个带病毒的系统看似正常运转，而病毒已隐藏在系统中并伺机传染、发作。</li></ul><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616130500377.png" alt="image-20210616130500377" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616130519502.png" alt="image-20210616130519502" loading="lazy"></p><h3 id="与病毒相关的中断INT13H（如何清除掉引导型病毒）"><a href="#与病毒相关的中断INT13H（如何清除掉引导型病毒）" class="headerlink" title="与病毒相关的中断INT13H（如何清除掉引导型病毒）"></a>与病毒相关的中断INT13H（如何清除掉引导型病毒）</h3><h3 id="病毒程序如何常驻内存高端"><a href="#病毒程序如何常驻内存高端" class="headerlink" title="病毒程序如何常驻内存高端"></a>病毒程序如何常驻内存高端</h3><ul><li><p>想办法把病毒程序载入到内存中，载入后保证这一段代码不被其他代码覆盖。<br>内存0000:0413处两字节描述了基本内存的大小，它的值是KB的倍数。</p></li><li><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616130627461.png" alt="image-20210616130627461" loading="lazy"></p></li><li><p><strong>要求：想办法把病毒程序载入到内存中，载入后保证这一段代码不被其他代码覆盖。</strong>    </p></li><li><p><strong>利用点：内存0000:0413(内存容量标志单元)处两字节描述基本内存的大小，它的值是KB的倍数。</strong></p></li><li><p> <strong>实现：病毒程序首先将自身复制到内存的高端，修改内存容量标志单元，在原有值的基础上减去病毒长度，使得病毒代码能够常驻内存</strong>。</p></li><li><p><strong>病毒程序首先将自身复制到内存的高端，修改内存容量标志单元，在原有值的基础上减去病毒长度，使得病毒代码能够常驻内存；<br>然后将原int 13h磁盘中断服务程序的中断向量保存，并修改此中断向量，将其指向病毒代码，病毒代码因此获得系统控制权，进而执行感染、破坏等工作。</strong></p></li></ul><h3 id="修改中断向量表，截获系统中断"><a href="#修改中断向量表，截获系统中断" class="headerlink" title="修改中断向量表，截获系统中断"></a>修改中断向量表，截获系统中断</h3><p><strong>修改中断向量表，截获系统中断，然后将原int 13h磁盘中断服务程序的中断向量保存，并修改此中断向量，将其指向病毒代码，病毒代码因此获得系统控制权，进而执行感染、破坏等工作。</strong></p><h3 id="引导型病毒的特点"><a href="#引导型病毒的特点" class="headerlink" title="引导型病毒的特点"></a>引导型病毒的特点</h3><ul><li>引导型病毒是在操作系统之前进入内存，寄生对象又相对固定，因此该类型病毒基本上不得不采用减少操作系统所掌管的内存容量方法来驻留内存高端。而正常的系统引导过程一般是不减少系统内存的。</li><li>引导型病毒需要把病毒传染给软盘，一般是通过修改INT 13H的中断向量，而新的INT 13H中断向量地址必定指向内存高端的病毒程序。</li><li>引导型病毒感染硬盘时，必定驻留硬盘的主引导扇区或引导扇区，并且<strong>只驻留一次</strong>，因此引导型病毒一般都是在软盘启动过程中把病毒传染给硬盘的。而正常的引导过程一般是不对硬盘主引导扇区进行写盘操作的。</li><li>引导型病毒的寄生对象相对固定，把当前的系统主引导扇区和引导扇区与干净的主引导扇区和引导扇区进行比较，如果内容不一致，可认定系统引导区异常。</li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616131320684.png" alt="image-20210616131320684" loading="lazy"></li></ul><h3 id="大麻病毒清除和感染"><a href="#大麻病毒清除和感染" class="headerlink" title="大麻病毒清除和感染"></a>大麻病毒清除和感染</h3><ul><li>清除</li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616131524789.png" alt="image-20210616131524789" loading="lazy"></li><li>感染</li><li><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616131546476.png" alt="image-20210616131546476" loading="lazy"></li></ul><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616131601574.png" alt="image-20210616131601574" loading="lazy"></p><h1 id="蠕虫病毒"><a href="#蠕虫病毒" class="headerlink" title="蠕虫病毒"></a>蠕虫病毒</h1><p>蠕虫病毒：蠕虫的概念、蠕虫与病毒的区别、栈溢出原理及代码（重点如何覆盖EIP，如何构造ShellCode）、shellcode概念、特点（不能使用特定字符）。</p><h2 id="蠕虫的概念"><a href="#蠕虫的概念" class="headerlink" title="蠕虫的概念"></a>蠕虫的概念</h2><ul><li><p>蠕虫是一种通过网络传播的病毒，它具有病毒的一些共性，如传播性、寄生性。</p></li><li><p>同时具有自己的一些特性，如不寄生于文件或引导扇区，一般以独立的文件或者多个文件存在于磁盘，以独立的进程运行于内存或者寄生在其他进程中。</p></li></ul><h2 id="蠕虫与病毒的区别"><a href="#蠕虫与病毒的区别" class="headerlink" title="蠕虫与病毒的区别"></a>蠕虫与病毒的区别</h2><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616132011214.png" alt="image-20210616132011214" loading="lazy"></p><h2 id="栈溢出原理及代码（重点如何覆盖EIP，如何构造ShellCode）"><a href="#栈溢出原理及代码（重点如何覆盖EIP，如何构造ShellCode）" class="headerlink" title="栈溢出原理及代码（重点如何覆盖EIP，如何构造ShellCode）"></a>栈溢出原理及代码（重点如何覆盖EIP，如何构造ShellCode）</h2><p>缓冲区溢出产生的条件<br>使用非类型安全的语言，如 C/C++（不判断边界）。<br>以不安全的方式访问或复制缓冲区（不考虑大小）。<br>编译器将缓冲区放在内存中关键数据结构旁边或邻近的位置。（例如堆栈） </p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616133659355.png" alt="image-20210616133659355" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616133720785.png" alt="image-20210616133720785" loading="lazy"></p><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210616133729407.png" alt="image-20210616133729407" loading="lazy"></p><ul><li><p>精心构造溢出所用的字符串，将4个字节返回地址替换成别有用心的地址，当函数返回时，我们就能引导程序到我们指定的代码去执行，从而获得程序控制权。</p></li><li><p>如果地址A所指定的内存空间事先存放了设计好的攻击代码，那么攻击就会随之发生。</p></li></ul><h2 id="shellcode概念、特点（不能使用特定字符）。"><a href="#shellcode概念、特点（不能使用特定字符）。" class="headerlink" title="shellcode概念、特点（不能使用特定字符）。"></a>shellcode概念、特点（不能使用特定字符）。</h2><ul><li>Shellcode是指能完成特殊任务的自包含的二进制代码，根据不同的任务可能是发出一条系统调用或建立一个高权限的Shell,  Shellcode因此得名。</li><li>最终目的：获取目标机器的控制权</li></ul><p>Shellcode一般是作为数据形式发送给服务器，制造溢出得以执行代码并获取控制权的</p><ul><li>（1）长度受限</li><li>（2）不能使用特殊字符，例如\x00、\xff等</li><li>（3）具有重定位能力</li><li>（4）一定的兼容性</li></ul><h1 id="木马-1"><a href="#木马-1" class="headerlink" title="木马"></a>木马</h1><p>木马：木马概念、与普通病毒的区别、木马结构、木马数据传输通道</p><h1 id="木马概念与普通病毒的区别"><a href="#木马概念与普通病毒的区别" class="headerlink" title="木马概念与普通病毒的区别"></a>木马概念与普通病毒的区别</h1><p>木马与病毒<br>一般情况下，病毒是依据其能进行自我复制(传染性)的特点而定义的<br>木马主要是根据其意图来定义的，<br>木马的意图通常是窃取信息、实施远程监控等。</p><p>区别：木马一般不进行感染和传播自身，但也可能具、有寄生性，比如一些捆绑在合法程序中得到安装、启动木马的权限（文件捆绑器、dll劫持）。</p><p>我们习惯上将其纳入广义病毒，也就是说，木马也是广义病毒的一个子类。</p><h2 id="木马结构"><a href="#木马结构" class="headerlink" title="木马结构"></a>木马结构</h2><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210614122117593.png" alt="image-20210614122117593" loading="lazy"></p><h2 id="木马数据传输通道"><a href="#木马数据传输通道" class="headerlink" title="木马数据传输通道"></a>木马数据传输通道</h2><p>木马程序的数据传递方法<br>利用TCP、UDP传输数据<br>利用WinSock与目标机的指定端口建立连接，使用send和recv等API进行数据的传递<br>这种方法的隐蔽性比较差，在命令行状态下使用netstat命令，就可以查看到当前的活动TCP、UDP连接</p><p>攻击者为了不让用户察觉其与木马程序之间的通信，经常使用各种协议来建立控制服务端的秘密通信隧道<br>利用ICMP协议建立秘密通道<br>利用HTTP协议建立秘密通道</p><h1 id="对前面三种病毒举例"><a href="#对前面三种病毒举例" class="headerlink" title="对前面三种病毒举例"></a>对前面三种病毒举例</h1><h2 id="第一个-PE如何判断等"><a href="#第一个-PE如何判断等" class="headerlink" title="第一个,PE如何判断等"></a>第一个,PE如何判断等</h2><h3 id="修复PE"><a href="#修复PE" class="headerlink" title="修复PE"></a>修复PE</h3><p>对给出a.exe程序，用WINHEX进行修复，使之能正常运行。</p><p>(1) PE文件判定</p><p>(2) NumberOfSection,此文件有3个节</p><p>(3) SizeOfOptionalHeader(00E0)</p><p>(4) AddressOfEntryPoint(1000)</p><p>(5) ImageBase(00400000)</p><p>(6) SectionAlinment(00001000)</p><p>(7) FileAlignment(00000200)</p><h4 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/image-20210617020303211.png" alt="image-20210617020303211" loading="lazy"></p><h4 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h4><p><img src="/2021/04/19/%E7%97%85%E6%AF%92%E5%8E%9F%E7%90%86/wps2.jpg" alt="img" loading="lazy"></p><h3 id="给上述修复的文件添加节"><a href="#给上述修复的文件添加节" class="headerlink" title="给上述修复的文件添加节"></a>给上述修复的文件添加节</h3><h3 id="MINIPE"><a href="#MINIPE" class="headerlink" title="MINIPE"></a>MINIPE</h3><h2 id="第二-PE病毒，重定位等，汇编实现"><a href="#第二-PE病毒，重定位等，汇编实现" class="headerlink" title="第二,PE病毒，重定位等，汇编实现"></a>第二,PE病毒，重定位等，汇编实现</h2><p>填空，PE病毒</p><h3 id="没填的"><a href="#没填的" class="headerlink" title="没填的"></a>没填的</h3><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.586p.model flat,stdcalloption casemap:none;include    include\windows.incinclude    include\kernel32.incincludelib lib\kernel32.libinclude    include\user32.incincludelib lib\user32.libGetApiAddress PROTO:DWORD,:DWORD.data    Kernel32Addr dd ?         ExportKernel dd ?    GetProcAddr dd ?         LoadLibraryAddr dd ?    aGetProcAddr db &quot;GetProcAddress&quot;, 0          GetProcAddLen equ  $-aGetProcAddr-1    aLoadLibrary db &quot;LoadLibraryA&quot; , 0         LoadLibraryLen equ $-aLoadLibrary-1    strMessageBoxA db &quot;MessageBoxA&quot;,0    strUser32  db &quot;User32.dll&quot;,0    strShow    db &quot;动态messagebox演示&quot;,0    szTitle db &quot;检测结果&quot;, 0    temp1 db &quot;Kernel32.dll 基本地址：%8x&quot; , 0dh , 0ah    db       &quot;LoadLibrary 地址：     %8x&quot; ,0dh, 0ah    db       &quot;GetProcAddress 地址：  %8x&quot; , 0dh , 0ah , 0    temp2 db 0 dup(100)     .codemain:Start:       mov  esi, ____________       and  esi,0fffff000hLoopFindKernel32:       sub  esi,1000h       cmp  word ptr[esi], ____________       jnz  short LoopFindKernel32GetPeHeader:       mov edi,dword ptr[esi+_______]       add edi, esi       cmp word ptr[edi],______________       jnz short LoopFindKernel32     mov Kernel32Addr,esi     invoke GetApiAddress,Kernel32Addr,addr aLoadLibrary     mov LoadLibraryAddr,eax     invoke GetApiAddress , Kernel32Addr, addr aGetProcAddr     mov GetProcAddr , eax     invoke wsprintf,addr temp2,addr temp1,Kernel32Addr,LoadLibraryAddr,GetProcAddr     invoke MessageBoxA,0,addr temp2,addr szTitle,0;填空先弹地址，再弹学号姓名     invoke ExitProcess,0                  GetApiAddress proc uses ecx ebx edx esi edi hModule:DWORD ,szApiName:DWORD   LOCAL dwReturn:DWORD   LOCAL dwApiLength:DWORD   mov dwReturn,0   mov esi,szApiName   mov edx,esi Continue_Searching_Null:   cmp byte ptr[esi],0   jz  We_Got_The_Length   inc esi   jmp Continue_Searching_Null We_Got_The_Length:   inc esi   sub esi,edx   mov dwApiLength ,esi   mov esi,hModule   add esi,[esi+3ch]   assume esi:ptr IMAGE_NT_HEADERS   mov esi,[esi].____________________________________   add esi,hModule   assume esi:ptr IMAGE_EXPORT_DIRECTORY   mov ebx,[esi].__________________   add ebx,hModule   xor edx,edx   .repeat      push esi      mov edi,[ebx]      add edi,hModule      mov esi,szApiName      mov ecx,dwApiLength      cld      repz cmpsb      .if ZERO?          pop esi          jmp _Find_Index      .endif      pop esi      add ebx,4      inc edx      .until edx &gt;&#x3D; [esi]._____________      jmp _Exit            _Find_Index:         sub ebx,[esi].AddressOfNames         sub ebx,hModule         shr ebx,1         add ebx, [esi]._____________                  add ebx,hModule         movzx eax,word ptr [ebx]         shl eax,2         add eax,[esi]._____________         add eax,hModule                  mov eax,[eax]         add eax,hModule         mov dwReturn,eax        _Exit:         mov eax,dwReturn         ret       GetApiAddress    endp       end main   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="做好的"><a href="#做好的" class="headerlink" title="做好的"></a>做好的</h3><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.586p.model flat,stdcalloption casemap:none;include    include\windows.incinclude    include\kernel32.incincludelib lib\kernel32.libinclude    include\user32.incincludelib lib\user32.libGetApiAddress PROTO:DWORD,:DWORD.data    Kernel32Addr dd ?         ExportKernel dd ?    GetProcAddr dd ?         LoadLibraryAddr dd ?    aGetProcAddr db &quot;GetProcAddress&quot;, 0          GetProcAddLen equ  $-aGetProcAddr-1    aLoadLibrary db &quot;LoadLibraryA&quot; , 0         LoadLibraryLen equ $-aLoadLibrary-1    strMessageBoxA db &quot;MessageBoxA&quot;,0    strUser32  db &quot;User32.dll&quot;,0    strShow    db &quot;动态messagebox演示&quot;,0    szTitle db &quot;检测结果&quot;, 0    szTitle2 db &quot;个人信息&quot;, 0    datas db &quot;姓名：你猜，学号：233333&quot;,0    temp1 db &quot;Kernel32.dll 基本地址：%8x&quot; , 0dh , 0ah    db       &quot;LoadLibrary 地址：     %8x&quot; ,0dh, 0ah    db       &quot;GetProcAddress 地址：  %8x&quot; , 0dh , 0ah , 0    temp2 db 100 dup(0)         .codemain:Start:       mov  esi, [esp];获得栈顶，即main函数返回地址，这个地址在kernel32里面       and  esi,0fffff000h  ;内存对齐LoopFindKernel32:       sub  esi,1000h       cmp  word ptr[esi], &#39;ZM&#39; ;查找kernel32.dll的MZ标志&quot;4D5A&quot;       jnz  short LoopFindKernel32GetPeHeader:       mov edi,dword ptr[esi+3Ch] ;偏移3ch找PE标志       add edi, esi       cmp word ptr[edi], &#39;EP&#39;  ;查找kernel32.dll的PE标志&quot;5045&quot;       jnz short LoopFindKernel32     mov Kernel32Addr,esi     invoke GetApiAddress,Kernel32Addr,addr aLoadLibrary     mov LoadLibraryAddr,eax     invoke GetApiAddress , Kernel32Addr, addr aGetProcAddr     mov GetProcAddr , eax     invoke wsprintf,addr temp2,addr temp1,Kernel32Addr,LoadLibraryAddr,GetProcAddr     invoke MessageBoxA,0,addr temp2,addr szTitle,0push eax    push ebxlea eax,strUser32    push eaxcall LoadLibraryAddr    push esimov esi,eaxlea eax,strMessageBoxA    push eax    push esicall GetProcAddr    push 0lea esi,szTitle2    push esilea esi,datas    push esi    push 0call eax    invoke ExitProcess,0                  GetApiAddress proc uses ecx ebx edx esi edi hModule:DWORD ,szApiName:DWORD   LOCAL dwReturn:DWORD   LOCAL dwApiLength:DWORD   mov dwReturn,0   mov esi,szApiName   mov edx,esi Continue_Searching_Null:   cmp byte ptr[esi],0   jz  We_Got_The_Length   inc esi   jmp Continue_Searching_Null We_Got_The_Length:   inc esi   sub esi,edx   mov dwApiLength ,esi   mov esi,hModule   add esi,[esi+3ch]        ;NT头的地址   assume esi:ptr IMAGE_NT_HEADERS     mov esi,[esi].OptionalHeader.DataDirectory[0].VirtualAddress ;找导出表的RVA   add esi,hModule;获得导出表VA   assume esi:ptr IMAGE_EXPORT_DIRECTORY   mov ebx,[esi].AddressOfNames;获得导出表子表RVA   add ebx,hModule      ;获得导出表子表VA   xor edx,edx   .repeat      push esi      mov edi,[ebx]          add edi,hModule      mov esi,szApiName      mov ecx,dwApiLength      cld      repz cmpsb      .if ZERO?          pop esi          jmp _Find_Index   ;比较字符串的内容与szApiName是否相同      .endif      pop esi      add ebx,4      inc edx      .until edx &gt;&#x3D; [esi].NumberOfNames ;如果直到表结束都没找到就退出      jmp _Exit            _Find_Index:         sub ebx,[esi].AddressOfNames   ;导出函数名称表         sub ebx,hModule         shr ebx,1         add ebx, [esi].AddressOfNameOrdinals   ;导出函数序号表                  add ebx,hModule         movzx eax,word ptr [ebx]         shl eax,2          ;找到导出函数的序号         add eax,[esi].AddressOfFunctions   ;找到导出函数的地址         add eax,hModule                      mov eax,[eax]         add eax,hModule         mov dwReturn,eax        _Exit:         mov eax,dwReturn         ret       GetApiAddress    endp       end main   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h2><h2 id="第四个"><a href="#第四个" class="headerlink" title="第四个"></a>第四个</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="病毒" scheme="http://www.blog.yln956.top/categories/%E7%97%85%E6%AF%92/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>马原</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E9%A9%AC%E5%8E%9F/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E9%A9%AC%E5%8E%9F/</id>
    <published>2021-04-19T02:56:53.000Z</published>
    <updated>2021-09-03T05:56:52.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好难，重新看书总结一下</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  马原理--&gt;马克思主义哲学  马原理--&gt;马克思主义政治经济学  马原理--&gt;科学社会主义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  马哲--&gt;辩证唯物主义  马哲--&gt;历史唯物主义&#x2F;&#x2F;唯物史观  辩证唯物主义--&gt;辩证唯物论  辩证唯物主义--&gt;唯物辩证法  辩证唯物主义--&gt;认识论  辩证唯物论--&gt;哲学基本问题  辩证唯物论--&gt;世界的多样性与物质统一性  唯物辩证法--&gt;两大总特征  唯物辩证法--&gt;三大基本规律  唯物辩证法--&gt;五对基本范畴&#x2F;环节  唯物辩证法--&gt;唯物辩证法是认识世界和改造世界的根本方法  两大总特征--&gt;联系  两大总特征--&gt;发展  三大基本规律--&gt;对立统一规律  三大基本规律--&gt;量变质变规律  三大基本规律--&gt;否定之否定规律  认识论--&gt;实践与认识  认识论--&gt;真理与价值  认识论--&gt;认识世界和改造世界  世界的多样性与物质统一性--&gt;物质及其存在形态  世界的多样性与物质统一性--&gt;物质与意识的辩证关系  世界的多样性与物质统一性--&gt;世界的物质统一性  历史唯物主义&#x2F;&#x2F;唯物史观--&gt;社会基本矛盾及其运动规律  历史唯物主义&#x2F;&#x2F;唯物史观--&gt;社会历史发展的动力  历史唯物主义&#x2F;&#x2F;唯物史观--&gt;人民群众在历史发展中的作用  人民群众在历史发展中的作用--&gt;社会历史的创造者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><p>马克思主义包括马克思主义哲学、马克思主义政治经济学和科学社会主义三个基本组成部分</p><p>马克思主义的基本立场是马克思主义观察、分析和解决问题的根本立足点和出发点，即以无产阶级的解放和全人类的解放为己任，以人的自由全面发展为美好目标，以人民为中心，一切为了人民，一切依靠人民。</p><p>马克思主义产生于19世纪40年代</p><p>德国古典哲学、英国古典政治经济学、英法空想社会主义，为马克思主义的创立提供了直接的理论来源。</p><p>1848年2月，马克思和恩格斯《共产党宣言》的发表，标志着马克思主义的公开问世</p><p>唯物史观和剩余价值学说是马克思一生两个伟大发现。</p><p>马克思主义的鲜明特征 </p><p>1.科学性 </p><ul><li>马克思主义具有科学的世界观和方法论基础，即辩证唯物主义和历史唯物主义，这是马克思主义的一个突出特征和理论优势，也是马克思主义科学性的重要体现。 </li></ul><p>2.革命性 </p><ul><li>坚持唯物辩证法，具有彻底的批判精神。 </li></ul><p>3.实践性 </p><ul><li><p>马克思主义是从实践中来，到实践中去，在实践中接受检验，并随实践而不断发展的学说。</p></li><li><p>实践观点是马克思主义首要的和基本的观点</p></li></ul><p>4.人民性</p><ul><li>人民至上是马克思主义的政治立场。</li></ul><p>5.发展性 </p><p>马克思主义的当代价值</p><p>1.观察当代世界变化的认识工具 </p><p>2.指引当代中国发展的行动指南 </p><p>3.引领人类社会进步的科学真理 </p><h1 id="辩证唯物论"><a href="#辩证唯物论" class="headerlink" title="辩证唯物论"></a>辩证唯物论</h1><p>哲学的基本问题是思维和存在的关系问题，主要包括两个方面的内容： </p><ul><li><p>思维和存在究竟谁是世界的本原，即物质和精神何者是第一性、何者是第二性的问题。对这一问题的不同回答，构成了划分唯心主义和唯物主义的标准。 </p></li><li><p>思维和存在是否具有同一性，即思维能否正确认识存在的问题。对这一问题的不同回答，构成了划分可知论和不可知论的标准。 </p></li></ul><p>古代朴素唯物主义以某一种物质为本原来解释世界，具有合理性和进步性。但把物质等同于具体的物质形态，具有明显的局限性。 </p><p>近代形而上学唯物主义以近代科学为基础，把物质等同于物质的微观结构层次——原子。</p><p>列宁从物质与意识的关系方面对物质概念作了全面、科学的规定：“物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映”。 </p><p>物质的唯一特性：客观实在性</p><p>物质是不依赖于人类的意识而存在，并能为人类的意识所反映的客观存在。</p><p>物质的根本属性是运动</p><p>运动的绝对性体现了物质运动的变动性、无条件性，静止的相对性体现了物质运动的稳定性、有条件性。 </p><p>时间和空间是物质运动的存在形式 </p><ul><li><p>时间是指物质运动的持续性、顺序性，特点是一维性，即时间的流逝一去不复返。 </p></li><li><p>空间是指物质运动的广延性、伸张性，特点是三维性，即空间具有长、宽、高三方面的规定性。</p></li></ul><p>马克思从实践出发去揭示社会的本质，指出“全部社会生活在本质上是实践的”</p><p>物质与意识的辩证关系 </p><p>（1）物质决定意识及意识对物质的反作用 </p><p>意识是人脑的机能和属性，是客观世界的主观映像。物质对意识的决定作用表现在意识的起源、本质和作用上。同时，物质决定意识，意识对物质具有反作用，这种反作用就是意识的能动作用。 </p><p>①从意识起源来看 </p><p>意识不仅是自然界长期发展的产物，而且是社会历史发展的产物。社会实践，特别是劳动，在意识的产生和发展中起着决定性的作用： </p><p>a．劳动为意识的产生和发展提供了客观需要和可能。 </p><p>b．人们在劳动和交往中形成的语言促进了意识的发展。 </p><p>②从意识本质来看 </p><p>意识是人脑的机能和属性，是客观世界的主观映像。因此，意识在内容上是客观的，在形式上是主观的，是客观内容和主观形式的统一。 </p><p>③从意识的能动作用来看 </p><p>a．<strong>意识活动具有目的性和计划性</strong>。人的整个实践过程，就是围绕意识活动所构建的目标和蓝图来进行的。 </p><p>b．<strong>意识活动具有创造性</strong>。人的意识可以运用概念、判断、推理等形式，对感性材料进行加工制作和选择建构，在思维中构造一个现实中所没有的理想世界。 </p><p>c．<strong>意识具有指导实践改造客观世界的作用</strong>。意识的能动作用更重要的在于以这些观念的东西为指导，通过实践使之一步步变为客观现实。 </p><p>d．<strong>意识具有调制人的行为和生理活动的作用</strong>。现代科学和医学实验证明：意识、心理因素能够对人的行为选择和健康状况产生重要影响。 </p><p>方法论</p><ul><li><p>尊重客观规律是正确发挥主观能动性的前提。 </p></li><li><p>只有充分发挥主观能动性，才能正确认识和利用客观规律。 </p></li><li><p>一切从实际出发，实事求是</p></li></ul><p>正确发挥人的主观能动性，有以下三个方面的前提和条件： </p><p>a．从实际出发是正确发挥人的主观能动性的前提。 </p><p>b．实践是正确发挥人的主观能动性的基本途径。 </p><p>c．正确发挥人的主观能动性，还需要依赖于一定的物质条件和物质手段。 </p><p>马克思主义认为，物质是世界的本原，世界统一于物质。 </p><p>我国社会主要矛盾已经转化为人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</p><h1 id="唯物辩证法"><a href="#唯物辩证法" class="headerlink" title="唯物辩证法"></a>唯物辩证法</h1><p>联系和发展的观点是唯物辩证法的总观点和总特征。</p><p>联系是指事物内部各要素之间和事物之间相互影响、相互制约、相互作用的关系。联系的特点有： </p><p>①客观性 </p><p>世界上没有孤立存在的事物，每一种事物都是在与其他事物的联系之中存在的，事物的联系是事 </p><p>物本身所固有的，不是主观臆想的。 </p><p>②普遍性 </p><p>a．任何事物都具有内在的结构性。 </p><p>b．任何事物都不能孤立存在，都同其他事物处于一定的联系之中。 </p><p>c．整个世界是相互联系的统一整体。 </p><p>③多样性 </p><p>世界上的事物是多样的，事物之间的联系也是多样的，其中事物内部的本质的、必然的联系，决 </p><p>定着事物的基本性质和发展趋势，而事物外部的、非本质的、偶然的联系可以起加速或延缓事物 </p><p>发展的作用，有时甚至起着重要的关键作用。 </p><p>④条件性  </p><p>a．条件对事物发展和人的活动具有支持或制约作用。 </p><p>b．条件是可以改变的。 </p><p>c．改变和创造条件不是任意的，其前提是必须尊重事物发展的客观规律，不能强行去改变事物存在和发展的条件。  </p><p>事物的变化发展 </p><p>发展是前进的、上升的运动，其实质是新事物的产生和旧事物的灭亡。</p><p>联系和发展的基本环节 ★★★★联系和发展是通过一系列基本环节得以实现的。内容与形式、本质与现象、原因与结果、必然与 </p><p>偶然、现实与可能构成了联系和发展的基本环节。 </p><p>（1）内容与形式 </p><p>内容指构成事物的一切要素的总和。形式指把诸要素统一起来的结构或表现内容的方式。</p><p>（2）本质与现象 </p><p>（3）原因与结果 </p><p>（4）必然与偶然 </p><p>（5）现实与可能 </p><p>唯物辩证法的基本规律主要有：对立统一规律、量变质变规律、否定之否定规律。</p><p>其中，对立统一规律是唯物辩证法的实质和核心。</p><p>对立统一规律揭示了事物普遍联系的根本内容和变化发展的内在动力，从根本上回答了事物为什么会发展的问题；它是贯穿量变质变规律、否定之否定规律以及唯物辩证法基本范畴的中心线索；它提供了人们认识世界和改造世界的根本方法——矛盾分析方法。</p><p>（1）矛盾的同一性和斗争性及其在事物发展中的作用 </p><p>矛盾是反映事物内部和事物之间对立统一关系的哲学范畴。对立和统一分别体现了矛盾的两种基本属性。矛盾的对立属性又称斗争性，矛盾的统一属性又称同一性。 </p><p>基本属性</p><p>a．矛盾的同一性。指矛盾双方相互依存、相互贯通的性质和趋势，有两个方面的含义： </p><p>b．矛盾的斗争性： 矛盾的斗争性是矛盾着的对立面相互排斥、相互分离的性质和趋势。 </p><p>辩证关系</p><p>二者的辩证关系。</p><p>矛盾的同一性和斗争性相互联结、相辅相成。 </p><p>没有斗争性就没有同一性，没有同一性也没有斗争性。斗争性寓于同一性之中，同一性通过斗争性来体现。 </p><p>矛盾的同一性是有条件的、相对的，矛盾的斗争性是无条件的、绝对的。 </p><p>矛盾的同一性和斗争性相结合，构成了事物的矛盾运动，推动着事物的变化发展。 </p><p>（2）矛盾的普遍性和特殊性及其相互关系 </p><p>①矛盾的普遍性和特殊性及其相互关系 </p><p>矛盾的普遍性和特殊性辩证关系的原理是马克思主义普遍真理同各国具体实际相结合的哲学基础。中国共产党坚持把马克思主义普遍真理与中国具体实际结合起来，在推进马克思主义中国化的进程中不断取得革命、建设、改革的新的胜利。 </p><p>a．二者的含义 </p><p>矛盾的普遍性是指矛盾存在于一切事物中，存在于一切事物发展过程的始终，旧的矛盾解决了， 新的矛盾又产生，事物始终在矛盾中运动。</p><p>矛盾的特殊性是指各个具体事物的矛盾、每一个矛盾的各个方面在发展的不同阶段上各有其特点。</p><p>b．二者的关系 </p><p>矛盾的普遍性和特殊性的关系——辩证统一的关系： </p><p>第一，矛盾的普遍性即矛盾的共性，矛盾的特殊性即矛盾的个性。矛盾的共性是无条件的、绝对的；矛盾的个性是有条件的、相对的。 </p><p>第二，任何现实存在的事物的矛盾都是共性和个性的有机统一，共性寓于个性之中，没有离开个性的共性，也没有离开共性的个性。矛盾的共性和个性相统一的关系，既是客观事物固有的辩证法，也是科学的认识方法。 </p><p>②主要矛盾与次要矛盾： </p><p>a．主要矛盾是矛盾体系中处于支配地位、对事物发展起决定作用的矛盾。 </p><p>b．次要矛盾是矛盾体系中处于从属地位、对事物的发展起次要作用的矛盾。 </p><p>c．在每一对矛盾中，有一方处于支配地位，起着主导作用，这是矛盾的主要方面，处于被支配一方的则是矛盾的次要方面。事物的性质是由主要矛盾的主要方面所规定的。 </p><p>d．把主要矛盾和次要矛盾、矛盾的主要方面和次要方面的辩证关系运用到实际工作中，就是要坚持“两点论”和“重点论”的统一。 </p><p>量变质变规律和否定之否定规律</p><p>（1）量变质变规律 </p><p>事物的矛盾运动表现为量变与质变及其相互转化。量变和质变是事物变化的两种基本状态和形式。量变与质变的相互作用、相互转化构成了量变质变规律。 </p><p>①质、量、度的含义 </p><p>a．质是一事物区别于其他事物的内在规定性。 </p><p>b．量是事物的规模、程度、速度等可以用数量关系表示的规定性。 </p><p>c．度是保持事物质的稳定性的数量界限，即事物的限度、幅度和范围，度的两端叫关节点或临界点，超出度的范围，此物就转化为他物。 </p><p>②量变与质变 </p><p>a．量变是事物数量的增减和组成要素排列次序的变动，是保持事物的质的相对稳定性的不显著变化，体现了事物发展渐进过程的连续性。 </p><p>b．质变是事物性质的根本变化，是事物由一种质态向另一种质态的飞跃，体现了事物发展渐进过程和连续性的中断。 </p><p>③量变和质变的辩证关系 </p><p>a．量变是质变的必要准备。 </p><p>b．质变是量变的必然结果。 </p><p>c．量变和质变是相互渗透的：在总的量变过程中有阶段性和局部性的部分质变；在质变过程中也有旧质在量上的收缩和新质在量上的扩张。 </p><p>d．量变和质变是相互依存、相互贯通的，量变引起质变，在新质的基础上，事物又开始新的量变，如此交替循环，构成了事物的发展过程。量变质变规律体现了事物发展的渐进性和飞跃性的统一。 </p><p>④方法论</p><p>重视量的积累</p><p>抓住时间，促成质变</p><p>（2）否定之否定规律 </p><p>①含义 </p><p>任何事物内部都包含着肯定的方面与否定的方面，由于矛盾双方的相互作用，当否定的方面上升至支配地位时，事物就会由肯定走向对自身的否定，再由否定进一步走向更高阶段的肯定，即否定之否定。事物自己发展自己的完整过程构成了否定之否定规律。 </p><p>②辩证否定观的基本内容 </p><p>a．否定是事物的自我否定，是事物内部矛盾运动的结果。 </p><p>b．否定是事物发展的环节，是旧事物向新事物的转变，是从旧质到新质的飞跃，只有经过否定，旧事物才能向新事物转变。 </p><p>c．否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物是通过否定环节联系起来的。</p><p>d．辩证否定的实质是“扬弃”，即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素。 </p><p>事物的辩证发展过程经过肯定一否定一否定之否定三个阶段。 </p><p>否定之否定规律原理的指导意义 </p><p>a．要求我们树立辩证的否定观，反对形而上学地肯定一切或否定一切，而要对事物采取科学分 </p><p>析的态度，使实践活动符合事物自我否定的辩证本性。 </p><p>b．要求我们正确看待事物发展的过程，既要看到道路的曲折，更要看到前途的光明。 </p><p>矛盾分析方法是对立统一规律在方法论上的体现，在唯物辩证法的方法论体系中居于核心的地位，是认识事物的根本方法。 </p><p>矛盾分析方法的核心要求是善于分析矛盾的特殊性，做到具体矛盾具体分析，具体情况具体分析。</p><h1 id="认识论"><a href="#认识论" class="headerlink" title="认识论"></a>认识论</h1><p>实践是人类生存和发展的最基本的活动，是人类社会生活的本质，是人的认识产生和发展的基础， 也是真理与价值统一的基础。</p><p>实践是人类能动地改造世界的社会性的物质活动。实践的特征有： </p><p>①直接现实性 ②自觉能动性 ③社会历史性</p><p>实践的基本结构 </p><p>①实践主体 </p><p>在实践活动中，实践主体是指具有一定的主体能力、从事现实社会实践活动的人 </p><p>②实践客体 </p><p>实践客体是指实践活动所指向的对象。  </p><p>③实践中介 </p><p>指各种形式的工具、手段以及运用、操作这些工具、手段的程序和方法。</p><p>实践形式的多样性（实践的基本类型） </p><p>从内容上看，实践可分为物质生产实践、社会政治实践和科学文化实践三种基本类型。</p><p>①物质生产实践 </p><p>②社会政治实践 </p><p>③科学文化实践 </p><p>④实践的新形式——虚拟实践 </p><p>实践在认识活动中的决定作用 </p><p>①实践是认识的来源  </p><p>②实践是认识发展的动力 </p><p>③实践是认识的目的人们通过实践获得认识，其最终目的是为实践服务，指导实践，以满足人们生活和生产的需要。 </p><p>④实践是检验认识真理性的唯一标准</p><p>唯物主义坚持从物到感觉和思想的认识路线，基本观点是坚持反映论的立场，认为认识是主体对客体的反映，人的一切知识都是从后天接触实际中得来的。 </p><p>辩证唯物主义认识论认为，认识的本质是主体在实践基础上对客体的能动反映。</p><p>从实践到认识（认识运动的第一次飞跃）</p><p>人们认识一定事物的过程，是一个从实践到认识，再从认识到实践的过程。</p><p>感性认识和理性认识是人对客观世界的两种不同水平的反映形式，也是认识过程的两个不同阶段。 </p><p>①感性认识 </p><p>它包括感觉、知觉和表象三种形式。 </p><p>②理性认识 </p><p>包括概念、判断、推理三种形式。 </p><p>从认识到实践（认识运动第二次飞跃）</p><p>从认识到实践是指“由精神到物质的阶段，由思想到存在的阶段”，是认识过程的第二次能动的飞跃。</p><p>a．从实践来看，认识世界的目的是为了改造世界。 </p><p>b．从认识来看，认识的真理性只有在实践中才能得到检验和发展。</p><p>实践与认识的辩证运动及其规律 </p><ul><li>实践与认识的辩证运动，是一个由感性认识到理性认识，又由理性认识到实践的飞跃，是实 </li></ul><p>践、认识、再实践、再认识，循环往复以至无穷的辩证发展过程。 </p><p>真理与价值</p><p>真理的客观性、绝对性和相对性 </p><p>马克思主义认为，真理是标志主观与客观相符合的哲学范畴，是对客观事物及其规律的正确反映。 </p><p>真理的客观性 </p><p>①真理的客观性的含义 </p><p>即真理的内容是对客观事物及其规律的正确反映，真理中包含着不依赖于人和人的意识的客观内容。</p><p>真理的绝对性和相对性 </p><p>真理是一个过程。就真理的发展过程以及人们对它的认识和掌握程度来说，真理既具有绝对性，又具有相对性，这是真理问题上的辩证法。任何真理都是绝对性和相对性的统一，二者相互联系、 不可分割。 </p><p>①真理的绝对性和相对性及其关系 </p><p>a．真理的绝对性，指真理主客观统一的确定性和发展的无限性。它有两个方面的含义： </p><p>第一，指任何真理都标志着主观与客观之间的符合，都包含着不依赖于人和人的意识的客观内容， 都同谬误有原则的界限。</p><p>第二，人类认识按其本性来说，能够正确认识无限发展着的物质世界，认识每前进一步，都是对无限发展着的物质世界的接近</p><p>b．真理的相对性，指人们在一定条件下对客观事物及其本质和发展规律的正确认识总是有限度的、不完善的。</p><p>从客观世界的整体来看，任何真理都只是对客观世界的某一阶段、某一部分的正确认识，人类已经达到的认识的广度总是有限度的，因而，认识有待扩展。 </p><p>第二，就特定事物而言，任何真理都只是对客观对象一定方面、一定层次和一定程度的正确认识， 认识反映事物的深度是有限度的，或是近似性的。因而，认识有待深化。</p><p>真理与谬误 </p><p>谬误是指同客观事物及其发展规律相违背的认识，是对客观事物及其发展规律的歪曲反映。</p><p>②谬误和真理的关系 </p><p>真理和谬误是人类认识中的一对永恒矛盾，它们之间既对立又统一： </p><p>a．真理与谬误相互对立。</p><ul><li>在确定的对象和范围内，真理与谬误的对立是绝对的，与对象相符合的认识就是真理，与对象不相符合的认识就是谬误。即真理和谬误存在着原则界限。 </li></ul><p>b．真理与谬误的对立也是相对的，它们在一定条件下能够相互转化。</p><ul><li>真理与谬误的对立只是在非常有限的范围内才具有绝对的意义，超出这个范围，二者的对立就是相对的。</li></ul><p>实践是检验真理的唯一标准</p><p>价值评价的基本特点 </p><ul><li>评价以主客体的价值关系为认识对象。</li><li>评价结果与评价主体直接相关。</li><li>评价结果的正确与否依赖于对客体状况和主体需要的认识。</li></ul><p>真理尺度与价值尺度的内涵 </p><ul><li>实践的真理尺度是指在实践中人们必须遵循正确反映客观事物本质和规律的真理。只有按照真理办事，才能在实践中取得成功。 </li><li>实践的价值尺度是指在实践中人们都是按照自己的尺度和需要去认识世界和改造世界。这一尺度体现了人的活动的目的性。 </li></ul><p>价值尺度必须以真理为前提</p><p>认识世界和改造世界是一个矛盾的过程</p><p>认识世界和改造世界的过程是从必然走向自由的过程</p><h1 id="唯物史观"><a href="#唯物史观" class="headerlink" title="唯物史观"></a>唯物史观</h1><p>社会存在与社会意识</p><p>①唯心史观 </p><p>社会意识决定社会存在</p><p>②唯物史观 </p><p>社会存在决定社会意识。 </p><p>社会存在又称社会物质生活条件，是社会生活的物质方面，主要包括自然地理环境、人口因素和物质生产方式。 </p><p>社会意识是社会生活的精神方面，是社会存在的反映。主要包括政治法律思想、道德、艺术、宗教、哲学等。</p><p>政治法律思想是随着阶级和国家的出现而产生的，是最直接、最集中地反映经济基础的意识形态，在意识形态中居于核心地位，起主导作用。</p><p>社会存在和社会意识的辩证关系 </p><p>社会存在和社会意识是辩证统一的。社会存在决定社会意识，社会意识是社会存在的反映，并反 </p><p>作用于社会存在。</p><p>①社会存在决定社会意识 </p><p>②社会意识有相对独立性 </p><p>a．社会意识与社会存在发展的不完全同步性和不平衡性。 </p><p>b．社会意识内部各种形式之间的相互影响及各自具有的历史继承性。 </p><p>c．社会意识对社会存在具有能动的反作用。 </p><p>生产力与生产关系矛盾运动的规律，是人类社会发展的基本规律。</p><p>（1）生产力与生产关系 </p><p>生产力 ：人类在生产实践中形成的改造和影响自然以使其适合社会需要的物质力量</p><ul><li>生产力是人类社会生活和全部历史的基础</li></ul><p>生产关系：是人们在物质生产过程中形成的不以人的意志为转移的经济关系</p><ul><li><p>社会关系中最基本的关系，政治关系、家庭关系、宗教关系等其他社会关系，都受生产关系的支配和制约。</p></li><li><p>生产关系包括生产资料所有制关系</p></li><li><p>其中生产资料所有制关系是最基本的。 </p></li></ul><p>生产力与生产关系的相互关系，即生产力决定生产关系，而生产关系又反作用于生产力。 </p><p>a．生产力决定生产关系 </p><p>b．生产关系对生产力的能动的反作用 </p><ul><li><p>当生产关系适合生产力发展的客观要求时，对生产力的发展起推动作用。 </p></li><li><p>当生产关系不适合生产力发展的客观要求时，就会阻碍生产力的发展。 </p></li></ul><p>社会主义的根本任务是解放和发展社会生产力</p><p>经济基础与上层建筑的矛盾运动及其规律 </p><p>（1）经济基础与上层建筑 </p><p>①经济基础是指由社会一定发展阶段的生产力所决定的生产关系的总和。</p><p>②上层建筑是建立在一定经济基础之上的意识形态以及与之相应的制度、组织和设施，由意识形态以及政治法律制度及设施和政治组织两部分构成。 </p><p>在整个上层建筑中，政治上层建筑居主导地位，国家政权是核心。 </p><p>经济基础决定上层建筑，上层建筑反作用于经济基础，二者相互影响、相互作用。 </p><p>①经济基础决定上层建筑。 </p><p>②上层建筑对经济基础具有反作用。 </p><p>③经济基础与上层建筑的相互作用构成二者的矛盾运动。 </p><p>④经济基础和上层建筑之间的内在联系构成了上层建筑一定要适合经济基础状况的规律。</p><p>社会形态更替的规律也是人们自己的社会行动的规律，人们对于某种社会形态的历史选择性包含三层意思： </p><p>a．社会发展的客观必然性造成了一定历史阶段社会发展的基本趋势，为人们的历史选择提供了基础、范围和可能性空间。 </p><p>b．社会形态更替的过程也是一个主观能动性与客观规律性相统一的过程。 </p><p>c．人们的历史选择性归根结底是人民群众的选择性。</p><p>社会形态更替的前进性与曲折性 </p><ul><li>社会形态的更替还表现为历史的前进性与曲折性、顺序性与跨越性的统一。 </li></ul><p>生产力和生产关系、经济基础和上层建筑的矛盾是社会基本矛盾。</p><p>社会基本矛盾在历史发展中的作用 </p><p>社会基本矛盾是历史发展的根本动力，它在历史发展中的作用主要表现在： </p><p>①生产力是社会基本矛盾运动中最基本的动力因素，是人类社会发展和进步的最终决定力量。</p><p>②社会基本矛盾特别是生产力和生产关系的矛盾，决定着社会中其他矛盾的存在和发展。</p><p>③社会基本矛盾具有不同的表现形式和解决方式，并从根本上影响和促进社会形态的变化和发展。</p><p>阶级斗争是阶级社会发展的直接动力 </p><p>改革在社会历史发展中的重要作用集中表现在：它是在一定程度上解决社会基本矛盾、促进 </p><p>生产力发展、推动社会进步的有效途径和手段。 </p><p>科技革命是推动经济和社会发展的强大杠杆 </p><p>科学技术主要是通过促进人们的生产方式、生活方式和思维方式的深刻变化来推动社会发展： </p><p>①对生产方式产生了深刻影响： </p><p>②对生活方式产生了巨大影响</p><p>③促进了思维方式的变革。主要表现在新的科学理论和技术手段通过影响思维主体、思维客体和思维工具，引起了思维方式的变革。 </p><p>人民群众在创造历史过程中的决定作用</p><p>①人民群众的含义 </p><p>人民群众是一个历史范畴。从质上看，人民群众是指一切对社会历史发展起推动作用的人；从量上看，人民群众是指社会人口中的绝大多数。在不同的历史时期，人民群众有着不同的内容，包含着不同的阶级、阶层和集团，但其中最稳定的主体部分始终是从事物质资料生产的劳动群众。 </p><p>②人民群众的作用 </p><p>在社会基本矛盾的解决过程中，人民群众是顺应生产力发展要求的社会力量，是具有变革旧的生产关系愿望的社会力量，是主张变革旧的社会制度和旧的思想观念的社会力量。主要体现在： </p><p>a．人民群众是社会物质财富的创造者。 </p><p>b．人民群众是社会精神财富的创造者。 </p><p>c．人民群众是社会变革的决定力量。 </p><p>无产阶级政党的群众路线 </p><p>①群众观点，主要内容包括：</p><p>a．坚信人民群众自己解放自己的观点；</p><p>b．全心全意为人民服务的观点；</p><p>c．一切向人民群众负责的观点；</p><p>d．虚心向群众学习的观点。 </p><p>②群众路线，即一切为了群众，一切依靠群众，从群众中来，到群众中去。</p><p>杰出人物是推动历史发展</p><p>评价历史人物时应该坚持历史分析方法和阶级分析方法。 </p><h1 id="资本主义的本质及规律"><a href="#资本主义的本质及规律" class="headerlink" title="资本主义的本质及规律"></a>资本主义的本质及规律</h1><h2 id="商品二因素（价值和使用价值）和劳动二重性（具体劳动和抽象劳动）"><a href="#商品二因素（价值和使用价值）和劳动二重性（具体劳动和抽象劳动）" class="headerlink" title="商品二因素（价值和使用价值）和劳动二重性（具体劳动和抽象劳动）"></a>商品二因素（价值和使用价值）和劳动二重性（具体劳动和抽象劳动）</h2><p>商品：商品是用来交换、能满足人们某种需要的劳动产品。</p><ul><li>具有使用价值和价值两种属性（商品二因素）</li><li>是使用价值和价值的矛盾统一体</li></ul><p>使用价值：是指商品能满足人的某种需要的有用性</p><ul><li>反映人与自然之间的物质关系</li><li>使用价值是商品的自然属性</li><li>使用价值是交换价值的物质承担者</li></ul><p>价值：凝结在商品中的无差别的一般人类劳动</p><ul><li>价值是社会特有的属性</li><li>价值是交换价值的基础，交换价值是价值的表现形式</li></ul><p>商品的使用价值和价值是相互排斥的，二者不可兼得</p><p>作为商品，必须同时具有使用价值（自然属性）和价值（社会属性）两个因素</p><p>商品是劳动商品，生产商品的劳动可以区分为具体劳动和抽象劳动（劳动二重性）</p><p>具体劳动：指生产一定使用价值的具体形式的劳动。</p><ul><li>生产商品的具体劳动创造使用价值</li></ul><p>抽象劳动：是指撇开一切具体形式的、无差别的一般人类劳动，即人的脑力和体力的耗费。</p><ul><li>生产商品的抽象劳动创造价值</li></ul><p>正是劳动的二重性决定了商品的二因素</p><p>具体劳动和抽象劳动在时间和空间上是统一的，是商品生产者的同一劳动过程不可分割的两个方面</p><p>商品价值量由社会必要劳动时间决定</p><p>生产商品所需要的社会必要劳动时间随着劳动生产率的变化而变化</p><p>商品的价值量与生产商品所耗费的劳动时间成正比，与劳动生产率成反比</p><p>商品交换是以货币为媒介。</p><p>货币：货币是在长期交换过程中形成的固定充当一般等价物的商品</p><ul><li>货币有五种职能，价值尺度、流通手段、贮藏手段、支付手段和世界货币，前两个是基本职能</li></ul><p>商品经济的基本矛盾：私人劳动和社会劳动的矛盾</p><h2 id="价值规律"><a href="#价值规律" class="headerlink" title="价值规律"></a>价值规律</h2><p>价值规律是商品生产和商品交换的基本规律</p><p>主要内容和客观要求：商品的价值量由生产商品的必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行。</p><p>价值规律贯穿于商品经济的全部过程。</p><p>在商品经济中，价值规律的表现形式是，商品的价格围绕商品的价值自发波动</p><p>价值规律是在市场配置资源过程中体现它的客观要求和作用的，其作用表现在：</p><ol><li><p>自发地调节生产资料和劳动力在社会各生产部门之间的分配比例</p></li><li><p>自发地刺激社会生产力的发展</p></li><li><p>自发地调节社会收入的分配</p><p>价值规律在对经济活动自发调节的时候，会产生一些消极的后果</p><ul><li>一是导致社会资源的浪费</li><li>二是阻碍社会的进步</li><li>三是导致收入两极分化</li></ul></li></ol><p>私人劳动和社会劳动的矛盾构成私有制商品经济的基本矛盾</p><p>私人劳动和社会劳动的矛盾是商品经济其他一切矛盾的基础</p><p>私人劳动和社会劳动的矛盾决定着商品生产者的命运</p><p>在私有制商品经济条件下，即资本主义制度下，商品经济的基本矛盾进一步发展成<strong>资本主义基本矛盾</strong>，</p><p>即生产社会化和生产资料资本主义私人占有之间的矛盾</p><p>马克思在继承英国古典政治经济学劳动创造价值的理论的同时，创立了劳动二重性理论</p><p>劳动二重性理论成为了”理解政治经济学的枢纽“</p><h2 id="资本主义经济制度的本质"><a href="#资本主义经济制度的本质" class="headerlink" title="资本主义经济制度的本质"></a>资本主义经济制度的本质</h2><p>资本主义产生的两个途径</p><ul><li>从小商品经济分化出来</li><li>从商人和高利贷者转化而来</li></ul><p>资本原始积累的两个途径</p><ul><li>用暴力手段剥夺农民的土地</li><li>用暴力手段掠夺货币财富</li></ul><p>资本主义经济制度：是以资本主义私有制和雇佣劳动为基础的一种剥削制度。</p><p>资本主义经济制度的形成的前提条件：劳动力成为商品</p><p>劳动力成为商品条件</p><ul><li>劳动者是自由人</li><li>劳动者没有别的商品可以出卖</li></ul><p>一旦货币购买的劳动力带来剩余价值，货币也就变成了资本</p><p>资本主义所有制是雇佣劳动赖以存在的基础，是资本与雇佣劳动之间剥削与被剥削关系的体现</p><p>生产剩余价值是资本主义生产方式的绝对规律</p><p>剩余价值是在资本主义生产过程中生产出来的</p><p>雇佣劳动者的剩余劳动是剩余价值的唯一源泉</p><p>要确定资本家对工人的剥削程度，就应该拿剩余价值和雇佣劳动者的可变资本相比</p><p>用公式表示就是m’=m/v (m’表示剩余价值率，m表示剩余价值，v为可变资本)</p><p>剩余价值生产的两种基本方法</p><ol><li>绝对剩余价值生产<ul><li>绝对剩余价值是指在社会必要劳动时间不变的条件下，由于延长工作日的长度和提高劳动强度而生产的剩余价值</li></ul></li><li>相对剩余价值生产<ul><li>相对剩余价值是指在工作日不变的条件下，通过缩短必要劳动时间而延长剩余劳动时间所产生的剩余价值</li></ul></li></ol><p>超额价值：是指企业由于提高劳动生产率而使商品的个别价值低于社会价值的差额</p><p>资本积累是资本主义扩大再生产的源泉</p><p>资本主义的唯一动机和直接目的就是追求剩余价值</p><p>产业资本在循环过程中要经历三个不同的阶段</p><ol><li>购买阶段，产业资本执行货币职能</li><li>生产阶段，产业资本执行生产资本职能</li><li>售卖阶段，产业资本执行生产经济职能</li></ol><p>社会再生产的核心问题是社会总产品的实现问题，即社会总产品的价值补偿和实物补偿问题</p><p>只要资本和雇佣劳动的基本经济关系不变，资本主义工资的本质就不会发生变化</p><p>平均利用率是剩余价值总量与社会总资本的比率</p><p>资本主义基本矛盾：生产社会化和生产资料资本主义私人占有之间的矛盾</p><p>资本主义经济危机</p><ul><li>资本主义发展到一定阶段，就会发生以生产过剩为基本特征的经济危机</li></ul><h2 id="资本主义的发展及其趋势"><a href="#资本主义的发展及其趋势" class="headerlink" title="资本主义的发展及其趋势"></a>资本主义的发展及其趋势</h2><p>自由竞争引起生产集中和资本集中，生产集中和资本集中发展到一定阶段必然引起垄断，这是资本主义发展的客观规律。</p><p>垄断：是指少数资本主义大企业为了获得高额利润，通过相互协议或者联合，对一个或几个部门商品的生产、销售和价格进行操纵和控制</p><p>垄断条件下不能消除竞争，反而会使竞争变得更加复杂和激烈</p><p>在竞争手段上，自由竞争主要运用经济手段</p><p>金融寡头，在经济上统治通过参与制，在政治上统治通过个人联合</p><p>经济全球化：经济全球化是指在生产不断发展、科技加速进步、社会分工和国际分工不断深化、生产的社会化和国际化程度不断提高的情况下，世界各国、各地区的经济活动越来越超出某一国家和地区的范 围而相互联系、相互依赖的过程。</p><p>经济全球化的表现 </p><ul><li>国际分工进一步深化。<ul><li>在经济全球化过程中，国际水平分工逐渐取代国际垂直分工成为居主导地位的分工形式。 </li></ul></li><li>贸易全球化。<ul><li>指商品和劳务在全球范围内的自由流动。在经济全球化过程中，国际贸易迅速 扩大，服务贸易发展迅速，参与贸易的国家急剧增加。 </li></ul></li><li>金融全球化。<ul><li>指世界各国、各地区在金融业务、金融政策等方面相互协调、相互渗透、相互竞 争不断加强，使全球金融市场更加开放、金融体系更加融合、金融交易更加自由的过程。 </li></ul></li><li>企业生产经营全球化。<ul><li>指跨国公司在全球范围内建立分支机构，借助母公司与分支机构之间各种形式的联系，实行跨国投资和生产的过程。其重要标志是跨国公司成为世界经济的主体。跨国公司的迅速发展，使生产、资本和商品的国际化进一步深化，极大地推动了经济全球化进程。 </li></ul></li></ul><p>经济全球化的动因 </p><p>导致经济全球化迅猛发展的因素主要有三点： </p><ul><li><p>科学技术的进步和生产力的发展提供了坚实的物质基础和根本的推动力。 </p></li><li><p>跨国公司的发展提供了适宜的企业组织形式。 </p></li><li><p>各国经济体制的变革是经济全球化的体制保障。 </p></li></ul><p>经济全球化的影响 </p><p>积极影响 </p><ul><li>社会分工得以在更大的范围内进行，资金、技术等生产要素可以在国际社会流动和优化配置，由此带来巨大的分工利益，推动世界生产力的发展。 </li><li>经济全球化为各国提供了广阔的市场，使其产品能够更加便捷、顺畅地流通。 </li><li>经济全球化使科技成果和信息在世界各地更加顺畅地自由流动，促进了各国的共同繁荣。 </li><li>体现了社会化生产的要求，不仅发达国家从中受益，一些发展中国家在参与经济全球化进程中也得到了快速发展，例如提供先进技术和管理经验、提供更多的就业机会、推动发展中国家国际贸易发展、促进发展中国家跨国公司的发展等。 </li></ul><p>负面影响 </p><ul><li>发达国家与发展中国家在经济全球化过程中的地位和收益不平等、不平衡，使发展中国家总体上处于更为不利的地位。 </li><li>加剧了发展中国家资源短缺和环境污染恶化。 </li><li>一定程度上增加经济风险。 </li></ul><p>资本主义发生了许多变化。 </p><p>（1）生产资料所有制的变化 </p><p>（2）劳资关系和分配关系的变化 </p><p>二战后，劳资关系的变化 </p><p>a．职工参与决策。这一制度旨在协调劳资关系，缓和阶级矛盾。 </p><p>b．终身雇佣。目的是增强工人对企业的归属意识，从而更加自觉地服从资本家的统治。 </p><p>c．职工持股。旨在通过使职工持有一部分本公司的股份来调动工人的生产积极性，使工人产生归属感，在生产中努力提高劳动生产率，增加剩余价值生产。 </p><p>d．普及化、全民化的社会福利制度。在一定程度上满足劳动者的安全和保障需求，保证劳动者 </p><p>维持最低生活水平，改善劳动者的社会状况。 </p><p>（3）社会阶层和阶级结构的变化 </p><p>（4）经调节机制和经济危机形态的变化 </p><p>（5）政治制度的变化 </p><p>当代资本主义新变化的原因和实质</p><p>（1）当代资本主义新变化的原因 </p><p>①科学技术革命和生产力的发展，是当代资本主义发生新变化的根本推动力量。 </p><p>②工人阶级争取自身权利和利益的斗争，是推动当代资本主义发生新变化的重要力量。 </p><p>③社会主义制度初步显示的优越性对当代资本主义产生了重要影响。 </p><p>④主张改良主义的政党对资本主义制度的改革，也对当代资本主义新变化发挥了重要作用。 </p><p>2008年国际金融危机以来资本主义的矛盾与冲突 </p><p>2008年金融危机以来出现的社会问题。 </p><p>（1）经济发展“失调” </p><p>经济发展仍然面临一系列问题，具体表现为： </p><p>①虚拟经济与实体经济发展失衡。 </p><p>②福利风险增加。 </p><p>③债务负担沉重。 </p><p>（2）政治体制“失灵” </p><p>西方国家出现了治理危机，暴露出西式民主的弊端和局限，具体表现为： </p><p>①西式选举往往难以选贤。 </p><p>②政党利益可能凌驾于国家利益之上。 </p><p>③“民主陷阱”会阻碍国家治理。 </p><p>④传统精英政治走向衰落。 </p><p>（3）社会融合机制“失效” </p><p>具体表现为：①如社会极端思潮抬头；②社会流动性退化；③社会矛盾激化。 </p><p>资本主义的历史地位和发展趋势 </p><p>（1）资本主义基本矛盾“包含着现代的一切冲突的萌芽” </p><p>（2）资本积累推动资本主义基本矛盾不断激化并最终否定资本主义自身 </p><p>（3）国家垄断资本主义是资本社会化的更高形式，将成为社会主义的前奏 </p><p>（4）资本主义社会存在着资产阶级和无产阶级两大阶级之间的矛盾和斗争 </p><p>（5）社会主义代替资本主义是一个长期的历史过程 </p><h1 id="—————分割线—————"><a href="#—————分割线—————" class="headerlink" title="—————分割线—————"></a>—————分割线—————</h1><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>1<strong>、关于马克思主义的产生</strong></p><p><strong>马克思主义产生的时间</strong>：19 世纪 40 年代中期</p><p><strong>马克思主义的客观历史条件</strong>：资本主义得到迅速发展及其内在矛盾的尖锐化，以及马克思主义作为独立的政治力量登上历史舞台（阶级基础）</p><p><strong>马克思主义产生的主观条件</strong>：马恩的崇高理想、勤奋好学、理论联系实际的学风，使他们两人成为马克思主义的创始人。</p><h1 id="马克思主义哲学部分"><a href="#马克思主义哲学部分" class="headerlink" title="马克思主义哲学部分"></a>马克思主义哲学部分</h1><h2 id="物质世界及其发展规律"><a href="#物质世界及其发展规律" class="headerlink" title="物质世界及其发展规律"></a>物质世界及其发展规律</h2><h3 id="关于哲学的含义及哲学的基本问题"><a href="#关于哲学的含义及哲学的基本问题" class="headerlink" title="关于哲学的含义及哲学的基本问题"></a>关于哲学的含义及哲学的基本问题</h3><p><strong>哲学的基本问题</strong>：思维和存在关系问题</p><p><strong>思维和存在或意识和物质的关系问题</strong></p><p>有二方面内容：</p><p>第一是何者为第一，它是划分唯物主义和唯心主义的唯一标准；</p><p>第二是两者有无统一性，它是划分可知论和不可知论的唯一标准。</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  哲学的基本问题--&gt;物质和意识哪个是本原  哲学的基本问题--&gt;思维和存在的同一性  物质和意识哪个是本原--&gt;唯物主义  物质和意识哪个是本原--&gt;唯心主义  思维和存在的同一性--&gt;可知论  思维和存在的同一性--&gt;不可知论<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  社会历史观的基本问题&#x2F;社会存在与社会意识关系--&gt;历史唯心主义  社会历史观的基本问题&#x2F;社会存在与社会意识关系--&gt;历史唯物主义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  世界存在状态--&gt;辩证法  世界存在状态--&gt;形而上学<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR;  世界的统一性问题--&gt;一元论  世界的统一性问题--&gt;二元论  一元论--&gt;唯物主义  一元论--&gt;唯心主义  唯物主义--&gt;古代朴素唯物主义  唯物主义--&gt;近代的形而上学唯物主义  唯物主义--&gt;现代的辩证唯物主义和历史唯物主义  唯心主义--&gt;主观唯心主义  唯心主义--&gt;客观唯心主义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="马克思主义的物质观"><a href="#马克思主义的物质观" class="headerlink" title="马克思主义的物质观"></a>马克思主义的物质观</h3><p>列宁的物质的定义：客观实在性（物质的根本特性，唯一特性）</p><ul><li>第一,他指出物质不依赖于意识的客观实在,同唯心主义划清了界限;</li><li>第二,他指出物质是可以被人们认识的,同不可知论划清了界限;</li><li>第三,他指出客观实在性是一切物质的共性,克服了旧唯物主义物质观的局限性。 </li></ul><p>运动是物质的基本属性</p><h4 id="物质和意识的辩证关系"><a href="#物质和意识的辩证关系" class="headerlink" title="物质和意识的辩证关系"></a><strong>物质和意识的辩证关系</strong></h4><p>物质决定意识，尊重客观规律</p><p>意识反作用与物质，发挥主观能动性</p><p><strong>物质和意识关系</strong>:</p><ul><li>辩证唯物主义认为,物质与意识的关系是:物质决定意识,物质第一生,意识第二性;意识对物质又具有能动的反作用。</li><li>物质决定意识和意识的能动作用是辩证的统一。割裂这种统一,会导致唯心主义和形而上学唯物主义的错误。唯心主义片面夸大意识的能动作用,否认物质对意识的决定作用。形而上学唯物主义肯定物质对意识的决定作用,但它忽视了意识的能动作用。</li></ul><p><strong>意义:</strong></p><ul><li>世界是客观的人类只有保护自然才可以生存但是人类又可以根据自然界本身的性质规律改造自然并不是无能为力的</li></ul><p><strong>综合应用:</strong> </p><ul><li><p>尊重客观规律和发挥主观能动性辩证统一的原理及其现实意义。</p></li><li><p>1.要正确发挥人的主观能动性,必须正确处理主观能动性和客观规律性的关系。尊重客观规律和发挥主观能动性是辩证统一的。</p><ul><li>第一,尊重客观规律是正确发挥主观能动性的前提。</li><li>第二,认识和利用规律又必须充分发挥人的主观能动性。</li></ul></li><li><p>2.尊重客观规律和发挥主观能动性辩证统一的原理,具有重要的现实意义。在社会主义现代化建设和各项工作中,我们必须把发挥人的主观能动性与尊重客观规律结合起来,把高度的实践热情与科学的求实态度结合起来,既要充分发挥广大人民群众的积极性和创造性,又要踏踏实实,按规律办事。坚决反对片面强调发挥人的主观能动性,无视规律,盲目蛮干。我们既要从实际出发,实事求是,按规律办事,又要解放思想,锐意进取,勇于开拓创新,只有这样,才能把建设中国特色社会主义的伟大事业不断推向前进。</p></li></ul><h3 id="唯物辩证法-1"><a href="#唯物辩证法-1" class="headerlink" title="唯物辩证法"></a>唯物辩证法</h3><p>两个特征：</p><ul><li>联系和发展</li><li>联系：联系的客观普遍性；联系的多样化；联系是指事物之间以及事物内部诸要素之间的相互影响、相互作用和相互制约的关系。</li><li>发展：发展的实质是新陈代谢的运动和变化。发展是指事物一种特殊的运动变化—上升性、前进性的运动变化，即事物由低级到高级、由简单到复杂的不断更替的运动变化过程。发展的实质是新事物的产生和旧事物的灭亡。</li></ul><p>三大规律：</p><ul><li>对立统一（重点）<ul><li>对立统一规律亦称矛盾规律,其基本内容是:任何事物都包含着矛盾,矛盾双方既统一又斗争,由此推动事物运动变化发展。矛盾双方的对立和统一这两重关系决定了矛盾具有两种基本属性,即同一性和斗争性。</li><li>(1)矛盾的斗争性:指矛盾双方相互排斥、相互对立的性质.矛盾的同一性是指矛盾双方相互联系、相互吸引的性质。它包括两方面的含义。①矛盾双方相互依存。②矛盾双方相互贯通。</li><li>(2)矛盾的同一性和斗争性是既相互区别、又相互联结的。首先,矛盾的同一性和斗争性是矛盾的两种相反的基本属性,矛盾同一性的相对性是指它的条件性。矛盾斗争性的绝对性是指它的无条件性。其次,矛盾的同一性和斗争性又是相互联结、不可分离的。一方面,同一性不能脱离斗争性而存在,没有斗争性就没有同一性。另一方面,斗争性寓于同一性之中,没有同一性也没有斗争性。</li></ul></li><li>质量互变<ul><li>第一、量变是质变的必要准备，质变离不开量变。第二、质变是量变的必然结果。第三、量变和质变相互渗透。</li><li>一方面，质变体现和巩固量变的成果，另一方面，在总的量变过程中有阶段性和局部性的部分质变。量变和质变是辩证统一的，割裂二者的统一，就会导致激变论或庸俗进化论。激变论只承认质变，否认量变。激变论在社会政治上表现为冒险主义。庸俗进化论只承认量变，否认质变。社会政治上表现为改良主义。</li><li>质量互变规律要求我们在社会主义建设和改革过程中，把远大的理想和目标同有步骤、分阶段地踏实苦干、稳步前进的精神结合起来，反对急躁冒进、急于求成。否则会欲速则不达，得到事与愿违的结果。</li></ul></li><li>否定之否定<ul><li>事物的发展经过两次辩证的否定，由肯定阶段到否定阶段，再到否定之否定阶段，从而使事物的发展表现为螺旋式上升和波浪式前进的过程。否定之否定规律揭示了事物的发展是前进性和曲折性的统一。</li></ul></li></ul><p>五对范畴（看一下，他们都是对立统一的）</p><ul><li>原因与结果<ul><li>原因在先，结果在后。因果联系是引起和被引起的关系。</li></ul></li><li>必然性和偶然性<ul><li>必然性是指事物联系和发展过程中确定不移的、不可避免的趋势。必然性与本质和规律是同等程度的概念<strong>。</strong>偶然性是指事物联系和发展过程中不确定的趋势。</li></ul></li><li>可能性和现实性<ul><li>现实性是指包含内在根据的、合乎必然性的存在，是客观事物和现象种种联系的综合。可能性是包含在现实事物中、预示事物发展前途的种种趋势、潜在的尚未实现的东西。</li></ul></li><li>内容和形式<ul><li>内容是指构成事物一切要素的总和，即事物的各种内在矛盾以及由这些矛盾所决定的事物的特性、成分、运动过程和发展的趋势等的总和。形式是指把内容诸要素统一起来的结构或表现内容的方式。内容与形式的关系是对立统一、相互作用的关系。</li></ul></li><li>本质和现象<ul><li>本质是指事物的根本性质以及组成事物基本要素的内在联系。现象是指事物的表面特征以及这些特征的外部联系。</li></ul></li></ul><h2 id="认识论-1"><a href="#认识论-1" class="headerlink" title="认识论"></a>认识论</h2><p><strong>实践</strong>的观点是辩证唯物主义认识论之第一的基本的观点,<strong>实践是认识的基础</strong>,从而引起了认识论的革命。</p><p>认识是什么，是主体对客体的能动反映</p><p>实践决定认识</p><ul><li>实践是认识的来源。</li><li>实践是认识发展的动力</li><li>实践是检验认识真理性的唯一标准。</li><li>实践是认识的目的。</li></ul><p><strong>认识的辩证运动过程</strong> （二次飞跃）：</p><ul><li>第一次是从感性认识到理性认识（或是从实践到认识），第二次是从理性认识到实践：原因和条件</li></ul><p>认识的辩证运动规律及其意义</p><ul><li><p>认识的有限性是指每个时代的人每一次具体的认识是有限的，认识的无限性是指整个人类无止境的世代更替的认识是无限的。每个时代的人的每一次具体的认识，由于受主客观条件的限制，都是有限的；整个人类无止境的世代更替的认识，则具有无限性。整个人类认识的无限性，存在于每个时代的人认识的有限性中，并通过无数有限性的认识而得到实现。所以认识的有限性和认识的无限性是辩证统一的。</p></li><li><p>规律：毛泽东指出：‘实践、认识、再实践、再认识，这种形式，循环往复以至无穷，而实践和认识之每一循环的内容，都比较地进到高一级的程度、螺旋式的上升运动，这就是认识运动反正得总规律。</p></li><li><p>意义：首先、主观和客观、认识和实践的统一是具体的。这是指特定的主体在具体的实践中的主观认识与特定的客观实际的相一致、相符合。（一定时代下）其次、主观和客观、认识和实践的统一是历史的、变化发展的。这是指认识也实践的统一是变动的，随着实践的发展，认识也应跟着实践的发展而发展。（与时俱进）</p><p>认识过程的反复性和无限性：实践、认识、再实践、再认识，无限循环，由低级阶段向高级阶段不断推移的永无止境的前进运动。</p></li></ul><h2 id="真理观"><a href="#真理观" class="headerlink" title="真理观"></a>真理观</h2><p>真理的客观性：任何真理都包含不依赖于主体、不依赖于人类的客观内容;（内容客观）</p><ul><li>其一、真理的客观性就是承认认识的内容来自客观实际又符合客观实际。事物及其规律本身并不就 是真理；真理属于认识范围。</li><li>其二、真理的客观性是指检验真理的标准是客观的。验证真理的标准只能是实践。 主观的真理是根本不存在的。唯物主义承认客观真理。唯心主义否认客观真理。</li></ul><p>真理和谬误的辩证关系（内容真理的含义）：</p><ul><li>在实践中，主体对客体的反映有两种情形：一种是主体正确地反映了客体，一种是主体歪曲地反映了客体。正确地反映客体的认识就是真理，歪曲地反映客体的认识就是谬误。</li><li>真理和谬误是认识运动中既对立又统一的两个方面。它们的对立表现在相互排斥、相互否定上。 </li><li>真理与谬误的统一表现为它们之间的相互依存和相互转化。</li><li>在一定条件下，可以相互转化。这是因为任何真理都是具体的，都有与之相符的特定的对象、时间、和范围，一旦离开这个对象，超出特定的时间和范围，真理就会变成谬误，真理便会变成错误。谬误也可能转化为真理，这是指当人们把超出特定对象、时间和范围的认识进行纠正，使之重新与对象、时间和范围相符合，这时谬误就变成了真理。</li></ul><p>实践是检验真理的唯一标准（唯物论）</p><ul><li>检验真理就是要辨明认识与认识对象是否一致、相符合。实践就是人的主观见之于客观的活动,只有它能够把主观认识和客观实际联系起来加以对照,来确定认识是否与认识对象相一致、相符合,从而使认识得到检验。</li><li>实践具有直接现实性的品格。人们通过实践把思想、理论在现实中实现出来,并把这种实现出来的东西的同原来的思想、理论相对照,从而判明其是否正确。</li></ul><p><strong>综合运用:</strong> </p><p>真理的绝对性和相对性辩证关系的原理及其现实意义。</p><ul><li><p>①真理是绝对的,又是相对的,是绝对性和相对性的统一。真理的绝对性和相对性相互依存。真理的绝对性和相对性互相包含、互相渗透。相对真理向绝对真理转化。</p></li><li><p>②把握真理的绝对性和相对性的统一的原理,对于正确对待马克思主义有重要的意义。马克思主义是真理。它是绝对性和相对性的统一。它正确的反映自然、社会和思维发展的普遍规律,具有绝对性的一面。但是,它又没有穷尽一切事物及其发展规律,需要随着实践的发展而发展,又具有相对性的一面。因为它有绝对性的一面,我必须坚持它并将其作为我们的指导思想;因为它有相对性的一面,所以我们必须在实践中丰富并发展它。即坚持又发展,才是对待马克思主义的正确态度。</p></li></ul><p>实践标准本身的辩证性，实践的局限性</p><p><strong>实践标准既是确定的、绝对的，又是不确定的、相对的，是确定性与不确定性、绝对性与相对性的统一。这就是在真理标准问题上坚持了辩证法</strong></p><p>实践标准的绝对性、确定性是指：</p><ul><li><p>第一、认识是否是真理，只有通过实践来检验，此外再无别的检验真理的办法。</p></li><li><p>第二、人的实践和人的认识都是有限和无限的统一，实践能够对人类的一切认识作出检验。</p></li></ul><p>实践标准的相对性、不确定性是指：</p><ul><li><p>第一、任何实践总是一定历史条件下的具体的实践，都是有局限性的，因而它不可能完全证实或驳倒现有的一切认识。</p></li><li><p>第二、实践对真理的检验具有反复性。许多认识的真理性往往不是经过实践的一次检验就能被证实或驳倒，而是要经过多次反复检验，才能被证实或驳倒。</p></li></ul><h2 id="历史观"><a href="#历史观" class="headerlink" title="历史观"></a>历史观</h2><p>基本问题：是社会存在和社会意识的关系问题（划分历史唯物主义和历史唯心主义的唯一标准）</p><ul><li>社会存在和社会意识的关系问题之所以是历史观的基本问题，主要是因为：首先，社会存在和社会意识这对范畴，它们包括了人类社会的一切物质现象和精神现象。其次，社会存在和社会意识的关系问题，是划分历史唯物主义和历史唯心主义的根本标准。再次，社会存在和社会意识的关系问题，也是人们在实践中的重大问题。</li></ul><p>社会存在的三个方面：地理环境、人口因素和生产方式（起决定性作用）</p><p>地理环境的含义及其在社会发展中的作用和局限性：</p><ul><li><p>地理环境是指人类生存和发展所依赖的诸种自然条件的总和，它由大气圈、水圈、岩石圈构成，适合生物生存的范围叫生物圈。地理环境是人们的物质生活的必要条件之一，地理环境对人类生存的作用有两个方面：第一、地理环境是人类生存的场所。第二、地理环境为人类提供生活资料和生产建设的资源。</p></li><li><p>地理环境必然影响社会的发展。这种影响作用主要表现在两个方面：第一、地理环境通过对生产的影响，加速或延缓社会的发展。第二、地理环境还可以通过对军事、政治的影响，在一定程度上制约不同国家社会的发展。地理环境虽然对社会发展起制约和影响作用，但对社会发展不起主要的决定作用。</p></li></ul><p>人口因素的含义及其在社会发展中的作用和局限性：</p><ul><li><p>所谓人口因素，是一个包括人口数量、质量、密度、构成、人口的发展、人口分布和迁移、人口的自然变动和社会变动等各种因素的综合范畴。</p></li><li><p>人口因素对社会发展起着制约和影响作用。主要表现在以下两个方面：第一、一定数量的人口是社会物质生产的必要前提。第二、人口状况能加速或延缓社会的发展。</p></li><li><p>在社会发展的不同时期，人口状况对社会发展有不同的影响。只有与物质生产相适应的人口状况，才最有利于促进社会的发展。人口因素不是社会发展中起决定作用的因素，因为它不能决定社会制度的性质和社会制度的更替，而且它受到物质生产的制约。</p></li><li><p>人口问题是我国现代化建设中一个十分严重的问题，突出表现为人口数量多，老龄化趋势和出生婴儿男女比例失调。</p></li></ul><p>生产方式的定义及其在社会发展中的决定作用表现（四点）：</p><ul><li>生产方式是人类借以向自然界谋取必需的生活资料的方式，包括生产力和生产关系两个方面，是特定的生产力和生产关系的统一。生产方式在社会发展中起决定作用，主要表现在以下几个方面：<ul><li>第一、生产方式或生产活动是人类从动物界分离出来的根本动力和人类区别于动物的根本标志。</li><li>第二、生产方式或生产活动是人类和人类社会得以存在和发展的基础。</li><li>第三、生产活动是形成人类一切社会关系的基础。在生产关系的基础上，形成了整个人类社会。</li><li>第四、生产方式决定社会制度的性质和社会制度的更替</li></ul></li></ul><p>社会意识的含义：社会意识指社会的精神生活过程。</p><p>社会存在和社会意识的辩证关系</p><ul><li><p>所谓社会存在决定社会意识，是指社会意识是社会存在的反映，社会意识依赖于社会存在。主要表现在以下三个方面：</p><ul><li>第一、社会意识的内容来源于社会存在。</li><li>第二、社会意识随着社会存在的发展变化而发展变化。</li><li>第三、社会意识受反映者(意识主体)的立场、观点、方法的影响和制约，而反映者的立场、观点、方法是由人们在社会存在中的地位决定的。</li></ul></li><li><p>社会意识反作用于社会存在</p><ul><li>社会意识对社会存在的反作用，指社会意识这种精神力量，在一定条件下可以反作用于社会存在，转化为物质力量，影响社会发展的进程。社会意识对社会存在的反作用<strong>表现为两种情况</strong>：</li><li>先进的或正确的社会意识对社会存在的发展起积极的推动作用，促进社会向前发展；</li><li>落后的或错误的社会意识对社会存在的发展起消极的阻碍作用，延缓社会的发展进程。</li><li>社会意识对社会存在的反作用，必须通过人民群众的实践活动。</li></ul></li></ul><p>生产力</p><ul><li>科学技术是第一生产力</li></ul><p>生产力和生产关系的辨证关系的原理及其现实意义(或生产力和生产关系的矛盾运动或生关系必须适合生产力性质的规律)</p><ul><li><p>1、生产力决定生产关系,生产力的性质决定生关系的性质,生产力的发展变化决定生产关系的发展变化。</p></li><li><p>2、生产关系反作用于生产力,适合生产力性质发展要求的生产关系促进生产力的发展,不适合生产力性质和发展要求的生产关系,阻碍生产力的发展。</p></li><li><p>3、二者的相互作用构成二者的矛盾运动,是由基本适合到基本不适合再到新的基础上的基本适合,推动生产发展和新旧社会制度的更替。</p></li><li><p>4、生产力决定生产关系,生产关系反作用于生产力,生产力和生产关系的矛盾运动三项内容构成了生产关系必须适合生产力性质的规律。</p></li></ul><p>经济基础与上层建筑之间的辨证关系的原理及其现实意义。(或二者的相互作用或二者的矛盾运动或上层建筑的必须适合经济基础发展要求的规律)</p><ul><li><p>1、经济基础决定上层建筑,经济基础决定上层建筑的产生和性质,决定上层建筑的变化发展。</p></li><li><p>2、上层建筑反作用于经济基础为经济基础服务,其反作用的性质取决于经济基础的性质,当上层建筑为先进的经济基础服务时就推动社会进步,当它为落后的经济基础服务时就阻碍社会进步。</p></li><li><p>3、二者的相互作用,构成二者的矛盾运动是由基本适合再基本不适合再到新的基础上的基本适合从而推动社会发展。</p></li><li><p>4、经济基础决定上层建筑,上层建筑反作用于经济基础,经济基础和上层建筑的矛盾运动,构成上层建筑必须适合经济基础发展要求的规律。</p></li></ul><p>人民群众在历史发展中的决定作用</p><ul><li><p>1、它是社会物质财富的创造者; </p></li><li><p>2、它是社会精神财富的创造者,因为:</p><ul><li>①它为精神生产提供必要的物质基础;</li><li>②它的实践活动是一切精神财富的创造源泉;</li><li>③它还直接参加了精神财富的创造活动。</li></ul></li><li><p>3、它是实现社会变革的决定力量。</p></li></ul><p>群众路线，群众观点</p><ul><li><p>党的群众观点:1.人民群众自己解放自己,2.全心全意为人民服务,3.向人民群众负责,4.向人民群众学习。 </p></li><li><p>群众路线是党的根本工作路线,内容:一切为了群众,一切依靠群众,从群众中来,到群众中去</p></li></ul><h1 id="马克思主义政治经济学部分"><a href="#马克思主义政治经济学部分" class="headerlink" title="马克思主义政治经济学部分"></a>马克思主义政治经济学部分</h1><h2 id="劳动价值论"><a href="#劳动价值论" class="headerlink" title="劳动价值论"></a>劳动价值论</h2><p>商品货币理论</p><ul><li>商品是为市场交换而生产的有用产品。</li><li>货币是充当一般等价物的商品。</li></ul><p>劳动是什么</p><p>劳动二重性与商品二因素，他们的关系</p><p>劳动的二重性：具体劳动，抽象劳动</p><ul><li><p>生产一定使用价值具有特定性质、目的和形式的劳动，就是具体劳动。</p></li><li><p>撇开一切具体形式的、无差别的一般人类劳动，就是抽象劳动。</p></li></ul><p>商品的二因素：使用价值和价值</p><ul><li>使用价值是一种物品能够满足人们某种需要的自然属性，即物品的有用性。具有使用价值的物品并不一定就是商品。生产商品时价值凝结在商品中的无差别的一般人类劳动，价值反映商品生产者之间的关系，是商品的社会属性。使用价值是价值的物质承担者，而价值则寓于使用价值之中。价值是商品的最本质因素。</li></ul><p>商品二因素与劳动二重性的关系。</p><ul><li><p>商品的二因素是:价值、使用价值;劳动二重性:具体劳动、抽象劳动。</p></li><li><p>具体劳动创造出使用价值,不同的具体劳动创造出不同的使用价值。价值的创造是活劳动实现的,价值的唯一源泉是活劳动。</p></li></ul><p>货币是什么，本质是什么，货币职能</p><ul><li><p>货币的本质是固定充当一般等价物的商品，它体现着商品经济条件下商品生产者之间的社会经济关系。</p></li><li><p>货币有价值尺度（基本职能）、流通手段（基本职能）、贮藏手段、支付手段、世界货币五种职能，其中<strong>价值尺度和流通手段</strong>是货币最基本的职能。</p></li></ul><p>价值规律内容，作用，表现形式</p><p>价值规律的内容：</p><ul><li>价值规律的基本内容和要求是：商品的价值由生产商品的社会必要劳动时间所决定，商品交换以价值为基础。这就意味着价值规律的内容包括两个互相联系的方面：一是价值量的决定；二是实行等价交换。</li><li>什么是价值规律？价值规律就是商品按照由社会必要劳动时间决定的价值进行交换的规律。</li></ul><p>价值规律的表现形式：</p><ul><li>商品价格经常与价值不相一致，并不意味着违背了价值规律。商品价格的变动归根到底受价值所制约，价格是以价值为基础的，因此，价格供需关系影响围绕价值上下波动，不但没有违背价值规律，反而正是价值规律作用的表现形式。商品按照其价值进行交换，正是通过价格的波动而作为一种必然趋势得到实现的。</li></ul><p>价值规律的作用（三点）：</p><ul><li><p>价值规律在私有制商品经济中的作用，可以从两个方面来考察；一方面是价值规律自身的作用，另一方面是价值规律对社会经济的发展所起到的作用。</p></li><li><p>价值规律自身的作用，就是商品按照由社会必要劳动时间决定的价值进行交换的客观必然性的实现。而在商品经济条件下，忽视或否定价值规律的客观作用，就会阻碍商品经济的发展，导致社会经济发展的迟滞。</p></li><li><p>在以私有制为基础的商品经济中，价值规律对社会经济的发展有以下几方面作用：</p><ul><li>（1）价值规律自发地调节生产资料和劳动力在社会生产各部门之间分配的比例，即调节社会资源的配置； </li><li>（2）价值规律自发地促进社会生产力的发展；</li><li>（3）价值规律会引起和促进商品生产者的分化。 </li></ul></li></ul><p>私人劳动与社会劳动的矛盾是简单商品经济的基本矛盾</p><ul><li>：以生产资料私有制为基础的商品经济的基本矛盾,是私人劳动和社会劳动的矛盾。私人劳动与社会劳动的矛盾是以私有制为基础的商品经济的基本矛盾。私人劳动与社会劳动的矛盾,之所以是私有制为基础的商品经济的基本矛盾,是因为以私有制为基础的商品生产者的命运。</li></ul><p>劳动力成为商品是货币转化为资本的前提</p><ul><li>劳动力成为商品的两个条件：<ul><li>一是劳动者有人身自由。</li><li>二是劳动者丧失了一切生产资料和生活资料，必须靠出卖劳动力为生。劳动力作为商品同样具有价值和使用价值。</li></ul></li></ul><p>剩余价值两种生产方式方法：绝对剩余价值生产和相对剩余价值生产。</p><ul><li>在雇佣工人的必要劳动时间不变的条件下，由于工作日的绝对延长而生产的剩余价值，叫做绝对剩余价值。个别企业工人由于提高劳动强度而生产的剩余价值，也属于<strong>绝对剩余价值</strong>。</li><li>在工作日长度不变的条件下，由于缩短必要劳动时间，相应延长剩余劳动时间而生产的剩余价值，叫做<strong>相对剩余价值</strong>。</li></ul><p>划分不变资本和可变资本的意义</p><ul><li>不变资本(c)是指以生产资料形式存在的这部分资本,在生产过程中不发生价值量的变化,叫做不变资本(c)。</li><li>可变资本(v)是指以劳动力形式存在的资本,在生产过程中不仅再生产出劳动力的价值,并且生产出剩余价值。</li><li>意义：<ul><li>进一步揭露了剩余价值的源泉和资本主义的剥削实质。通过区分不变资本和可变资本,说明剩余价值不是由全部资本产生的,不是由不变资本产生的。而是同可变资本产生的,工人的剩余劳动是剩余价值的唯一源泉。</li><li>它为揭示资本家对工人的剥削程度提供了科学根据,正确地表明资本主义剥削程度的是剩余价值率。</li></ul></li></ul><h2 id="垄断"><a href="#垄断" class="headerlink" title="垄断"></a>垄断</h2><p>垄断条件下有没有竞争，<strong>有</strong></p><p>垄断条件下竞争的特点（和自由竞争阶段的不同）</p><ul><li><p>第一、竞争的目的不同，垄断时期竞争的目的是为了获取高额垄断利润。</p></li><li><p>第二、竞争的手段有了新的变化。</p></li><li><p>第三、竞争的激烈程度和后果不同，大大超过了自由竞争阶段。</p></li><li><p>第四、竞争的范围不同，垄断阶段的竞争不仅存在于国内，而且扩展到了国外，除了经济领域的竞争外，还在政治、军事、文化等领域展开激烈的竞争。</p></li></ul><p>垄断利润</p><ul><li>垄断利润即垄断资本凭借其在生产和流通中的垄断地位所获得的大大超过平均利润的高额利润。</li><li>归根结底来自工人阶级和劳动人民所创造的剩余价值。具体说来垄断利润来源有以下几个方面：<ul><li>第一、来自对本国无产阶级和其他劳动人民的剥削；</li><li>第二、由于垄断资本可以通过垄断高价和垄断低价来控制市场，使得它能获得一些其他企业，特别是非垄断企业的利润；</li><li>第三、通过加强对其他国家劳动人民的剥削和掠夺，获取的海外利润；</li><li>第四、通过资本主义国家政权进行有利于垄断资本的再分配，从而将劳动人民创造的国民收入的一部分变成垄断资本的收入。</li></ul></li></ul><p>垄断价格（垄断高价和垄断低价）</p><ul><li>垄断价格是垄断组织在销售或购买商品时，凭借其垄断地位规定的、旨在保证获取最大限度利润的市场价格。垄断价格大体可分为垄断高价和垄断低价两种。</li><li>垄断高价是指垄断资本在出售自己产品时规定的超过商品价值和生产价格的垄断价格；</li><li>垄断低价是指垄断资本在购买生产资料时规定的低于其价值和生产价格的垄断价格。</li></ul><p>国家垄断资本主义的实质，产生和发展</p><ul><li>国家垄断资本主义：国家政权与垄断资本主义相结合的资本主义 </li><li>国家垄断资本主义的实质:为了资本主义社会经济制度的存在和发展。</li><li>垄断资本主义发展二个阶段：私人垄断到国家垄断；时间上：以二战为界。</li><li>国家垄断主义的产生根源：生产力的发展，私人垄断不能适应社会化生产程度的进一步发展。</li></ul><p>资本输出</p><ul><li>是指垄断资本主义帝国为获得高额利润用过剩资本向其他国家投资或贷款,是资本主义由自由资本主义阶段发展到垄断阶段后对外经济侵略的主要方式。</li></ul><p>经济全球化</p><ul><li>经济全球化是指国际经济发展中的这样一种趋势,即在生产不断发展,科技加速进步,社会分工和国际分工不断深化,生产的社会化,国际化程度不断提高的情况下,世界各国各地区的经济活动越来越超出一国和地区的范围并相互紧密地联系在一起。</li></ul><h1 id="社会主义社会"><a href="#社会主义社会" class="headerlink" title="社会主义社会"></a>社会主义社会</h1><p>共产主义的基本特征</p><ul><li>一、社会生产力高度发展和物质财富极大丰富，充分满足每个人的需要。</li><li>二、实行社会公有制和按需分配 </li><li>三、经济的计划调节管理和商品经济的消失</li><li>四、阶级的消灭是国家自行消亡的前提条件 </li><li>五、精神境界极大提高</li><li>六、人的自由而全面发展 </li><li>七、全人类的彻底解放（世界性的）</li></ul><p>一些基本事件</p><p>社会主义从空想到科学的发展。</p><ul><li><p>最早的空想社会主义思想在 16-17 世纪资本主义原始积累和初期发展阶段即已出现。</p></li><li><p>早期空想社会主义的代表作是英国人莫尔的《乌托邦》和意大利人康帕内拉的《太阳城》</p></li><li><p>19 世纪初期欧州的三大空想社会主义者,有法国的圣西门、傅立叶和英国的欧文。</p></li><li><p>圣西门、傅立叶、欧文的空想社会主义思想,成为马克思主义科学社会主义的直接理论来源。</p></li><li><p>科学社会主义理论与辩证唯物主义和历史唯物主义、马克思主义政治经济学一起,构成马克思主义理论的三个组成部分,成为无产阶级、社会主义和共产主义事业的指导思想和理论武器。</p></li></ul><p>从 1917 年末的十月革命到 1924 年初列宁逝世仅有短短的六年多时间,这段时期在列宁领导下苏维埃俄国对社会主义道路的探索大体可分三个阶段,即进一步巩固苏维埃政权时期、战时共产主义时期、新经济政策时期。</p><p>斯大林对社会主义的探索：1924 年到 1936 年。1936 年 12 月苏联宣布建成社会主义：二种公有制的格局、计划经济的苏联模式以及政治思想文化等各项事业的发展。</p><h1 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h1><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="为什么说矛盾是事物发展的根本动力和源泉"><a href="#为什么说矛盾是事物发展的根本动力和源泉" class="headerlink" title="为什么说矛盾是事物发展的根本动力和源泉?"></a>为什么说矛盾是事物发展的根本动力和源泉?</h3><h3 id="为什么说对立统一规律是唯物辩证法的实质和核心？"><a href="#为什么说对立统一规律是唯物辩证法的实质和核心？" class="headerlink" title="为什么说对立统一规律是唯物辩证法的实质和核心？"></a>为什么说对立统一规律是唯物辩证法的实质和核心？</h3><h3 id="怎样理解生产力和生产关系、经济基础和上层建筑的辩证关系"><a href="#怎样理解生产力和生产关系、经济基础和上层建筑的辩证关系" class="headerlink" title="怎样理解生产力和生产关系、经济基础和上层建筑的辩证关系?"></a>怎样理解生产力和生产关系、经济基础和上层建筑的辩证关系?</h3><h3 id="为什么说实践是检验真理的唯一标准"><a href="#为什么说实践是检验真理的唯一标准" class="headerlink" title="为什么说实践是检验真理的唯一标准?"></a>为什么说实践是检验真理的唯一标准?</h3><h3 id="简述感性认识与理性认识的关系"><a href="#简述感性认识与理性认识的关系" class="headerlink" title="简述感性认识与理性认识的关系."></a>简述感性认识与理性认识的关系.</h3><h3 id="为什么说私人劳动和社会劳动的矛盾是商品经济的基本矛盾"><a href="#为什么说私人劳动和社会劳动的矛盾是商品经济的基本矛盾" class="headerlink" title="为什么说私人劳动和社会劳动的矛盾是商品经济的基本矛盾?"></a>为什么说私人劳动和社会劳动的矛盾是商品经济的基本矛盾?</h3><h3 id="什么是经济全球化？其内容和影响是什么"><a href="#什么是经济全球化？其内容和影响是什么" class="headerlink" title="什么是经济全球化？其内容和影响是什么?"></a>什么是经济全球化？其内容和影响是什么?</h3><h3 id="当代资本主义出现了哪些新变化-如何理解这些新变化"><a href="#当代资本主义出现了哪些新变化-如何理解这些新变化" class="headerlink" title="当代资本主义出现了哪些新变化?如何理解这些新变化?"></a>当代资本主义出现了哪些新变化?如何理解这些新变化?</h3><h2 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h2><h3 id="运用矛盾的普遍性和特殊性辩证关系的原理-说明建设中国特色社会主义道路的正确性。"><a href="#运用矛盾的普遍性和特殊性辩证关系的原理-说明建设中国特色社会主义道路的正确性。" class="headerlink" title="运用矛盾的普遍性和特殊性辩证关系的原理,说明建设中国特色社会主义道路的正确性。"></a>运用矛盾的普遍性和特殊性辩证关系的原理,说明建设中国特色社会主义道路的正确性。</h3><h3 id="如何理解人民群众是历史的创造者，并根据该原理结合实际谈谈你对“坚持以人民为中心”思想的理解。"><a href="#如何理解人民群众是历史的创造者，并根据该原理结合实际谈谈你对“坚持以人民为中心”思想的理解。" class="headerlink" title="如何理解人民群众是历史的创造者，并根据该原理结合实际谈谈你对“坚持以人民为中心”思想的理解。"></a>如何理解人民群众是历史的创造者，并根据该原理结合实际谈谈你对“坚持以人民为中心”思想的理解。</h3><h3 id="运用社会意识反作用于社会存在的原理，说明加强社会主义文化建设的重要性。"><a href="#运用社会意识反作用于社会存在的原理，说明加强社会主义文化建设的重要性。" class="headerlink" title="运用社会意识反作用于社会存在的原理，说明加强社会主义文化建设的重要性。"></a>运用社会意识反作用于社会存在的原理，说明加强社会主义文化建设的重要性。</h3><h3 id="怎样理解相对真理和绝对真理的辩证关系-运用这一原理，说明为什么对马克思主义既要坚持又要发展。"><a href="#怎样理解相对真理和绝对真理的辩证关系-运用这一原理，说明为什么对马克思主义既要坚持又要发展。" class="headerlink" title="怎样理解相对真理和绝对真理的辩证关系?运用这一原理，说明为什么对马克思主义既要坚持又要发展。"></a>怎样理解相对真理和绝对真理的辩证关系?运用这一原理，说明为什么对马克思主义既要坚持又要发展。</h3><h3 id="为什么说剩余价值规律是资本主义的基本经济规律"><a href="#为什么说剩余价值规律是资本主义的基本经济规律" class="headerlink" title="为什么说剩余价值规律是资本主义的基本经济规律?"></a>为什么说剩余价值规律是资本主义的基本经济规律?</h3><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="马原" scheme="http://www.blog.yln956.top/categories/%E9%A9%AC%E5%8E%9F/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PHP</title>
    <link href="http://www.blog.yln956.top/2021/04/19/PHP/"/>
    <id>http://www.blog.yln956.top/2021/04/19/PHP/</id>
    <published>2021-04-19T02:56:47.000Z</published>
    <updated>2021-09-03T05:57:04.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不会，看菜鸟教程吧</p><p><a href="https://www.runoob.com/php/php-tutorial.html">PHP教程</a></p><a id="more"></a><p>考试（选择10 * 3 判断10 * 2 简答3 * 10 编程 20）</p><p>大题重点：数据库（mysql或者PDO）与session</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h3 id="web工作原理"><a href="#web工作原理" class="headerlink" title="web工作原理"></a>web工作原理</h3><p><strong>通过网络运行</strong></p><p><strong>服务器，客户端模型B/S</strong></p><p><strong>URL如何对应服务器文件</strong></p><p><strong>PHP在哪里运行，结果是什么</strong></p><p>一般运行在服务器上</p><p>HTML,JS,CSS前端技术</p><p><strong>URL包含哪些部分远程调用，参数</strong></p><p>HTTP协议</p><h3 id="静态与动态页面"><a href="#静态与动态页面" class="headerlink" title="静态与动态页面"></a>静态与动态页面</h3><p>get post方法</p><p>get传参大小有限制，不可创建文件</p><p>post传参大小一般无限制，可以创建文件</p><p><strong>服务器端的区别</strong></p><h3 id="PHP服务器"><a href="#PHP服务器" class="headerlink" title="PHP服务器"></a>PHP服务器</h3><p>LAMP</p><p> <em>LAMP</em>(Linux + Apache + MySQL/MariaDB + PHP) </p><p>运行平台</p><p>如何安装与配置</p><p>phpinfo函数（重要！考试没法考）</p><h1 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h1><h3 id="html与php混合编程"><a href="#html与php混合编程" class="headerlink" title="html与php混合编程"></a>html与php混合编程</h3><p><strong>如何解析</strong>  </p><p>例如</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">一般来说，对于php，""里面的变量会输出其对应的值，''里面的原样输出<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'$a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$a</span></span>"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;input type="text" name="name">'</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;input type="text" name="fname">'</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分段</strong></p><p><strong>一段不完整语法（循环/判断）</strong></p><p>编程，循环输出表格</p><p>示例 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;table border=1 width=1200>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;tr>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>test&lt;/td>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>name&lt;/td>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>time&lt;/td>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;/tr>'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$temp</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//动态生成表格</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;tr>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>'</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/td>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>&lt;a href="3-3.php?uid='</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'"> '</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">' &lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;td>'</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;/td>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;/tr>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/04/19/PHP/image-20210525151652202.png" alt="image-20210525151652202" loading="lazy"></p><p><strong>include和include_once</strong></p><p>include可以多次包含</p><p>include_once只能包含一次</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">index.php包含两次<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span><span class="token comment">// 其他代码</span><span class="token comment">//</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>index.php只包含一次<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span><span class="token comment">// 其他代码</span><span class="token comment">//</span><span class="token keyword">include_once</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>boolean</p><p>integer</p><p>float</p><p>字符串：</p><p><strong>单引号双引号区别</strong></p><p><strong>字符串连接</strong></p><p>字符串操作</p><p>object</p><p>array</p><p>特殊类型</p><p>resource</p><p>null</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><strong>强制转换</strong></p><p><strong>隐含</strong></p><p><strong>字符串与数字类型</strong></p><p><strong>检测数据类型（39页）</strong></p><h3 id="常量（40）"><a href="#常量（40）" class="headerlink" title="常量（40）"></a>常量（40）</h3><p><strong>声明</strong></p><p><code>define</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 区分大小写的常量名</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GREETING"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"欢迎访问 Runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">GREETING</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 "欢迎访问 Runoob.com"</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> greeting<span class="token punctuation">;</span>   <span class="token comment">// 输出 "greeting"</span><span class="token delimiter important">?></span></span>    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 不区分大小写的常量名</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GREETING"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"欢迎访问 Runoob.com"</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> greeting<span class="token punctuation">;</span>  <span class="token comment">// 输出 "欢迎访问 Runoob.com"</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用</strong></p><p><strong>检测</strong></p><p><strong>预定义常量（41）</strong></p><p>了解即可</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="如何声明变量"><a href="#如何声明变量" class="headerlink" title="如何声明变量"></a>如何声明变量</h4><p><strong>变量声明无类型</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">php变量是弱类型的PHP 变量规则：- 变量以 $ 符号开始，后面跟着变量的名称- 变量名必须以字母或者下划线字符开始- 变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）- 变量名不能包含空格- 变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试未声明的变量</strong></p><p><code>isset()</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span> <span class="token comment">// 结果为 TRUE，所以后边的文本将被打印出来。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"变量已设置。"</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 在后边的例子中，我们将使用 var_dump 输出 isset() 的返回值。</span><span class="token comment">// the return value of isset().</span><span class="token comment">//unset() 释放变量</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"test"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"anothertest"</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// TRUE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TRUE</span> <span class="token keyword">unset</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// FALSE</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// FALSE</span> <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// FALSE</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用变量</strong></p><p>即用不同的名字访问同一个变量</p><p><code>$b =&amp;$a;</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token double-quoted-string string">"ABC"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//这里输出:ABC</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//这里输出:ABC</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token double-quoted-string string">"EFG"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//这里输出:EFG</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//这里输出:EFG</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token double-quoted-string string">"HHH"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//这里输出:HHH</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//这里输出:HHH</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//输出１</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这里$b传递给函数的其实是$b的变量内容所处的内存地址，通过在函数里改变$a的值　就可以改变$b的值了</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//输出101</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量作用域（44）"><a href="#变量作用域（44）" class="headerlink" title="变量作用域（44）"></a>变量作用域（44）</h4><p><strong>全局</strong></p><p>与JAVA差不多</p><p>外部定义的都是全局的，</p><p>函数内是局部的，只在函数内有效</p><p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 <strong>global</strong> 关键字</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">;</span>    <span class="token variable">$y</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态</p><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候希望某个局部变量不要被删除。</p><p>要做到这一点，需要在第一次声明变量时使用 <strong>static</strong> 关键字：</p><p>然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">;</span>    <span class="token variable">$val</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//output 1</span><span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//output 2</span><span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//output 3</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可变变量（46）"><a href="#可变变量（46）" class="headerlink" title="可变变量（46）"></a>可变变量（46）</h4><p>$$的意义</p><p>从右到左解析</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'hello'</span><span class="token punctuation">;</span><span class="token variable">$$a</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'world'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$a</span></span> $<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//输出hello world</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$a</span></span> <span class="token interpolation"><span class="token variable">$hello</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//输出hello world</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><p><strong>$_POST</strong></p><p><strong>$_GET</strong></p><p><strong>$_REQUEST</strong></p><p><strong>$_SESSION</strong></p><p><strong>$_COOKIE</strong></p><p><strong>$_FILE</strong></p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>大多与C差不多</p><p><strong>字符串</strong></p><p><code>.</code></p><p><img src="/2021/04/19/PHP/image-20210524131448654.png" alt="image-20210524131448654" loading="lazy"></p><p>对于 “+”</p><p>true=1</p><p>对于字符串运算，PHP会自动截取最前面的数字进行运算，若开头为字母，则把它当作0运算</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'12aa12'</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token single-quoted-string string">'a123aa12'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> @<span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token operator">+</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>逻辑===</strong></p><p><strong>== 与 ===的区别</strong></p><p>== 比较数值， ===既比较数值也比较类型</p><p><strong>！ ==</strong></p><p>===的反面，即类型不等或者数值不等</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1'</span><span class="token punctuation">;</span><span class="token comment">//$b = '1abc';</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token comment">//true</span><span class="token comment">//    if($a===$b)//false</span><span class="token comment">//    if($a!==$b)//true</span>    <span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所有类型的变量都可以参与逻辑运算</strong></p><p>对于空字符串和null，为false，其余为true</p><p>对于数值0，为false，其余为true</p><h3 id="函数定义与调用"><a href="#函数定义与调用" class="headerlink" title="函数定义与调用"></a>函数定义与调用</h3><p><strong>默认参数(可选参数)</strong></p><p>默认参数要放在非默认的右边，不然有可能出错</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//自定义一个函数person，用于打印一个人的属性</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token double-quoted-string string">"张三"</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token double-quoted-string string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"姓名：<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$name</span><span class="token punctuation">&#125;</span></span>, 年龄：<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$age</span><span class="token punctuation">&#125;</span></span>, 性别：<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$sex</span><span class="token punctuation">&#125;</span></span> &lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//全部使用默认参数</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第一个默认参数被覆盖，后面两个参数为默认</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"李四"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//前两个默认参数被覆盖，后面一个参数为默认</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"李四"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//三个默认参数都被覆盖</span><span class="token delimiter important">?></span></span>    输出姓名：张三, 年龄：20, 性别：男姓名：李四, 年龄：20, 性别：男姓名：李四, 年龄：22, 性别：男姓名：李四, 年龄：22, 性别：女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>传值/传引用</strong></p><p>有点类似C的指针？</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传值方式</span>    <span class="token variable">$a</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传引用方式</span>    <span class="token variable">$a</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出2122<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量函数（58）了解</strong></p><p>有点类似C的函数指针？</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$n</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$n</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token double-quoted-string string">"YLN"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"value"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"quote"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"go"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"xiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>    输出2333xiao    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><strong>注意foreach语法</strong></p><p>下面有写</p><p>注意rand函数（66）</p><p>与C不同，获得的是随机<strong>整数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>    输出1-3间的整数    1/2/3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>trim/ltrim/rtrim</p><p>trim() - 移除字符串两侧的空白字符或其他预定义字符。</p><p><img src="/2021/04/19/PHP/image-20210524165620442.png" alt="image-20210524165620442" loading="lazy"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token double-quoted-string string">" Hello World! "</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token double-quoted-string string">" HELD! "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token double-quoted-string string">" llold! "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出Hello World!ello WorldHello WorHello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上面的一样的</p><p>ltrim() - 移除字符串左侧的空白字符或其他预定义字符。</p><p>rtrim() - 移除字符串右侧的空白字符或其他预定义字符。</p><p>转义还原函数（85）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">addslashes()stripslashes()<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"PHP,'Hello World!'"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出PHP,'Hello World!'PHP,\'Hello World!\'PHP,'Hello World!'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>长度strlen</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"你好,PHP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出10（6+4）utf-8编码下每个中文字符所占字节为3中文字符串的处理可以使用 mb_strlen() 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>截取substr</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token double-quoted-string string">"hello,this is yln956.github.io"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token comment">//0开始截取</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token comment">//倒数第四个开始截取两个</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从2开始截取到倒数第五</span><span class="token delimiter important">?></span></span>输出hello,this is yln956.github.io,this is yln956.github.ioo,thisb.llo,this is yln956.gith<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找strstr</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">strstr() 函数搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE。该函数是区分大小写的。如需进行不区分大小写的搜索，请使用 stristr() 函数。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Hello world!"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"wor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 world!</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换str_replace</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">str_replace() 函数替换字符串中的一些字符（区分大小写）。该函数必须遵循下列规则：如果搜索的字符串是一个数组，那么它将返回一个数组。如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。注释：该函数是区分大小写的。请使用 str_ireplace() 函数执行不区分大小写的搜索。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"World"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Peter"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出Hello Peter!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分割/合成（98）</strong></p><p>explode() 函数</p><p>把字符串打散为数组：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token single-quoted-string string">'yln956.github.io'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出Array ( [0] => yln956.github.io )array (size=1)  0 => string 'yln956.github.io' (length=16)array (size=2)  0 => string 'yln956' (length=6)  1 => string 'github.io' (length=9)array (size=2)  0 => string 'yln956' (length=6)  1 => string 'github' (length=6)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>implode() 函数</p><p>把数组元素组合为一个字符串：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'yln956'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'github'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'io'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">" "</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"+"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"-"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出yln956.github.ioyln956 github ioyln956+github+ioyln956-github-io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组类型可以任意</p><p>数组基本操作</p><p><strong>长度</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">获取数组的长度 - count() 函数count() 函数用于返回数组的长度（元素的数量）：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Volvo"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"BMW"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Toyota"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>输出3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>foreach</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Peter"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"35"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Ben"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"37"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Joe"</span><span class="token operator">=</span><span class="token operator">></span><span class="token double-quoted-string string">"43"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$x_value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Key="</span> <span class="token punctuation">.</span> <span class="token variable">$x</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Value="</span> <span class="token punctuation">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/2021/04/19/PHP/image-20210523192453113.png" alt="image-20210523192453113" loading="lazy"></p><p>把数组当堆栈array_push($a,”3”,”4”)</p><p>删除重复等操作array_unique($a)</p><p><strong>下表和键值的区别，下标可以不连续</strong></p><h1 id="与WEB交互"><a href="#与WEB交互" class="headerlink" title="与WEB交互"></a>与WEB交互</h1><h3 id="表单的使用"><a href="#表单的使用" class="headerlink" title="表单的使用"></a>表单的使用</h3><p><strong>from基本参数</strong></p><p>基本表单元素</p><p><strong>表单中使用数组/多选</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token double-quoted-string string">"welcome.php"</span> method<span class="token operator">=</span><span class="token double-quoted-string string">"post"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>头像<span class="token punctuation">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"file"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"file"</span> id<span class="token operator">=</span><span class="token double-quoted-string string">"file"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>生日<span class="token punctuation">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"date"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"birthday"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>名字<span class="token punctuation">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"text"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"fname"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>密码<span class="token punctuation">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"password"</span>name<span class="token operator">=</span><span class="token double-quoted-string string">"password"</span> placeholder<span class="token operator">=</span><span class="token double-quoted-string string">"请输入密码"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>年龄<span class="token punctuation">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"text"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"age"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>select multiple<span class="token operator">=</span><span class="token double-quoted-string string">"multiple"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"q[]"</span><span class="token operator">></span><span class="token comment">//多选</span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">""</span><span class="token operator">></span>选择一个站点<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"RUNOOB"</span><span class="token operator">></span>Runoob<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"GOOGLE"</span><span class="token operator">></span>Google<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"TAOBAO"</span><span class="token operator">></span>Taobao<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token double-quoted-string string">"q"</span><span class="token operator">></span><span class="token comment">//单选</span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">""</span><span class="token operator">></span>选择一个站点<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"RUNOOB"</span><span class="token operator">></span>Runoob<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"GOOGLE"</span><span class="token operator">></span>Google<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"TAOBAO"</span><span class="token operator">></span>Taobao<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"submit"</span> value<span class="token operator">=</span><span class="token double-quoted-string string">"提交"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h3><p>POST是不可见的</p><p>GET在URL中，是可见的</p><h3 id="如何在服务器得到WEB传递的参数"><a href="#如何在服务器得到WEB传递的参数" class="headerlink" title="如何在服务器得到WEB传递的参数"></a>如何在服务器得到WEB传递的参数</h3><p>使用超级全局变量</p><ul><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_COOKIE</li><li>$_SESSION</li><li>等等</li></ul><p>$_GET[‘username’]</p><p>$_POST[‘username’]</p><h3 id="URL传递参数与POST的区别"><a href="#URL传递参数与POST的区别" class="headerlink" title="URL传递参数与POST的区别"></a>URL传递参数与POST的区别</h3><p>get大小有限制</p><p>post一般没限制</p><h3 id="文件上传-file含义了解"><a href="#文件上传-file含义了解" class="headerlink" title="文件上传(file含义了解)"></a>文件上传(file含义了解)</h3><h3 id="URL编码-解码"><a href="#URL编码-解码" class="headerlink" title="URL编码/解码"></a>URL编码/解码</h3><p>urlencode();编码<br>urldecode();解码</p><h1 id="与JS集成（了解）"><a href="#与JS集成（了解）" class="headerlink" title="与JS集成（了解）"></a>与JS集成（了解）</h1><h3 id="哪里运行"><a href="#哪里运行" class="headerlink" title="哪里运行"></a>哪里运行</h3><p>一般运行在浏览器中</p><h3 id="什么作用"><a href="#什么作用" class="headerlink" title="什么作用"></a>什么作用</h3><p>提供界面交互</p><h3 id="嵌入与外部引用"><a href="#嵌入与外部引用" class="headerlink" title="嵌入与外部引用"></a>嵌入与外部引用</h3><h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><h3 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h3><h3 id="timepestamp"><a href="#timepestamp" class="headerlink" title="timepestamp"></a>timepestamp</h3><h3 id="时间类型与时间函数"><a href="#时间类型与时间函数" class="headerlink" title="时间类型与时间函数"></a>时间类型与时间函数</h3><p><strong>time函数，返回时间戳</strong></p><p><strong>date函数，根据时间戳返回时间</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回时间戳</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$t</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Y-m-d-h:i:s"</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据时间戳返回时间</span><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Y-m-d-h:i:s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h1><h3 id="cookie原理（概念）"><a href="#cookie原理（概念）" class="headerlink" title="cookie原理（概念）"></a>cookie原理（概念）</h3><p><strong>服务器设置到浏览器setcookie</strong></p><p><strong>浏览器自动发送</strong></p><p><strong>作用域</strong></p><p><strong>过期时间</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">setcookie(name, value, expire, path, domain);<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$expire</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"yln"</span><span class="token punctuation">,</span> <span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>.....    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 设置 cookie 过期时间为过去 1 小时</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"user"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="session是什么"><a href="#session是什么" class="headerlink" title="session是什么"></a>session是什么</h3><p><strong>原理，利用cookie令牌</strong></p><p><strong>与cookie区别</strong></p><p><strong>保存在服务器</strong></p><p><strong>如何判断用户状态</strong></p><h3 id="如何操作session"><a href="#如何操作session" class="headerlink" title="如何操作session"></a>如何操作session</h3><p><strong>启动</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'getmysql.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vip<span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>写</strong></p><p><strong>读</strong></p><p><strong>清除一个值</strong></p><p><strong>销毁整个session</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'getmysql.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vip<span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//本页面不会销毁</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接销毁</span><span class="token comment">//</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><p>打开关闭文件</p><p><strong>读文件</strong></p><p><strong>redfile</strong></p><p><strong>file</strong></p><p><strong>file_get_contents</strong></p><p>1．从文件中读取数据<br>    从文件中读取数据，可以读取一个字符、一行字串或整个文件，还可以读取<br>任意长度的字串。<br>1）读取整个文件：readfile()、file()和file_get_contents()<br><strong>（1）readfile()函数</strong><br>       readfile()函数用于读入一个文件并将其写入到输出缓冲，如果出现错误则<br>返回false。函数语法如下：<br>int readfile(string filename)<br>      使用readfile()函数，不需要打开/关闭文件，不需要echo/print等输出语<br>句，直接写出文件路径即可。<br><strong>（2）file()函数</strong><br>        file()函数也可以读取整个文件的内容，只是file()函数将文件内容按行存<br>放到数组中，包括换行符在内。如果失败则返回false。函数语法如下：<br>array file(string filename)<br><strong>（3）file_get_contents()函数</strong><br>      该函数将文件内容（filename）读入失一个字符串。如果有offset和maxlen参数，将在<br>参数offset所指定的位置开始读取长度为maxlen的内容。如果败，返回false。函数语法<br>如下：<br>string file_get_contents(string filename[,int offset[,int maxlen]])<br>该函数适用于二进制对象，是将整个文件的内容读入到一个字符串中的首选方式。 </p><p>写文件fwrite</p><p><img src="/2021/04/19/PHP/image-20210525155645686.png" alt="image-20210525155645686" loading="lazy"></p><p><strong>文件和目录</strong></p><p><strong>scandir</strong></p><p>数组方式列出 images 目录中的文件和目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">p<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/images/"</span><span class="token punctuation">;</span><span class="token comment">// Sort in ascending order - this is default</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Sort in descending order，降序</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>is_dir</strong></p><p>is_dir() 函数检查指定的文件是否是一个目录。</p><p>如果目录存在，该函数返回 TRUE。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"images"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$file</span></span> is a directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$file</span></span> is not a directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何上传文件</strong></p><p>在表单需要二进制数据时，比如文件内容，请使用 “<strong>multipart/form-data</strong>“。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>//upload_file.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>            <span class="token comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"文件存储在: "</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>大多与JAVA一样</p><p><strong>定义类需要在一个PHP区块中</strong></p><p><strong>析构函数的特殊性</strong></p><p>常量</p><p>静态方法</p><p>静态函数</p><p><strong>$this和 ： :</strong></p><p><strong>parent/self/类名</strong></p><p>对象成员访问符号</p><p><strong>魔术方法</strong></p><p><strong>_get/ _set</strong></p><p><strong>_call</strong></p><p>三大特点：封装性，继承性，多态性</p><p>定义类需要在一个PHP区块中</p><p>析构函数的特殊性：（void __destruct(void)）</p><ul><li>PHP使用一种“垃圾回收”机制，自动清理不再使用的对象，析构函数会自动被调用，释放内存。</li><li>对象被销毁时被调用（和构造方法相反），作用释放内存。</li></ul><p>$this-&gt;和::</p><ul><li>$this-&gt;表示实例化后调用具体对象</li><li>::用来直接调用类中的属性或方法，没有实例化</li></ul><p>使用::的格式：关键字::变量名/常量名/方法名，这里的关键字：</p><ul><li>parent：可以调用父类中的成员变量、常量，成员方法</li><li>self：可以调用当前类中的静态成员和常量</li><li>类名：可以调用该类的变量、常量、方法</li></ul><p>对象成员访问符号</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">-&gt; 是对象成员访问符号 &#x2F;&#x2F;区分 &#x3D;&gt; 是数组成员访问符号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>魔术方法：*get/*set;_call</p><p>php面向对象中的public protected private 的含义，以及final关键字的含义</p><ul><li><p>public：公开的，可以在程序的任何位置（类内、类外）被其它类和对象调用</p></li><li><p>private：只能在所属类的内部被调用和修改，不可以在类外被访问</p></li><li><p>protected：可在本类和子类被调用，其它地方不可被调用</p></li><li><p>final：被final修饰的类不能被继承，修饰的方法不能重写也不能覆盖</p></li></ul><h1 id="PHP加密"><a href="#PHP加密" class="headerlink" title="PHP加密"></a>PHP加密</h1><p>crypt</p><p>md5</p><p>sha1</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="PHP操作数据库"><a href="#PHP操作数据库" class="headerlink" title="PHP操作数据库"></a>PHP操作数据库</h1><h3 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h3><p>安装</p><p>访问</p><p>WEB客户端</p><h2 id="传统方式操作数据库"><a href="#传统方式操作数据库" class="headerlink" title="传统方式操作数据库"></a>传统方式操作数据库</h2><p><strong>连接</strong></p><p><strong>执行SQL</strong></p><p><strong>结果集操作</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"ylndb"</span><span class="token punctuation">;</span><span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM user"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以用这个数组判断重复，这个是一维数组</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO user (tou, userid, username,password,name,sex,telephone,qq,email,birthday)        VALUES ('<span class="token interpolation"><span class="token variable">$tou</span></span>', '<span class="token interpolation"><span class="token variable">$userid</span></span>', '<span class="token interpolation"><span class="token variable">$username</span></span>','<span class="token interpolation"><span class="token variable">$password</span></span>','<span class="token interpolation"><span class="token variable">$name</span></span>','<span class="token interpolation"><span class="token variable">$sex</span></span>','<span class="token interpolation"><span class="token variable">$telephone</span></span>','<span class="token interpolation"><span class="token variable">$qq</span></span>','<span class="token interpolation"><span class="token variable">$email</span></span>','<span class="token interpolation"><span class="token variable">$birthday</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PDO方式操作数据库"><a href="#PDO方式操作数据库" class="headerlink" title="PDO方式操作数据库"></a>PDO方式操作数据库</h3><p><strong>PDO连接数据库以及DSN</strong></p><p><strong>执行SQL-&gt;参数绑定</strong></p><p><strong>结果集操作</strong></p><p>错误处理</p><p>事务处理</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$dbservername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$dbusername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpassword</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"ylndb"</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$dbservername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$dbusername</span><span class="token punctuation">,</span> <span class="token variable">$dbpassword</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置结果集为数组</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以用这个数组判断重复,这个是二维数组</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$dbservername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$dbusername</span><span class="token punctuation">,</span> <span class="token variable">$dbpassword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 PDO 错误模式，用于抛出异常</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO user (tou, userid, username,password,name,sex,telephone,qq,email,birthday)        VALUES ('<span class="token interpolation"><span class="token variable">$tou</span></span>', '<span class="token interpolation"><span class="token variable">$userid</span></span>', '<span class="token interpolation"><span class="token variable">$username</span></span>','<span class="token interpolation"><span class="token variable">$password</span></span>','<span class="token interpolation"><span class="token variable">$name</span></span>','<span class="token interpolation"><span class="token variable">$sex</span></span>','<span class="token interpolation"><span class="token variable">$telephone</span></span>','<span class="token interpolation"><span class="token variable">$qq</span></span>','<span class="token interpolation"><span class="token variable">$email</span></span>','<span class="token interpolation"><span class="token variable">$birthday</span></span>')"</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 exec() ，没有结果返回</span>    <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"注册成功"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br>"</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一小段代码"><a href="#一小段代码" class="headerlink" title="一小段代码"></a>一小段代码</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php">index.php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/from-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//二进制传输    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q[]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//多选        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择一个站点:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RUNOOB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Runoob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GOOGLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TAOBAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Taobao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//单选        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择一个站点:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RUNOOB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Runoob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GOOGLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TAOBAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Taobao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'islogin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location:info.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=ylndb"</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from user where userid='<span class="token interpolation"><span class="token variable">$user</span></span>' and password='<span class="token interpolation"><span class="token variable">$pass</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传文件</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'islogin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location:info.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location:index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>info.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dbservername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$dbusername</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpassword</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"123456"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"ylndb"</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=<span class="token interpolation"><span class="token variable">$dbservername</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$dbusername</span><span class="token punctuation">,</span> <span class="token variable">$dbpassword</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from user where userid='<span class="token interpolation"><span class="token variable">$user</span></span>' and password='<span class="token interpolation"><span class="token variable">$pass</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$stmt->execute();</span><span class="token comment">//    $stmt->setFetchMode(PDO::FETCH_ASSOC);</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;a href="out.php">out&lt;/a>'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>session.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启session</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'islogin'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location: index.php?2333'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>out.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location:index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">redfilefilefile_get_contents1．从文件中读取数据    从文件中读取数据，可以读取一个字符、一行字串或整个文件，还可以读取任意长度的字串。1）读取整个文件：readfile()、file()和file_get_contents()（1）readfile()函数       readfile()函数用于读入一个文件并将其写入到输出缓冲，如果出现错误则返回false。函数语法如下：int readfile(string filename)      使用readfile()函数，不需要打开&#x2F;关闭文件，不需要echo&#x2F;print等输出语句，直接写出文件路径即可。（2）file()函数        file()函数也可以读取整个文件的内容，只是file()函数将文件内容按行存放到数组中，包括换行符在内。如果失败则返回false。函数语法如下：array file(string filename)（3）file_get_contents()函数      该函数将文件内容（filename）读入失一个字符串。如果有offset和maxlen参数，将在参数offset所指定的位置开始读取长度为maxlen的内容。如果败，返回false。函数语法如下：string file_get_contents(string filename[,int offset[,int maxlen]])该函数适用于二进制对象，是将整个文件的内容读入到一个字符串中的首选方式。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id><a href="#" class="headerlink" title></a></h1><p><strong>scandir</strong></p><p>数组方式列出 images 目录中的文件和目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">p<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/images/"</span><span class="token punctuation">;</span><span class="token comment">// Sort in ascending order - this is default</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Sort in descending order，降序</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>is_dir</strong></p><p>is_dir() 函数检查指定的文件是否是一个目录。</p><p>如果目录存在，该函数返回 TRUE。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"images"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$file</span></span> is a directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$file</span></span> is not a directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三大特点：封装性，继承性，多态性</p><p>定义类需要在一个PHP区块中</p><p>析构函数的特殊性：（void __destruct(void)）</p><ul><li>PHP使用一种“垃圾回收”机制，自动清理不再使用的对象，析构函数会自动被调用，释放内存。</li><li>对象被销毁时被调用（和构造方法相反），作用释放内存。</li></ul><p>$this-&gt;和::</p><ul><li>$this-&gt;表示实例化后调用具体对象</li><li>::用来直接调用类中的属性或方法，没有实例化</li></ul><p>使用::的格式：关键字::变量名/常量名/方法名，这里的关键字：</p><ul><li>parent：可以调用父类中的成员变量、常量，成员方法</li><li>self：可以调用当前类中的静态成员和常量</li><li>类名：可以调用该类的变量、常量、方法</li></ul><p>对象成员访问符号</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">-&gt; 是对象成员访问符号 &#x2F;&#x2F;区分 &#x3D;&gt; 是数组成员访问符号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>魔术方法：*get/*set;_call</p><p>php面向对象中的public protected private 的含义，以及final关键字的含义</p><ul><li><p>public：公开的，可以在程序的任何位置（类内、类外）被其它类和对象调用</p></li><li><p>private：只能在所属类的内部被调用和修改，不可以在类外被访问</p></li><li><p>protected：可在本类和子类被调用，其它地方不可被调用</p></li><li><p>final：被final修饰的类不能被继承，修饰的方法不能重写也不能覆盖</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;不会，看菜鸟教程吧&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/php/php-tutorial.html&quot;&gt;PHP教程&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://www.blog.yln956.top/categories/PHP/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数电</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E6%95%B0%E7%94%B5/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E6%95%B0%E7%94%B5/</id>
    <published>2021-04-19T02:56:40.000Z</published>
    <updated>2021-09-03T05:56:58.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数电大题基本固定，弄会就没啥问题了</p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="一些应用"><a href="#一些应用" class="headerlink" title="一些应用"></a>一些应用</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605113057712.png" alt="image-20210605113057712" loading="lazy"></p><h2 id="模拟与数字"><a href="#模拟与数字" class="headerlink" title="模拟与数字"></a>模拟与数字</h2><ul><li><p>模拟信号：时间上和幅度上都<strong>连续</strong>变化的信号</p></li><li><p>数字信号：时间上和幅度上都<strong>断续</strong>变化的信号</p></li><li><p>数字逻辑电路研究的两大任务是:<strong>分析、设计</strong></p></li><li><p>根据一个电路有无记忆功能，数字逻辑电路可以分为<strong>组合逻辑电路</strong>和<strong>时序逻辑电路</strong>两种类型。</p></li></ul><h1 id="二、数制与码制"><a href="#二、数制与码制" class="headerlink" title="二、数制与码制"></a>二、数制与码制</h1><h2 id="进制转换（应该都会吧）"><a href="#进制转换（应该都会吧）" class="headerlink" title="进制转换（应该都会吧）"></a>进制转换（应该都会吧）</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605114143612.png" alt="image-20210605114143612" loading="lazy"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li>编码：按一定的方式将0、1数码进行编排来表示特定的含义,这种方式称为编码。</li><li>用4位_二进制数来表示1位十进制数的代码,称为BCD码。</li><li>格雷码，余三码都是无权码。</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605114436414.png" alt="image-20210605114436414" loading="lazy"></p><h3 id="二-十进制码"><a href="#二-十进制码" class="headerlink" title="二-十进制码"></a>二-十进制码</h3><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605114627618.png" alt="image-20210605114627618" loading="lazy"></p><h3 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h3><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605131631714.png" alt="image-20210605131631714" loading="lazy"></p><h3 id="格雷码"><a href="#格雷码" class="headerlink" title="格雷码"></a>格雷码</h3><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605131659789.png" alt="image-20210605131659789" loading="lazy"></p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p>原码：二进制数。符号部分用0表示“+”， 用1表示“-”</p><p>反码：正数与原码相同，负数就是各位取反（除符号位）。</p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210605133155190.png" alt="image-20210605133155190" loading="lazy"></p><p>补码：正数与原码相同，负数就是反码基础上末尾加1（符号位不变）。</p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210606002509311.png" alt="image-20210606002509311" loading="lazy"></p><h2 id="一些题目以及详解"><a href="#一些题目以及详解" class="headerlink" title="一些题目以及详解"></a>一些题目以及详解</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210608233949955.png" alt="image-20210608233949955" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210608234023034.png" alt="image-20210608234023034" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210608234044547.png" alt="image-20210608234044547" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210608234106581.png" alt="image-20210608234106581" loading="lazy"></p><h1 id="三、逻辑代数基础"><a href="#三、逻辑代数基础" class="headerlink" title="三、逻辑代数基础"></a>三、逻辑代数基础</h1><ul><li>同一逻辑问题分别用正负逻辑定义其输入与输出之间的逻辑代数式，则这两个逻辑代数式之间的关系为对偶。</li><li></li></ul><h2 id="逻辑符号对照（这个要看的懂会画）"><a href="#逻辑符号对照（这个要看的懂会画）" class="headerlink" title="逻辑符号对照（这个要看的懂会画）"></a>逻辑符号对照（这个要看的懂会画）</h2><p>与，或，非，异或。</p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607010305035.png" alt="image-20210607010305035" loading="lazy"></p><h2 id="逻辑代数的基本定律"><a href="#逻辑代数的基本定律" class="headerlink" title="逻辑代数的基本定律"></a>逻辑代数的基本定律</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607010734760.png" alt="image-20210607010734760" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607010748653.png" alt="image-20210607010748653" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607010851110.png" alt="image-20210607010851110" loading="lazy"></p><h2 id="逻辑函数的表示"><a href="#逻辑函数的表示" class="headerlink" title="逻辑函数的表示"></a>逻辑函数的表示</h2><ul><li>真值表</li><li>逻辑图</li><li>卡诺图</li><li>逻辑代数式</li></ul><p>最小项（与或式），最大项（或与式）</p><h3 id="重要规则"><a href="#重要规则" class="headerlink" title="重要规则"></a>重要规则</h3><p>代入规则</p><p>反演规则：运算顺序不变，+变*，变量取反</p><p>对偶规则：运算顺序不变，+变*</p><h2 id="逻辑函数的化简方法"><a href="#逻辑函数的化简方法" class="headerlink" title="逻辑函数的化简方法"></a>逻辑函数的化简方法</h2><h3 id="公式法化简"><a href="#公式法化简" class="headerlink" title="公式法化简"></a>公式法化简</h3><ul><li>并项法</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607012517276.png" alt="image-20210607012517276" loading="lazy"></p><ul><li>吸收法</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607012545593.png" alt="image-20210607012545593" loading="lazy"></p><ul><li>消去法</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607012610883.png" alt="image-20210607012610883" loading="lazy"></p><ul><li>配项法</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210607012622099.png" alt="image-20210607012622099" loading="lazy"></p><ul><li>以上方法综合运用</li></ul><h3 id="卡诺图化简"><a href="#卡诺图化简" class="headerlink" title="卡诺图化简"></a>卡诺图化简</h3><p>不再累述，注意几点。</p><ul><li>包围圈要越大越少。</li><li>包围圈圈的数目为（1，2，4，8……2^n）</li><li>同一列最上边和最下边循环相邻，可画圈；       </li><li>同一行最左边和最右边循环相邻，可画圈；</li><li>四个角上的 1 （或0）方格也循环相邻，可画圈。 </li><li>注意无关项。（和正常画法是一样的）</li><li>化简成最简与或式对”1“画包围圈。</li><li>化简成最简或与式对”0“画包围圈。</li></ul><h2 id="一些题目以及详解-1"><a href="#一些题目以及详解-1" class="headerlink" title="一些题目以及详解"></a>一些题目以及详解</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000208323.png" alt="image-20210609000208323" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000219999.png" alt="image-20210609000219999" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000250191.png" alt="image-20210609000250191" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000318137.png" alt="image-20210609000318137" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000331189.png" alt="image-20210609000331189" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000349331.png" alt="image-20210609000349331" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609000404083.png" alt="image-20210609000404083" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609005958127.png" alt="image-20210609005958127" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010007518.png" alt="image-20210609010007518" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010027691.png" alt="image-20210609010027691" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010038910.png" alt="image-20210609010038910" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010052606.png" alt="image-20210609010052606" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010108445.png" alt="image-20210609010108445" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010122974.png" alt="image-20210609010122974" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010130045.png" alt="image-20210609010130045" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010145593.png" alt="image-20210609010145593" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010216822.png" alt="image-20210609010216822" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010227985.png" alt="image-20210609010227985" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010247731.png" alt="image-20210609010247731" loading="lazy"></p><h1 id="四、VHDL"><a href="#四、VHDL" class="headerlink" title="四、VHDL"></a>四、VHDL</h1><ul><li>VHDL是超高速集成电路硬件描述语言</li><li>进程中的变量赋值语句,其变量赋值是立即完成的</li><li>变量赋值( :=)：立即赋值</li><li>信号赋值(&lt;=)：在进程的最后才对信号赋值</li><li>当在同一进程中，同一信号赋值目标有多个赋值源时，信号赋值目标获得的是最后一个赋值源的赋值</li><li>相对于传统的软件描述语言，并行语句结构是最具VHDL特色的</li><li>顺序语句：IF,CASE,LOOP,NEXT,EXIT,WAIT,RETURN,NULL</li><li>简单信号赋值语句、条件信号赋值语句和选择信号赋值语句。<br> 这三种信号赋值语句的共同点是：赋值目标必须都是信号。</li><li>VHDL的描述方式有行为描述、数据流描述和结构描述。</li><li>一个设计实体可以拥有一个或多个结构体。</li><li>VHDL语言结构由库，程序包，实体，结构体，配置5个部分组成</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210608003914653.png" alt="image-20210608003914653" loading="lazy"></p><h1 id="六、组合逻辑电路"><a href="#六、组合逻辑电路" class="headerlink" title="六、组合逻辑电路"></a>六、组合逻辑电路</h1><ul><li>半加器没有接收进位的输入端，全加器有进位输入端，它们两个都是有进位输出端的</li><li>与4位串行进位加法器比较,使用超前进位加法器的目的是提高运算速度</li><li>既考虑低位进位,又考虑向高位进位,应选用全加器。</li><li>二进制译码器是全译码器</li><li>二-十进制译码器输入信号和输出信号分别是<strong>4</strong>位和<strong>10</strong>位。</li><li>16选1数据选择器的地址端有4位。</li><li>当七段显示译码器的输出为<strong>高电平</strong>有效时,应选用共<strong>阴</strong>极数码管。</li><li>对于共<strong>阳</strong>接法的半导体数码显示器,应采用<strong>低电平</strong>驱动的七段显示译码器。</li><li>能将输入信号转变成二进制代码的电路称为编码器。</li><li>编码器在任何时刻只能对一个输入信号进行编码。</li><li>普通编码器在任何时刻只允许一个输入端请求编码，否则输出发生混乱。</li><li>优先编码器允许同时输入数个编码信号，并只对其中优先权最高的信号进行编码输出的电路。</li><li>多路数据选择器的输入信号可以是数字信号和模拟信号</li><li>16选1数据选择器的输入信号、地址码和输出信号分别是16位、4位和1位。</li><li>4路数据分配器输入信号、地址码和输出信号分别是1位、2位和4位。</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610085054069.png" alt="image-20210610085054069" loading="lazy"></p><h2 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610012739204.png" alt="image-20210610012739204" loading="lazy"></p><h2 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610012750990.png" alt="image-20210610012750990" loading="lazy"></p><h2 id="3-线-－-8-线译码器-CT74LS138"><a href="#3-线-－-8-线译码器-CT74LS138" class="headerlink" title="3 线 － 8 线译码器 CT74LS138"></a>3 线 － 8 线译码器 CT74LS138</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610012904211.png" alt="image-20210610012904211" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610012942711.png" alt="image-20210610012942711" loading="lazy"></p><h2 id="双-4-选-1-数据选择器-CC74HC153"><a href="#双-4-选-1-数据选择器-CC74HC153" class="headerlink" title="双 4 选 1 数据选择器 CC74HC153"></a>双 4 选 1 数据选择器 CC74HC153</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610085758987.png" alt="image-20210610085758987" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610085810283.png" alt="image-20210610085810283" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610085819674.png" alt="image-20210610085819674" loading="lazy"></p><h2 id="8-选-1-数据选择器-CT74LS151"><a href="#8-选-1-数据选择器-CT74LS151" class="headerlink" title="8 选 1 数据选择器 CT74LS151"></a>8 选 1 数据选择器 CT74LS151</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610090132171.png" alt="image-20210610090132171" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610090226919.png" alt="image-20210610090226919" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610090238572.png" alt="image-20210610090238572" loading="lazy"></p><h2 id="MSI的组合逻辑电路的分析与设计"><a href="#MSI的组合逻辑电路的分析与设计" class="headerlink" title="MSI的组合逻辑电路的分析与设计"></a>MSI的组合逻辑电路的分析与设计</h2><h2 id="竞争和冒险"><a href="#竞争和冒险" class="headerlink" title="竞争和冒险"></a>竞争和冒险</h2><ul><li>逻辑门因输入端的竞争而导致输出产生不应有的尖峰干扰脉冲的现象，称为冒险。</li><li>同一个门的一组输入信号，由于它们在此前通过不同数目的门，经过不同长度导线的传输，到达门输入端的时间会有先有后，这种现象称为竞争。</li></ul><p>消除冒险的方法:<br>1.加封锁脉冲<br>2.加选通脉冲<br>3.修改逻辑设计<br>4.接入滤波电容</p><h2 id="一些题目以及详解-2"><a href="#一些题目以及详解-2" class="headerlink" title="一些题目以及详解"></a>一些题目以及详解</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010327742.png" alt="image-20210609010327742" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010345454.png" alt="image-20210609010345454" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010355340.png" alt="image-20210609010355340" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010417569.png" alt="image-20210609010417569" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010426191.png" alt="image-20210609010426191" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010443574.png" alt="image-20210609010443574" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010453701.png" alt="image-20210609010453701" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010522661.png" alt="image-20210609010522661" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010532640.png" alt="image-20210609010532640" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010559567.png" alt="image-20210609010559567" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010610866.png" alt="image-20210609010610866" loading="lazy"></p><h1 id="七、集成触发器"><a href="#七、集成触发器" class="headerlink" title="七、集成触发器"></a>七、集成触发器</h1><ul><li><p>同步触发器的主要缺点是有空翻现象</p></li><li><p>触发器属于双稳态电路,存在两个稳定状态,从而可存储、记忆1位二进制数据。</p></li><li><p>触发器和门电路是构成数字电路的基本单元。</p></li><li><p>触发器有记忆功能，由它构成的电路在某时刻的输出不仅取决于该时刻的输入，还与电路原来状态有关。而门电路无记忆功能，由它构成的电路在某时刻的输出完全取决于该时刻的输入，与电路原来状态无关；</p></li></ul><h2 id="触发器的类型"><a href="#触发器的类型" class="headerlink" title="触发器的类型"></a>触发器的类型</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610092311171.png" alt="image-20210610092311171" loading="lazy"></p><h2 id="基本RS触发器"><a href="#基本RS触发器" class="headerlink" title="基本RS触发器"></a>基本RS触发器</h2><p>RS为00禁用，11保持，相异为R,01置0，10置1</p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610092808818.png" alt="image-20210610092808818" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610094000415.png" alt="image-20210610094000415" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610094153311.png" alt="image-20210610094153311" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610094400722.png" alt="image-20210610094400722" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610094413914.png" alt="image-20210610094413914" loading="lazy"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610095448717.png" alt="image-20210610095448717" loading="lazy"></p><h2 id="同步-RS-触发器"><a href="#同步-RS-触发器" class="headerlink" title="同步 RS 触发器"></a>同步 RS 触发器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610100442903.png" alt="image-20210610100442903" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610100502897.png" alt="image-20210610100502897" loading="lazy"></p><h2 id="同步-D-触发器"><a href="#同步-D-触发器" class="headerlink" title="同步 D 触发器"></a>同步 D 触发器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610102305346.png" alt="image-20210610102305346" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610103103775.png" alt="image-20210610103103775" loading="lazy"></p><h2 id="同步JK触发器"><a href="#同步JK触发器" class="headerlink" title="同步JK触发器"></a>同步JK触发器</h2><ul><li>K = 00 时保持； JK = 11 时翻转； J K相异 时 Qn+1 值与 J 相同。</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610103124958.png" alt="image-20210610103124958" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610103135349.png" alt="image-20210610103135349" loading="lazy"></p><h2 id="无空翻触发器"><a href="#无空翻触发器" class="headerlink" title="无空翻触发器"></a>无空翻触发器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610103828532.png" alt="image-20210610103828532" loading="lazy"></p><h3 id="主从与边沿触发器的异同点"><a href="#主从与边沿触发器的异同点" class="headerlink" title="主从与边沿触发器的异同点"></a>主从与边沿触发器的异同点</h3><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610104024669.png" alt="image-20210610104024669" loading="lazy"></p><h2 id="边沿JK触发器"><a href="#边沿JK触发器" class="headerlink" title="边沿JK触发器"></a>边沿JK触发器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610105136697.png" alt="image-20210610105136697" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610105150187.png" alt="image-20210610105150187" loading="lazy"></p><h2 id="边沿D触发器"><a href="#边沿D触发器" class="headerlink" title="边沿D触发器"></a>边沿D触发器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610105537422.png" alt="image-20210610105537422" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610110820675.png" alt="image-20210610110820675" loading="lazy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610120316073.png" alt="image-20210610120316073" loading="lazy"></p><h2 id="一些题目以及详解-3"><a href="#一些题目以及详解-3" class="headerlink" title="一些题目以及详解"></a>一些题目以及详解</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609005759873.png" alt="image-20210609005759873" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609005814797.png" alt="image-20210609005814797" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609005827835.png" alt="image-20210609005827835" loading="lazy"></p><h1 id="八、时序逻辑电路"><a href="#八、时序逻辑电路" class="headerlink" title="八、时序逻辑电路"></a>八、时序逻辑电路</h1><h2 id="同步时序电路的分析"><a href="#同步时序电路的分析" class="headerlink" title="同步时序电路的分析"></a>同步时序电路的分析</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610123149829.png" alt="image-20210610123149829" loading="lazy"></p><h2 id="集成双向移位寄存器-74LS194"><a href="#集成双向移位寄存器-74LS194" class="headerlink" title="集成双向移位寄存器 74LS194"></a>集成双向移位寄存器 74LS194</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610123247275.png" alt="image-20210610123247275" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610123259064.png" alt="image-20210610123259064" loading="lazy"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="环形计数器（顺序脉冲发生器）不能自启动"><a href="#环形计数器（顺序脉冲发生器）不能自启动" class="headerlink" title="环形计数器（顺序脉冲发生器）不能自启动"></a>环形计数器（顺序脉冲发生器）不能自启动</h4><p>顺序脉冲：只在每个循环周期内，在时间上按一定顺序排列的脉冲信号<br>产生顺序脉冲信号的电路称为顺序脉冲发生器<br>在数字系统中，常用来控制某些设备按照事先规定的顺序进行计算或操作<br>缺点：电路状态利用率不高</p><h4 id="扭环形计数器（约翰逊计数器）可以自启动"><a href="#扭环形计数器（约翰逊计数器）可以自启动" class="headerlink" title="扭环形计数器（约翰逊计数器）可以自启动"></a>扭环形计数器（约翰逊计数器）可以自启动</h4><p>将寄存器的输出以状态取反的方式反馈到移位输入端，即构成扭环形计数器</p><h2 id="同步计数器"><a href="#同步计数器" class="headerlink" title="同步计数器"></a>同步计数器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610123534820.png" alt="image-20210610123534820" loading="lazy"></p><h2 id="集成同步二进制计数器-74LS161-和-74LS163"><a href="#集成同步二进制计数器-74LS161-和-74LS163" class="headerlink" title="集成同步二进制计数器 74LS161 和 74LS163"></a>集成同步二进制计数器 74LS161 和 74LS163</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124458800.png" alt="image-20210610124458800" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124542516.png" alt="image-20210610124542516" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124835317.png" loading="lazy"></p><h2 id="集成同步二进制加-减计数器74LS191"><a href="#集成同步二进制加-减计数器74LS191" class="headerlink" title="集成同步二进制加/减计数器74LS191"></a>集成同步二进制加/减计数器74LS191</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124620313.png" alt="image-20210610124620313" loading="lazy"></p><h2 id="集成同步十进制加法计数器74LS160和74LS162"><a href="#集成同步十进制加法计数器74LS160和74LS162" class="headerlink" title="集成同步十进制加法计数器74LS160和74LS162"></a>集成同步十进制加法计数器74LS160和74LS162</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124655285.png" alt="image-20210610124655285" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124804453.png" alt="image-20210610124804453" loading="lazy"></p><h2 id="SSI-异步二进制计数器"><a href="#SSI-异步二进制计数器" class="headerlink" title="SSI 异步二进制计数器"></a>SSI 异步二进制计数器</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610124926602.png" alt="image-20210610124926602" loading="lazy"></p><h2 id="任意进制计数器的构成方法"><a href="#任意进制计数器的构成方法" class="headerlink" title="任意进制计数器的构成方法"></a>任意进制计数器的构成方法</h2><p>反馈清零</p><p>反馈置数</p><h2 id="一些题目以及详解-4"><a href="#一些题目以及详解-4" class="headerlink" title="一些题目以及详解"></a>一些题目以及详解</h2><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010636148.png" alt="image-20210609010636148" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010702018.png" alt="image-20210609010702018" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010720877.png" alt="image-20210609010720877" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010735691.png" alt="image-20210609010735691" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010745738.png" alt="image-20210609010745738" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010757248.png" alt="image-20210609010757248" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010809027.png" alt="image-20210609010809027" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010819469.png" alt="image-20210609010819469" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010836711.png" alt="image-20210609010836711" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609010845782.png" alt="image-20210609010845782" loading="lazy"></p><h1 id="十、半导体存储器"><a href="#十、半导体存储器" class="headerlink" title="十、半导体存储器"></a>十、半导体存储器</h1><ul><li>半导体存储器的作用：存放二值数据</li><li>按制造工艺分类：双极型，MOS型</li><li>按存取方式不同：半导体存储器可分成只读存储器ROM、随机存取存储器RAM和顺序存取存储器SAM。</li><li>可擦除可编程只读存储器EPROM,电可擦除的可编程存储器EEPROM。</li><li>PROM单次编程（熔丝）</li><li>半导体存储器容量表示：一般用“字数 x字长(即位数)”表示。</li></ul><p>例如，例如，一个 32 x 8 的 ROM，表示它有 32 个字，字长为 8 位，存储容量是 32 x 8 = 256。</p><p>1 M = 1024 K = 2^10 K = 2^20B</p><ul><li><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210609012207565.png" alt="image-20210609012207565" loading="lazy"></p></li></ul><h1 id="十二、可编程逻辑器件及其应用"><a href="#十二、可编程逻辑器件及其应用" class="headerlink" title="十二、可编程逻辑器件及其应用"></a>十二、可编程逻辑器件及其应用</h1><ul><li>可编程逻辑器件是指可以通过软件手段更改、配置器件内部连接结构和逻辑单元，完成既定设计功能的数字集成电路</li><li>FPGA数据掉电后丢失，CPLD掉电保持</li><li>CPLD:复杂可编程逻辑器件</li><li>基本逻辑单元是CPLD的主体</li><li>FPGA:现场可编程门阵列</li><li>FPGA的基本结构都是基于查找表加寄存器结构的</li><li>任何组合逻辑电路都可以用“与门-或门”二级电路实现</li><li>任何时序逻辑电路都可以由组合逻辑电路加上存储元件</li></ul><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610172907541.png" alt="image-20210610172907541" loading="lazy"></p><p><img src="/2021/04/19/%E6%95%B0%E7%94%B5/image-20210610172951896.png" alt="image-20210610172951896" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数电" scheme="http://www.blog.yln956.top/categories/%E6%95%B0%E7%94%B5/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>概率论</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/</id>
    <published>2021-04-19T02:56:31.000Z</published>
    <updated>2021-09-03T05:56:57.186Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不会，龙哥带带，5555（龙哥数电都复习完了，TTTTTQQQQQQLLLLL）</p><p><a href="https://blog.csdn.net/weixin_43914604/article/details/105655745">看这个吧，不想写了</a></p><a id="more"></a><h1 id="算是前置知识？"><a href="#算是前置知识？" class="headerlink" title="算是前置知识？"></a>算是前置知识？</h1><p>$C^m_n=\frac{n!}{m!(n-m)!}$</p><p>例如</p><p>$C^3_5=\frac{5!}{3!(5-3)!}=\frac{5\times4\times3\times2\times1}{3\times2\times1\times2\times1}=\frac{5\times4}{2\times1}=10$</p><p>$n!=n\times(n-1)\times…\times1$</p><p>$0!=0$</p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210606111231236.png" alt="image-20210606111231236" loading="lazy"></p><h2 id="随便写写，龙哥早复习完了，55555"><a href="#随便写写，龙哥早复习完了，55555" class="headerlink" title="随便写写，龙哥早复习完了，55555"></a>随便写写，龙哥早复习完了，55555</h2><h1 id="随机事件及其概率"><a href="#随机事件及其概率" class="headerlink" title="随机事件及其概率"></a>随机事件及其概率</h1><h3 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h3><p><strong>1.确定性现象</strong>:必然发生或必然不发生的现象。</p><p><strong>2.随机现象</strong>:在一定条件下我们事先无法准确预知其结果的现象，称为随机现</p><p>象. </p><p><strong>3.随机现象的特点</strong>：人们通过长期实践并深入研究之后，发现这类现象在大量</p><p>重复试验或观察下，它的结果却呈现出某种统计规律性.概率论与数理统计是研</p><p>究随机现象统计规律性的一门学科. </p><p><strong>4.随机试验</strong>： 为了对随机现象的统计规律性进行研究,就需要对随机现象进行</p><p>重复观察, 我们把对随机现象的观察称为随机试验, 并简称为试验，记为 E . </p><p>随机试验具有下列特点:</p><p><strong>（1）可重复性</strong>: 试验可以在相同的条件下重复进行; </p><p><strong>（2）可观察性</strong>: 试验结果可观察,所有可能的结果是明确的; </p><p><strong>（3）随机性(不确定性)</strong>: 每次试验出现的结果事先不能准确预知. ，但可以肯</p><p>定会出现所有可能结果中的一个. </p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530102404191.png" alt="image-20210530102404191" loading="lazy"></p><p><strong>（1）基本事件</strong> ：仅含一个样本点的随机事件称为基本事件. </p><p><strong>（2）必然事件</strong>：样本空间Ω 本身也是Ω 的子集，它包含Ω 的所有样本点， </p><p>在每次试验中Ω 必然发生，称为必然事件．即必然发生的事件. </p><p><strong>（3）不可能事件</strong>：．空集Φ 也是Ω 的子集，它不包含任何样本点，在每次 </p><p>试验中都不可能发生，称为不可能事件．不可能发生的事件是不包含任何样本 </p><p>点的. </p><p>A包含于B,$A \subset B$</p><p>B包含A ,$x \supset y$</p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530095235575.png" alt="image-20210530095235575" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530003147708.png" alt="image-20210530003147708" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530103815067.png" alt="image-20210530103815067" loading="lazy"></p><h3 id="古典概型（排列组合）"><a href="#古典概型（排列组合）" class="headerlink" title="古典概型（排列组合）"></a>古典概型（排列组合）</h3><p>我们称具有下列两个特征的随机试验模型为古典概型（等可能概型）．</p><p>（1）随机试验只有有限个可能的结果；</p><p>（2）每一个结果发生的可能性大小相同．</p><p><strong>计算古典概率的方法</strong></p><p>（1）基本计数原理：加法原理(几种方案)、乘法原理（分几步）</p><p>（2）排列组合方法：</p><p>排列公式：从 <em>n</em> 个不同元素中任取 <em>k</em> 个的不同排列总数为</p><p>$A^k_n=n\times(n-1)\times…\times(n-k+1)=\frac{n!}{(n-k)!}$</p><p>$A^n_n=n！$</p><p>$n！=0$</p><p>组合公式：从 <em>n</em> 个不同元素中任取 <em>k</em> 个的不同组合总数为</p><p>$C^k_n=\frac{A^k_n}{k!}=\frac{n!}{k!(n-k)!}$</p><p><strong>注意有放回和无放回</strong></p><h3 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h3><p><strong>定义</strong>:如果一个随机试验相当于从直线、平面或空间的某一区域Ω任取一点，而所取的点落在Ω中任意两个度量（长度、面积、体积）相等的子区域内的可能性是一样的，则称此试验模型为几何概型，对于任意有度量的子区域，<em>A</em> ⊂ Ω ，定义事件“任取一点落在区域 <em>A</em>内”发生的概率为$P(A)=\frac{A的几何度量}{Ω的几何度量}=\frac{L(A)}{L(Ω)}$（理解）</p><h3 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530114809525.png" alt="image-20210530114809525" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530114558734.png" alt="image-20210530114558734" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530114612246.png" alt="image-20210530114612246" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530120355917.png" alt="image-20210530120355917" loading="lazy"></p><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><p><strong>条件概率定义</strong>: 设 A ，B是两个事件，且 P (A)  &gt; 0 称 $\frac{P(AB)}{P(A)}$为在事件Ａ发生的条件下，事件Ｂ发生的条件概率，记为 $P(B|A)$，即 $P(B|A)=\frac{P(AB)}{P(A)}$,同样,可以在 P (B)  &gt; 0 的条件下，定义在事件Ｂ发生的条件下，事件Ａ发生的条件概率为 $P(A|B)=\frac{P(AB)}{P(B)}$.</p><p><strong>注：</strong>条件概率满足概率公理化定义中的三个基本性质</p><p><strong>2. 计算条件概率 P(B|A) 有两种方法：</strong></p><p>（1）在样本空间Ω中，先求 P (AB) P (A) ，再按定义计算 P(B|A)</p><p>（2）在缩减的样本空间$Ω_A$中求事件Ｂ的概率，可得到P(B|A)</p><h3 id="乘法公式"><a href="#乘法公式" class="headerlink" title="乘法公式"></a>乘法公式</h3><p><strong>1.定理(乘法公式)</strong></p><p>设P(A)&gt;0则有P(AB)= P(A)P(B|A)</p><p>设P(B)&gt;0则有P(AB)= P(B)P(A| B)</p><p><strong>2.三个事件的乘法公式:</strong></p><p>设A,B,C为三个事件，且P(AB)&gt;0，P(ABC)= P(A)P(B| A)P(C| AB)</p><p><strong>3.多个事件乘法公式的推广:</strong></p><p>设$A_1,A_2…A_n$,为n个事件，当$P(A_1A_2….A_n)&gt; 0$时，有$P(A_1A_2….A_n)= P(A_1)P(A_2 |A_1)P(A_3|A_1A_2 )….(A_n|A_1A_2…A_{n-1})$</p><h3 id="全概率公式与贝叶斯公式"><a href="#全概率公式与贝叶斯公式" class="headerlink" title="全概率公式与贝叶斯公式"></a>全概率公式与贝叶斯公式</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530151533373.png" alt="image-20210530151533373" loading="lazy"></p><h3 id="事件的独立性"><a href="#事件的独立性" class="headerlink" title="事件的独立性"></a>事件的独立性</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530151953245.png" alt="image-20210530151953245" loading="lazy"></p><h3 id="伯努利概型"><a href="#伯努利概型" class="headerlink" title="伯努利概型"></a>伯努利概型</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530163129277.png" alt="image-20210530163129277" loading="lazy"></p><h1 id="随机变量及其分布"><a href="#随机变量及其分布" class="headerlink" title="随机变量及其分布"></a>随机变量及其分布</h1><p><strong>定义：</strong>设随机试验的样本空间为Ω , 对每个<em>ω</em> ∈ Ω,都有一个实数 X ( ω) 与之对应,则称 X (<em>ω</em> ) 为随机变量.简记为 X . </p><h3 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h3><p>离散型随机变量定义：如果随机变量 X 的取值是有限个或可列无穷个，则称X 为离散型随机变量．</p><p>超几何分布</p><h3 id="连续型随机变量"><a href="#连续型随机变量" class="headerlink" title="连续型随机变量"></a>连续型随机变量</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530155432198.png" alt="image-20210530155432198" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530155533067.png" alt="image-20210530155533067" loading="lazy"></p><h3 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530155815257.png" alt="image-20210530155815257" loading="lazy"></p><h3 id="0-1分布"><a href="#0-1分布" class="headerlink" title="0-1分布"></a>0-1分布</h3><p>即二项分布的特例</p><p>如果随机变量X的分布律为P{x=0}=1-p，P{x=1}=p或$P{X=k}=p^k(1-p)^{n-k}$ (k=0,1,0&lt;p&lt;l)， 则称随机变量X服从参数为p的0-1 分布或两点分布，记作X~b(1， p)(其中0≤p≤1为参数)</p><h3 id="几何分布"><a href="#几何分布" class="headerlink" title="几何分布"></a>几何分布</h3><p>如果随机变量X的分布律为P{A}=p，第k次首次发生，前k次未发生，则$P{X=k}=(1-p)^{k-1}p$， 记作X~G(1， p)</p><h3 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530164508869.png" alt="image-20210530164508869" loading="lazy"></p><h3 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h3><p>有时候也写成X~P(λ)，</p><p>记住公式会查表即可。</p><p>二项分布可以泊松分布近似</p><p>n较大，p较小，np适中即可使用泊松分布近似，一般n&gt;=100,np&lt;=10使用</p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530164603557.png" alt="image-20210530164603557" loading="lazy"></p><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530164629737.png" alt="image-20210530164629737" loading="lazy"></p><h3 id="超几何分布"><a href="#超几何分布" class="headerlink" title="超几何分布"></a>超几何分布</h3><p>$P{X=k}=\frac{C_{N1}^kC_{N2}^k}{C_{N}^n}$</p><h3 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530172324962.png" alt="image-20210530172324962" loading="lazy"></p><h3 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530172341317.png" alt="image-20210530172341317" loading="lazy"></p><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><p><img src="/2021/04/19/%E6%A6%82%E7%8E%87%E8%AE%BA/image-20210530172410897.png" alt="image-20210530172410897" loading="lazy"></p><h3 id="二维随机变量"><a href="#二维随机变量" class="headerlink" title="二维随机变量"></a>二维随机变量</h3><p>自己看书，离散型和连续型的。</p><p>连续型的公式要记一下</p><h3 id="边缘分布"><a href="#边缘分布" class="headerlink" title="边缘分布"></a>边缘分布</h3><h3 id="条件分布"><a href="#条件分布" class="headerlink" title="条件分布"></a>条件分布</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;不会，龙哥带带，5555（龙哥数电都复习完了，TTTTTQQQQQQLLLLL）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43914604/article/details/105655745&quot;&gt;看这个吧，不想写了&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="概率论" scheme="http://www.blog.yln956.top/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>密码学</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/</id>
    <published>2021-04-19T02:56:23.000Z</published>
    <updated>2021-09-03T05:57:00.710Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 单项选择题（30分，2分/每题，15题），<br>判断题（10分，1分/每题  10题）<br>填空题（10分，1分/每空）<br>简答和计算（30分，6分/每题，5题）<br>综合计算题（20分，10分/每题， 2题）</p><h1 id="压题压题"><a href="#压题压题" class="headerlink" title="压题压题"></a>压题压题</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>一般就是概念</p><p>比如信息安全的几个特点</p><p>密码体制的攻击方式</p><p>那个五元组，明文，密文，密钥，加密算法，解密算法</p><p>主动攻击，被动攻击</p><p>密码学分类</p><h2 id="下面说的是大题"><a href="#下面说的是大题" class="headerlink" title="下面说的是大题"></a>下面说的是大题</h2><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><p>肯定是考仿射密码，Vigenere（维吉尼亚）密码中的一个，其他比较简单</p><h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><p>这重点肯定是DES,AES以及分组密码的工作模式(CFB,OFB,CBC概率较大，剩下的ECB和CTR比较简单)</p><p>DES主要就是F函数的过程，其中的E盒拓展很重要，如果这里有代码，注意函数名称</p><p>AES主要就是S盒，以及密钥拓展</p><p>分组密码的工作模式以CFB,OFB,CBC为主，比如他们差错传播是怎么样的</p><h2 id="序列密码"><a href="#序列密码" class="headerlink" title="序列密码"></a>序列密码</h2><p>线性反馈移位寄存器LFSR</p><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>SHA-1的拓展过程</p><h1 id="数字签名，身份认证，密钥管理"><a href="#数字签名，身份认证，密钥管理" class="headerlink" title="数字签名，身份认证，密钥管理"></a>数字签名，身份认证，密钥管理</h1><p>基于RSA的加解密，数字签名</p><h1 id="绪论-1"><a href="#绪论-1" class="headerlink" title="绪论"></a>绪论</h1><h2 id="密码体制的构成"><a href="#密码体制的构成" class="headerlink" title="密码体制的构成"></a>密码体制的构成</h2><p><strong>明文，密文，密钥，加密算法，解密算法</strong></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614014623478.png" alt="image-20210614014623478" loading="lazy"></p><h2 id="密码体制攻击方法"><a href="#密码体制攻击方法" class="headerlink" title="密码体制攻击方法"></a>密码体制攻击方法</h2><ul><li> 惟密文攻击：密码分析者仅知道两样东西：待破译的一些密文和加密算法，并试图恢复尽可能多的明文，并进一步推导出密钥。</li><li>已知明文攻击：密码分析者不仅知道一些待破译的密文和加密算法，而且还知道与之对应的明文，根据明文和密文对试图破解待破译的密文或推导出密钥。</li><li> 选择明文攻击：密码分析者知道一些待破译的密文和加密算法，还可以选择一些明文，并得到相应的密文，试图破解待破译的密文或推导出密钥。</li><li>④ 选择密文攻击（Chosen-ciphertext attack）<br>⑤ 选择文本攻击（Chosen-text attack）</li><li>一个密码体制是安全的，通常是指在前三种攻击下是安全的。第④ ⑤ 不要求掌握。</li></ul><h1 id="古典密码体制"><a href="#古典密码体制" class="headerlink" title="古典密码体制"></a>古典密码体制</h1><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614102822642.png" alt="image-20210614102822642" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614102835000.png" alt="image-20210614102835000" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614102843316.png" alt="image-20210614102843316" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614102902091.png" alt="image-20210614102902091" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614102909985.png" alt="image-20210614102909985" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614103411103.png" alt="image-20210614103411103" loading="lazy"></p><h2 id="Vigenere（维吉尼亚）密码"><a href="#Vigenere（维吉尼亚）密码" class="headerlink" title="Vigenere（维吉尼亚）密码"></a>Vigenere（维吉尼亚）密码</h2><ul><li>使用密钥为vector，用数值表示则k=(21, 4, 2, 19, 14, 17)，来加密明文：here is how it works。</li><li>加密过程如下描述：用密钥k来加密明文消息，则第一个明文字符用其后面的第21个字符来代替(即向后移21位)，相应的，第二个明文字符则向后移4位，第三个字符向后移2位，以此类推。当用完密钥k的最后一位时，又从密钥的第一位开始，如此循环下去。因此，第7个明文字符被向后移21位，第8个明文字符向后移4位，等等。</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614104147010.png" alt="image-20210614104147010" loading="lazy"></li><li></li></ul><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="DES算法"><a href="#DES算法" class="headerlink" title="DES算法"></a>DES算法</h2><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><ul><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614110944216.png" alt="image-20210614110944216" loading="lazy"></li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616221937861.png" alt="image-20210616221937861" loading="lazy"></li></ul><h3 id="首先是初始置换"><a href="#首先是初始置换" class="headerlink" title="首先是初始置换"></a>首先是初始置换</h3><p>很简单，按表来</p><p>比如图上就是第20个数字放在2行6列</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616222059724.png" alt="image-20210616222059724" loading="lazy"></p><h3 id="然后是轮结构（里面的F函数重要，比如E盒拓展）"><a href="#然后是轮结构（里面的F函数重要，比如E盒拓展）" class="headerlink" title="然后是轮结构（里面的F函数重要，比如E盒拓展）"></a>然后是轮结构（里面的F函数重要，比如E盒拓展）</h3><p>分成两部分右边变成左边，然后右边的再进行E盒拓展，然后和轮密钥（子密钥生成）异或，再S盒压缩，再经过置换并与左边的部分异或作为右边的</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616222516158.png" alt="image-20210616222516158" loading="lazy"></p><h4 id="E盒拓展"><a href="#E盒拓展" class="headerlink" title="E盒拓展"></a>E盒拓展</h4><p>就是按照4行8列写出来第一行第一列是第32个数，第一行第二列是第4个数，固定的，和查表差不多道理</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616223922757.png" alt="image-20210616223922757" loading="lazy"></p><h4 id="然后与子密钥异或，这没啥说的"><a href="#然后与子密钥异或，这没啥说的" class="headerlink" title="然后与子密钥异或，这没啥说的"></a>然后与子密钥异或，这没啥说的</h4><h4 id="S盒代替压缩"><a href="#S盒代替压缩" class="headerlink" title="S盒代替压缩"></a>S盒代替压缩</h4><p>类似查表，分成6bit*8,6个bit的第一个和第六个作为行号，其余作为列号</p><p>下面拿S1盒举例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616224327788.png" alt="image-20210616224327788" loading="lazy"></p><p>举例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616231520210.png" alt="image-20210616231520210" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616231830877.png" alt="image-20210616231830877" loading="lazy"></p><h4 id="置换P"><a href="#置换P" class="headerlink" title="置换P"></a>置换P</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616231937899.png" alt="image-20210616231937899" loading="lazy"></p><h4 id="然后就是与左边的32bits异或"><a href="#然后就是与左边的32bits异或" class="headerlink" title="然后就是与左边的32bits异或"></a>然后就是与左边的32bits异或</h4><h3 id="最后是逆置换"><a href="#最后是逆置换" class="headerlink" title="最后是逆置换"></a>最后是逆置换</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616223457086.png" alt="image-20210616223457086" loading="lazy"></p><h3 id="DES密钥编排（子密钥生成）"><a href="#DES密钥编排（子密钥生成）" class="headerlink" title="DES密钥编排（子密钥生成）"></a>DES密钥编排（子密钥生成）</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616232129159.png" alt="image-20210616232129159" loading="lazy"></p><h4 id="置换选择PC-1"><a href="#置换选择PC-1" class="headerlink" title="置换选择PC-1"></a>置换选择PC-1</h4><p>就是查表</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616235745220.png" alt="image-20210616235745220" loading="lazy"></p><h4 id="左循环移位"><a href="#左循环移位" class="headerlink" title="左循环移位"></a>左循环移位</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210616235817226.png" alt="image-20210616235817226" loading="lazy"></p><h4 id="置换选择PC-2"><a href="#置换选择PC-2" class="headerlink" title="置换选择PC-2"></a>置换选择PC-2</h4><p>也是查表</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617000105642.png" alt="image-20210617000105642" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617000233756.png" alt="image-20210617000233756" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617001055526.png" alt="image-20210617001055526" loading="lazy"></p><h3 id="DES解密变换"><a href="#DES解密变换" class="headerlink" title="DES解密变换"></a>DES解密变换</h3><p>DES的加密和解密，从流程图上和代码上几乎完全一致。只不过加密输入的是明文和密钥，解密输入的是密文和密钥。<br>细节的差别在于，加密时使用的轮子密钥是K1, K2, K3, ……,K16，而解密时使用的轮子密钥是K16, K15, K14, ……,K1.<br>换句话说，DES的16轮解密是其加密的每一轮的逆过程。</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617001730926.png" alt="image-20210617001730926" loading="lazy"></p><h3 id="DES的一些变形"><a href="#DES的一些变形" class="headerlink" title="DES的一些变形"></a>DES的一些变形</h3><p>这些变形都不难，看一下就记得了，比如EDE3就是3倍密钥分成E,D,E，就是分别先用加密算法，再用解密算法，然后再用加密算法。EDE2就是2倍密钥</p><h4 id="DES的变形算法-2DES"><a href="#DES的变形算法-2DES" class="headerlink" title="DES的变形算法-2DES"></a>DES的变形算法-2DES</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617001954966.png" alt="image-20210617001954966" loading="lazy"></p><h4 id="三重DES-EEE3"><a href="#三重DES-EEE3" class="headerlink" title="三重DES -EEE3"></a>三重DES -EEE3</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617002014849.png" alt="image-20210617002014849" loading="lazy"></p><h4 id="DES-EDE3"><a href="#DES-EDE3" class="headerlink" title="DES-EDE3"></a>DES-EDE3</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617002045827.png" alt="image-20210617002045827" loading="lazy"></p><h4 id="DES-EEE2"><a href="#DES-EEE2" class="headerlink" title="DES-EEE2"></a>DES-EEE2</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617002121750.png" alt="image-20210617002121750" loading="lazy"></p><h4 id="DES-EDE2"><a href="#DES-EDE2" class="headerlink" title="DES-EDE2"></a>DES-EDE2</h4><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617002153028.png" alt="image-20210617002153028" loading="lazy"></p><h2 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h2><h3 id="总体结构-1"><a href="#总体结构-1" class="headerlink" title="总体结构"></a>总体结构</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617002522231.png" alt="image-20210617002522231" loading="lazy"></p><h3 id="初始状态矩阵"><a href="#初始状态矩阵" class="headerlink" title="初始状态矩阵"></a>初始状态矩阵</h3><p>明文初始矩阵</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003309600.png" alt="image-20210617003309600" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003330654.png" alt="image-20210617003330654" loading="lazy"></p><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>就是简单的异或，对应异或就行了</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003443766.png" alt="image-20210617003443766" loading="lazy"></p><h3 id="字节代替（SubBytes）"><a href="#字节代替（SubBytes）" class="headerlink" title="字节代替（SubBytes）"></a>字节代替（SubBytes）</h3><p>就是查表</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003509718.png" alt="image-20210617003509718" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003548008.png" alt="image-20210617003548008" loading="lazy"></p><p>举例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003602536.png" alt="image-20210617003602536" loading="lazy"></p><h3 id="行移位（ShiftRows）"><a href="#行移位（ShiftRows）" class="headerlink" title="行移位（ShiftRows）"></a>行移位（ShiftRows）</h3><p>就按照给的规则移动，第一行不移，第二行左移一位。。。。。</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003731015.png" alt="image-20210617003731015" loading="lazy"></p><p>举例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617003740519.png" alt="image-20210617003740519" loading="lazy"></p><h3 id="列混合（MixColumns）这个比较难，要理解域上的运算"><a href="#列混合（MixColumns）这个比较难，要理解域上的运算" class="headerlink" title="列混合（MixColumns）这个比较难，要理解域上的运算"></a>列混合（MixColumns）这个比较难，要理解域上的运算</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617010832097.png" alt="image-20210617010832097" loading="lazy"></p><p>举例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617011008326.png" alt="image-20210617011008326" loading="lazy"></p><h3 id="域内运算"><a href="#域内运算" class="headerlink" title="域内运算"></a>域内运算</h3><p>认真看，其实就是正常运算然后使用模2除法。</p><p>在计算列混合时，一般不使用域内乘法计算，因为容易出错</p><p>一般使用X乘（就是乘上02）计算，看原理和例子就懂了</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013356319.png" alt="image-20210617013356319" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013444105.png" alt="image-20210617013444105" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013451390.png" alt="image-20210617013451390" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013458562.png" alt="image-20210617013458562" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013513770.png" alt="image-20210617013513770" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617013524934.png" alt="image-20210617013524934" loading="lazy"></p><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012337207.png" alt="image-20210617012337207" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012345767.png" alt="image-20210617012345767" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012353047.png" alt="image-20210617012353047" loading="lazy"></p><p>示例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012413435.png" alt="image-20210617012413435" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012424693.png" alt="image-20210617012424693" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012721396.png" alt="image-20210617012721396" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617012812284.png" alt="image-20210617012812284" loading="lazy"></p><h2 id="分组密码五种工作模式"><a href="#分组密码五种工作模式" class="headerlink" title="分组密码五种工作模式"></a>分组密码五种工作模式</h2><h3 id="电码本ECB模式"><a href="#电码本ECB模式" class="headerlink" title="电码本ECB模式"></a>电码本ECB模式</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617093641451.png" alt="image-20210617093641451" loading="lazy"></p><h3 id="CBC密码分组链接模式"><a href="#CBC密码分组链接模式" class="headerlink" title="CBC密码分组链接模式"></a>CBC密码分组链接模式</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617093713652.png" alt="image-20210617093713652" loading="lazy"></p><p>错误传播</p><ul><li>明文有一组中有错，会使以后的密文组都受影响，但经解密后的恢复结果，除原有误的一组外，其后各组明文都正确地恢复。</li><li>2.若在传送过程中，某组密文组出错时，则该组恢复的明文和下一组恢复数据出错。再后面的组将不会受中错误比特的影响。</li><li>3.在CBC模式中，密文分组若某些比特缺失（例如某些比特位没有收到等），那么即使密文分组中1 bit的缺失，也会导致后续密文分组都受缺失影响，从而此自缺失比特密文分组开始，后续密文分组全部受缺失影响，无法正常解密。</li></ul><h3 id="CFB-密码反馈模式"><a href="#CFB-密码反馈模式" class="headerlink" title="CFB-密码反馈模式"></a>CFB-密码反馈模式</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617093926827.png" alt="image-20210617093926827" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617093943671.png" alt="image-20210617093943671" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617094023283.png" alt="image-20210617094023283" loading="lazy"></p><p>错误传播</p><p>明文某一组中有错，会使以后的密文组都受影响，但经解密后的恢复结果，除原有误的一组外，其后各组明文都正确地恢复。<br>2、密文里的一位错误会引起明文的一个单独错误，此处，错误进入移位寄存器，导致密文成为无用信息，直到该错误从移位寄存器中移出。<br>例：对于8位（1个字节）的加密，则会产生9字节的错误</p><h3 id="输出反馈OFB模式"><a href="#输出反馈OFB模式" class="headerlink" title="输出反馈OFB模式"></a>输出反馈OFB模式</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617094118774.png" alt="image-20210617094118774" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617094134862.png" alt="image-20210617094134862" loading="lazy"></p><p>与CFB、CBC相同，输入相同明文，改变IV会导致相同的明文输入得到不同的密文输出。<br>OFB模式的传输过程中的比特错误不会被传播例如C_i中出现一个或多个比特错误，在解密结果中只有P_i受到影响，以后各明文分组则不受影响。<br>但与CFB模式相比，更易受到对消息流的篡改攻击</p><h3 id="计数器模式-CTR"><a href="#计数器模式-CTR" class="headerlink" title="计数器模式 (CTR)"></a>计数器模式 (CTR)</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617094219744.png" alt="image-20210617094219744" loading="lazy"></p><h1 id="序列密码-1"><a href="#序列密码-1" class="headerlink" title="序列密码"></a>序列密码</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095100997.png" alt="image-20210617095100997" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095111599.png" alt="image-20210617095111599" loading="lazy"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>实际的序列密码算法安全性依赖于密钥生成器所产生的密钥流的性质。如果密钥流是无周期的（真正随机的）无限长随机序列，那么此时的序列密码即为“一次一密”的密码体制。</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095130110.png" alt="image-20210617095130110" loading="lazy"></p><h2 id="序列密码分类"><a href="#序列密码分类" class="headerlink" title="序列密码分类"></a>序列密码分类</h2><p>在序列密码中，根据状态函数是否独立于明文或密文，可以将序列密码分为同步序列密码和自同步序列密码两类。</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095257668.png" alt="image-20210617095257668" loading="lazy"></p><h4 id="同步序列密码"><a href="#同步序列密码" class="headerlink" title="同步序列密码"></a>同步序列密码</h4><p>在同步序列密码中，密钥流独立于消息流产生</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095305556.png" alt="image-20210617095305556" loading="lazy"></p><h4 id="自同步序列密码"><a href="#自同步序列密码" class="headerlink" title="自同步序列密码"></a>自同步序列密码</h4><p>自同步序列密码也称为异步流密码，其密钥流的产生不是独立于明文流和密文流的，与种子密钥和其前面已产生若干密文字有关。</p><h2 id="基于移位寄存器的序列密码算法"><a href="#基于移位寄存器的序列密码算法" class="headerlink" title="基于移位寄存器的序列密码算法"></a>基于移位寄存器的序列密码算法</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095423018.png" alt="image-20210617095423018" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095442723.png" alt="image-20210617095442723" loading="lazy"></p><p>就是全0用不了</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617095547332.png" alt="image-20210617095547332" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617100357233.png" alt="image-20210617100357233" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617100409072.png" alt="image-20210617100409072" loading="lazy"></p><p>举例</p><p>其实这个比较简单</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617100535960.png" alt="image-20210617100535960" loading="lazy"></p><h1 id="非对称密码"><a href="#非对称密码" class="headerlink" title="非对称密码"></a>非对称密码</h1><h2 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h2><ul><li>PKI是Public Key Infrastructure的首字母缩写，翻译过来就是公钥基础设施</li><li>PKI是一种遵循标准的利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范。</li></ul><h2 id="非对称密码概述"><a href="#非对称密码概述" class="headerlink" title="非对称密码概述"></a>非对称密码概述</h2><ul><li>（1）基于大数分解难题的，包括RSA密码体制，Rabin密码等。</li><li>（2）基于离散对数难题的，如ElGamal密码等。</li><li>（3）基于椭圆曲线离散对数的密码体制。为满足电子认证服务系统等应用需求，中国国家密码管理局发布了SM2椭圆曲线公钥密码算法标准，该标准推荐了一条256位的随机椭圆曲线。</li></ul><h2 id="RSA-（RSA算法密钥生成、加密和解密）"><a href="#RSA-（RSA算法密钥生成、加密和解密）" class="headerlink" title="RSA （RSA算法密钥生成、加密和解密）"></a>RSA （RSA算法密钥生成、加密和解密）</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617100828650.png" alt="image-20210617100828650" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617100930216.png" alt="image-20210617100930216" loading="lazy"></p><h2 id="RSA模幂运算（Fermat小定理，模重复平方，欧几里得扩展算法求逆）"><a href="#RSA模幂运算（Fermat小定理，模重复平方，欧几里得扩展算法求逆）" class="headerlink" title="RSA模幂运算（Fermat小定理，模重复平方，欧几里得扩展算法求逆）"></a>RSA模幂运算（Fermat小定理，模重复平方，欧几里得扩展算法求逆）</h2><h1 id="认证理论与技术-—-Hash函数"><a href="#认证理论与技术-—-Hash函数" class="headerlink" title="认证理论与技术       —-Hash函数"></a>认证理论与技术       —-Hash函数</h1><h2 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h2><ul><li>HASH函数又称为哈希函数、Hash函数、杂凑函数和散列函数，在现代密码学中扮演着重要角色。</li><li>Hash函数是一公开函数，通常记为H或h，本章节中使用H表示Hash函数。Hash函数可以将任意长的消息m映射为较短的、固定长度的一个值，记为H(m)，经常称函数值H(m)为散列值、哈希值、杂凑值、杂凑码或消息摘要、数字指纹，本章节中，函数值H(m)的值称为哈希值。</li><li>从密码算法角度看，Hash函数也可以看作是一种单向密码体制，即它从一个明文到密文是不可逆映射，只有加密过程，不能解密。</li><li>哈希值是消息中所有比特的函数，因此提供了一种错误检测能力，即改变消息中任何一个比特或几个比特都会使哈希值发生改变。在密码学和数据安全技术中，Hash函数是实现有效、安全可靠数字签名和认证的重要工具，是安全认证协议中的重要模块。</li><li>对于H有下面六个要求：<ul><li>能够接受任意长度的消息作为输入；</li><li>能够生成较短的固定长度的输出；</li><li>对任何消息输入都能够容易和快速地计算出哈希值；</li><li>应该具有单向性，也就是说，给定H(m)，恢复消息m在计算上是不可行的；</li><li>应该能够抵抗弱碰撞，即给定消息m和H(m)，找到另外一个消息m≠m′，使H(m)=H(m′)是不可能；</li><li>应该能够抵抗强冲突，即可以两个有意义的消息m和m′，使得H(m)=H(m′)几乎是不可能的。</li></ul></li></ul><p>定义</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617105213550.png" alt="image-20210617105213550" loading="lazy"></p><h2 id="SHA-1算法（Hash函数研究现状，SHA-1数据填充和数据扩充、基于分组的CBC-MAC、消息认证方式）"><a href="#SHA-1算法（Hash函数研究现状，SHA-1数据填充和数据扩充、基于分组的CBC-MAC、消息认证方式）" class="headerlink" title="SHA-1算法（Hash函数研究现状，SHA-1数据填充和数据扩充、基于分组的CBC-MAC、消息认证方式）"></a>SHA-1算法（Hash函数研究现状，SHA-1数据填充和数据扩充、基于分组的CBC-MAC、消息认证方式）</h2><ul><li>NIST在1993年发布了一个哈希算法称为安全HASH算法，1995年修改，修改后的版本是SHA-1，这个版本是当前使用最广泛的哈希算法。</li><li>SHA-1接受输入消息的最大长度为264-1 bits，生成160 bits的消息摘要。</li><li>SHA-1算法操作首先对输入消息划分为512-bit块，若最后一个数据块不满足长度要求，按照一定规则进行填充为512-bit块。</li><li>然后每个512-bit块重复使用分块处理函数，最终输出160 bits哈希值。</li></ul><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617105324295.png" alt="image-20210617105324295" loading="lazy"></p><h3 id="填充消息"><a href="#填充消息" class="headerlink" title="填充消息"></a>填充消息</h3><p>对于小于512bit的，&lt;448bit的分一个组，&gt;=448bit的，分组+1，</p><p>大于512bit的，一直按512bit分，直到小于512bit,再按上述方式分。</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617105858816.png" alt="image-20210617105858816" loading="lazy"></p><p>实例</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617105918847.png" alt="image-20210617105918847" loading="lazy"></p><h3 id="被填充消息分组"><a href="#被填充消息分组" class="headerlink" title="被填充消息分组"></a>被填充消息分组</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617111519438.png" alt="image-20210617111519438" loading="lazy"></p><h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617111535691.png" alt="image-20210617111535691" loading="lazy"></p><h3 id="SHA-1算法512-bit分块处理过程"><a href="#SHA-1算法512-bit分块处理过程" class="headerlink" title="SHA-1算法512-bit分块处理过程"></a>SHA-1算法512-bit分块处理过程</h3><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113757833.png" alt="image-20210617113757833" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113805549.png" alt="image-20210617113805549" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113816149.png" alt="image-20210617113816149" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113827814.png" alt="image-20210617113827814" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113850566.png" alt="image-20210617113850566" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113857787.png" alt="image-20210617113857787" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113918379.png" alt="image-20210617113918379" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617113927303.png" alt="image-20210617113927303" loading="lazy"></p><h2 id="消息认证"><a href="#消息认证" class="headerlink" title="消息认证"></a>消息认证</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114022485.png" alt="image-20210617114022485" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114057388.png" alt="image-20210617114057388" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114104044.png" alt="image-20210617114104044" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114124050.png" alt="image-20210617114124050" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114131019.png" alt="image-20210617114131019" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114137673.png" alt="image-20210617114137673" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114144813.png" alt="image-20210617114144813" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114157740.png" alt="image-20210617114157740" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114209277.png" alt="image-20210617114209277" loading="lazy"></p><h1 id="认证理论与技术——数字签名"><a href="#认证理论与技术——数字签名" class="headerlink" title="认证理论与技术——数字签名"></a>认证理论与技术——数字签名</h1><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114725095.png" alt="image-20210617114725095" loading="lazy"></p><h2 id="RSA数字签名算法（RSA数字签名算法，以及改进算法）"><a href="#RSA数字签名算法（RSA数字签名算法，以及改进算法）" class="headerlink" title="RSA数字签名算法（RSA数字签名算法，以及改进算法）"></a>RSA数字签名算法（RSA数字签名算法，以及改进算法）</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114821472.png" alt="image-20210617114821472" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114830582.png" alt="image-20210617114830582" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114838006.png" alt="image-20210617114838006" loading="lazy"></p><p><strong>缺陷及其改进</strong></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114856970.png" alt="image-20210617114856970" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617114932546.png" alt="image-20210617114932546" loading="lazy"></p><h1 id="认证理论与技术-——认证协议"><a href="#认证理论与技术-——认证协议" class="headerlink" title="认证理论与技术 ——认证协议"></a>认证理论与技术 ——认证协议</h1><h2 id="认证协议-单向认证协议和双向认证协议）"><a href="#认证协议-单向认证协议和双向认证协议）" class="headerlink" title="认证协议(单向认证协议和双向认证协议）"></a>认证协议(单向认证协议和双向认证协议）</h2><ul><li>认证（Authentication）是指核实真实身份的过程，是防止主动攻击的重要技术之一，是一种用可靠的方法证实被认证对象（包括人和事）是否名副其实或是否有效的过程，因此也称为鉴别或验证。</li><li>认证技术的作用主要是弄清楚对象是谁，具有什么样的特征（特征必须具有唯一性，认证是可以某个个人、某个机构代理、某个软件（比如股票交易系统）），通过一定的手段在网络上实现的过程；这样可以确定对象的真实性，防止假冒、篡改等入侵行为。</li><li>认证协议主要有单向认证和双向认证协议两种，下面分别予以介绍</li></ul><h2 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h2><ul><li>目前，电子邮件是最受欢迎的通信工具，其主要优点是发送方和接收方无需同时在线，只是电子邮件被发到接收方的邮箱中，被保存下来直到接收方来阅读。如果通信双方只需要一方被认证，这样的认证过程就是一种单向认证，例如口令核对法实际上就是一种单向认证，这是这种简单的单向认证还没有与密钥分发相结合。</li><li>与密钥分发相结合的单向认证有两类：一类采用对称密码技术，需要一个可信赖的第三方——通常为密钥分发中心（KDC）或认证服务器（AS），又这个第三方来实现通信双方的身份认证和密钥分发；另一类是采用非对称密码技术，无需第三方的参与。</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614113136414.png" alt="image-20210614113136414" loading="lazy"></li><li>该方法保证只有合法的接收者才能阅读到消息内容；它还提供了发送方是 这个认证，但该协议无法防止重放攻击（可以在消息中加入时间戳，来进行防御。但由于电子邮件本身存在着潜在的延迟，因此这样的时间戳的作用也是有限的）。</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614113210568.png" alt="image-20210614113210568" loading="lazy"></li></ul><h2 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h2><ul><li>在双向认证过程中，通信双方需要互相认证各自的身份，然后交换会话密钥，双向认证的典型方案是Needham/Schroeder协议，协议执行的步骤如下（如图9-4所示）：</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614114439423.png" alt="image-20210614114439423" loading="lazy"></li><li>密钥Ka和Kb分别是A与KDC、B与KDC共享的密钥，这个协议的目的是将会话密钥KS安全的分发给A和B。<br>步骤（2）:A可安全地获取一个新的会话密钥；<br>步骤（3）:报文只能被B解密，因此只有B知道报文的内容；<br>步骤（4）:B已获取了会话密钥KS；<br>步骤（5）:B确信A已获得了会话密钥KS，同时也使得B确信这是一个新报文，因为使用了随机数N2 。</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614114458662.png" alt="image-20210614114458662" loading="lazy"></li><li>此协议还是容易遭到一种重放攻击。假定x是攻击者，已获得了一个过时的会话密钥。X(应该为C)可以冒充A使用旧的会话密钥，通过简单的重放步骤（3）就能欺骗B，除非B始终牢记所有与A的会话密钥，否则B无法确定这是一个重放。</li><li>C进一步截获步骤（4）中的报文，那么他就能够模仿步骤（5）中的响应。因此， C可以向B发送一个伪造的报文，让 B以为报文是来自A（且使用的是认证过的会话密钥）。</li><li>Denning提出了改进的Needham/Schroder协议，克服了上述介绍这种重放攻击，这个改进协议只是在步骤（2）和（3）中增加了时间戳，并假定密钥 和 是完全安全的。改进后的协议执行的步骤（如图9-5所示）如下：<br> T是时间戳，它能向A和B确保该会话密钥是刚产生的。这样A和B双方都知道这个密钥分配是一个最新的交换，而向A和B通过验证可以证实其实效性。</li><li><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614114527625.png" alt="image-20210614114527625" loading="lazy"></li></ul><h2 id="密钥的组织结构"><a href="#密钥的组织结构" class="headerlink" title="密钥的组织结构"></a>密钥的组织结构</h2><ul><li>为了适应密钥管理系统的要求，目前在现有的计算机网络系统和数据库系统的密钥管理系统的设计中，大都采用了层次化的密钥结构。这种层次化的密钥结构与整个系统的密钥控制关系是对应的。按照密钥的作用与类型及它们之间的相互控制关系，可以将不同类型的密钥划分为1级密钥、2级密钥、…n级密钥，从而组成一个n层密钥系统。 </li></ul><h1 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h1><h2 id="密钥组织结构"><a href="#密钥组织结构" class="headerlink" title="密钥组织结构"></a>密钥组织结构</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614115222555.png" alt="image-20210614115222555" loading="lazy"></p><h2 id="密钥分类"><a href="#密钥分类" class="headerlink" title="密钥分类"></a>密钥分类</h2><p>从具体的功能来看，在一般的密码系统中，密钥可以分为基本密钥、会话密钥（数据加密密钥）、密钥加密密钥和主密钥。</p><ul><li>（1）基本密钥（Base Key）又称为初始密钥（primary key）或用户密钥（user key）。它是由用户选定或由系统分配给用户的，可以在较长时间内（相对于会话密钥）由一对用户（例如密钥分配中心与某一用户之间，或者两个用户之间）所专用的密钥。在某种程度上，基本密钥还起到了标识用户的作用。</li><li>会话密钥（Session Key）<pre><code>    在一次通信或数据交换中，用户之间所使用的密钥，是由通信用户之间进行协商得到的。它一般是动态地、仅在需要进行会话数据加密时产生，并在使用完毕后立即进行清除掉的，也称为数据加密密钥(Data Encrypting Key)。**（会话密钥更换得越频繁，系统的安全性就越高。因为敌手即使获得一个会话密钥，也只能获得很少的密文。但另一方面，会话密钥更换得太频繁，又将延迟用户之间的交换，同时还造成网络负担。所以在决定会话密钥的有效期时，应权衡矛盾的两个方面。）**</code></pre></li><li>密钥加密密钥（Key Encrypting Key）<pre><code>一般是用来对传输的会话密钥进行加密时采用的密钥，又称为二级密钥(Secondary Key)。密钥加密密钥所保护的对象是实际用来保护通信或文件数据的会话密钥。</code></pre></li><li>主密钥（Master Key）<pre><code> 对应于层次化密钥结构中的最高层次，它是对密钥加密密钥进行加密的密钥，主密钥应受到严格的保护。</code></pre></li></ul><h2 id="DH密钥协商协议"><a href="#DH密钥协商协议" class="headerlink" title="DH密钥协商协议"></a>DH密钥协商协议</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614115944203.png" alt="image-20210614115944203" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614120006179.png" alt="image-20210614120006179" loading="lazy"></p><p>例子</p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210614120027587.png" alt="image-20210614120027587" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115047859.png" alt="image-20210617115047859" loading="lazy"></p><h2 id="密钥分配（密钥分层结构、DH协议、中间人攻击、密钥分配协议）"><a href="#密钥分配（密钥分层结构、DH协议、中间人攻击、密钥分配协议）" class="headerlink" title="密钥分配（密钥分层结构、DH协议、中间人攻击、密钥分配协议）"></a>密钥分配（密钥分层结构、DH协议、中间人攻击、密钥分配协议）</h2><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115107561.png" alt="image-20210617115107561" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115155381.png" alt="image-20210617115155381" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115207066.png" alt="image-20210617115207066" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115213585.png" alt="image-20210617115213585" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115224138.png" alt="image-20210617115224138" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115231262.png" alt="image-20210617115231262" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115242554.png" alt="image-20210617115242554" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115249076.png" alt="image-20210617115249076" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115257473.png" alt="image-20210617115257473" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115303024.png" alt="image-20210617115303024" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115313669.png" alt="image-20210617115313669" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115319147.png" alt="image-20210617115319147" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115325388.png" alt="image-20210617115325388" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115332862.png" alt="image-20210617115332862" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115340196.png" alt="image-20210617115340196" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115347804.png" alt="image-20210617115347804" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115354066.png" alt="image-20210617115354066" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115401088.png" alt="image-20210617115401088" loading="lazy"></p><p><img src="/2021/04/19/%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210617115407271.png" alt="image-20210617115407271" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="http://www.blog.yln956.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-19T02:55:55.000Z</published>
    <updated>2021-09-03T05:56:53.368Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>龙哥YYDS，让我bin毒稳了</p><p>1.2.1，1.3.2，1.3.3，1.4重点<br>2.1.1重点，2.1.2，2.1.3重点，2.4.1，2.4.2，2.5.1，2.5.2重点，2.5.3重点，<br>3.1.1，3.1.2，3.2.2，3.2.3重点，3.2.4，3.3.1，3.4.1，3.4.2重点，3.4.3重点，3.4.4，3.4.5，<br>4.1.1，4.1.2，4.2.2，4.3.2重点，4.4.2，4.5.2重点，4.7.1，4.7.2重点，<br>5.2.1，5.3，5.4.3，5.5.1，<br>6.3.2，</p><h1 id="1-概论"><a href="#1-概论" class="headerlink" title="1.概论"></a>1.概论</h1><h2 id="存储程序与冯-诺依曼体制"><a href="#存储程序与冯-诺依曼体制" class="headerlink" title="存储程序与冯.诺依曼体制"></a>存储程序与冯.诺依曼体制</h2><ul><li>冯.诺依曼（现代计算机之父）提出了当代计算机结构的体制。　<ul><li>采用二进制形式表示数据和指令</li><li>采用存储程序方式</li><li>由运算器、存储器、控制器、输入设备和输出设备等五大部件组成计算机系统</li></ul></li></ul><h2 id="计算机发展历程"><a href="#计算机发展历程" class="headerlink" title="计算机发展历程"></a>计算机发展历程</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619103337305.png" alt="image-20210619103337305" loading="lazy"></p><h2 id="硬件系统"><a href="#硬件系统" class="headerlink" title="硬件系统"></a>硬件系统</h2><ul><li>常见计算机硬件系统组成：</li><li>(1) CPU        </li><li>(2) 存储器</li><li>(3)输入/输出设备</li><li>(4)总线</li><li>(5)接口</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619103819587.png" alt="image-20210619103819587" loading="lazy"></p><p>微型机南北桥构架</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619103840899.png" alt="image-20210619103840899" loading="lazy"></p><h2 id="软件系统"><a href="#软件系统" class="headerlink" title="软件系统"></a>软件系统</h2><ul><li>软件实质上就是可以执行的一 段程序。</li><li>软件通常分多种类型。具体如下：<ul><li>1、系统软件<br>  (1) 操作系统类软件<br>  (2)语言处理类软件<br>  (3)数据库管理系统(DBS)<br>  (4)各种服务性支撑软件<br>  (5)各种标准程序库</li><li>2、应用程序<br>   大量的用户软件和工具软件</li></ul></li></ul><h2 id="计算机的性能主要评价指标（重点）"><a href="#计算机的性能主要评价指标（重点）" class="headerlink" title="计算机的性能主要评价指标（重点）"></a>计算机的性能主要评价指标（重点）</h2><ul><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104033268.png" alt="image-20210619104033268" loading="lazy"></p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104046861.png" alt="image-20210619104046861" loading="lazy"></p></li><li><p>外频</p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104057674.png" alt="image-20210619104057674" loading="lazy"></p></li><li><p>运算速度</p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104137915.png" alt="image-20210619104137915" loading="lazy"></p></li><li><p>数据传输率</p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104155570.png" alt="image-20210619104155570" loading="lazy"></p></li><li><p>例题</p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104405161.png" alt="image-20210619104405161" loading="lazy"></p></li><li><p>答案</p></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619104416161.png" alt="image-20210619104416161" loading="lazy"></p></li></ul><h1 id="2-数据的表示、运算与校验"><a href="#2-数据的表示、运算与校验" class="headerlink" title="2.数据的表示、运算与校验"></a>2.数据的表示、运算与校验</h1><h2 id="2-1-1进位计数制（重点）"><a href="#2-1-1进位计数制（重点）" class="headerlink" title="2.1.1进位计数制（重点）"></a>2.1.1进位计数制（重点）</h2><p><strong>数制</strong>：即用一组固定的符号和一套统一的规则表示数值的方法。也称进位计数制。</p><p>任意进制数制的表示：</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619235131173.png" alt="image-20210619235131173" loading="lazy"></p><p>几种常用的进制</p><ul><li>（1）2进制：0、1</li><li>（2）8进制：0、1、2、…、7</li><li>（3）16进制：0、…、9、A、B、C、D、E、F</li></ul><p>进制间的转换</p><ul><li>（1）整数 10 -&gt;2 (除2取余法)</li><li>（2）小数 10 -&gt; 2 (乘2取整法)</li><li>（3）整数  2 -&gt; 10(按权相加)</li><li>（4）小数  2 -&gt; 10(按权相加)</li><li>（5）16进制↔2进制(逐位转换/分组转换)</li></ul><p>常用的几种数制的对应关系</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619235319488.png" alt="image-20210619235319488" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619235451642.png" alt="image-20210619235451642" loading="lazy"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>计算机中为什么采用二进制表示数据？</p><ul><li>1、具有二值状态的物理器件容易实现。</li><li>2、二进制的运算规则简单，硬件实现容易。</li><li>3、具有逻辑特性，可代表“真假”、“是非”。</li></ul><h2 id="2-1-2带符号数表示"><a href="#2-1-2带符号数表示" class="headerlink" title="2.1.2带符号数表示"></a>2.1.2带符号数表示</h2><h3 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h3><p>正数原码反码补码都一样</p><p>1  原码：比较自然的表示法，最高位表示符号，0为正，1为负。优点：简单易懂。缺点：加减法运算复杂。<br>     例：真值        X原<br>       +0.1011         0.1011<br>       - 0.1011         1.1011<br>          - 1011          11011         (最高位是符号位)</p><p> 2 反码：为计算补码方便而引入 。<br>     它的求法很简单：(负数)对原码的尾数逐位取反。<br>   另：补码末位减1也可求得(负数)<br>  例：X原=0.1010    X反=0.1010<br>         X原=1.1010       X反=1. 0101</p><p>3 补码：克服了原码运算的缺点，能够让符号位一起参与运算。<br>  规则：最高位为符号位，数值位由给出数值按2取摸（求补）的结果表示 。即负数“取反加一” 。<br>  例：X原=0.1010    X补=0.1010<br>            X原=1.1010    X补=1.0110</p><p>注意一下补码表示的范围</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210619235636366.png" alt="image-20210619235636366" loading="lazy"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>原码、反码与补码的比较</p><ul><li>（1）原码的最高位为符号位，其余为数值位。</li><li>（2）正数的反码、补码与原码相同。<br>即[x]反 =[x]补=[x]原<br>负数的反码符号位为1,数值位为原码按位取反。负数的补码符号位为1,数值位为原码按位取反,再加1。</li><li>（3）原码、反码零的表示有两个：<br>（0…0）(10..0)/(0…0)(1…1)<br>补码的零只有一个：（0…0）</li><li>（4）原码、反码表示正负数的范围（对称）：<br>+（2^n-1）~ –（2^n-1）<br>补码表示正负数的范围（非对称）：<br>+（2^n-1）~ – （2^n） (注意)<br>01· · · · 1     ~     1· · · ·1<br>负数补码的表示范围比原码多一种组合。</li></ul><h2 id="2-1-3定点数与浮点数（重点）"><a href="#2-1-3定点数与浮点数（重点）" class="headerlink" title="2.1.3定点数与浮点数（重点）"></a>2.1.3定点数与浮点数（重点）</h2><h3 id="定点表示与浮点表示"><a href="#定点表示与浮点表示" class="headerlink" title="定点表示与浮点表示"></a>定点表示与浮点表示</h3><h4 id="定点表示法"><a href="#定点表示法" class="headerlink" title="定点表示法"></a>定点表示法</h4><p>定点表示法：小数点的位置固定不变的表示方法。定点数包括定点小数与定点整数。<br> 定点整数又分为无符号整数和带符号整数。<br>定点小数：<br>纯小数：小数点位置在符号位之后。<br>例：0.100110、1.011011</p><p>纯小数格式：X0.X1X2…Xn<br>X0 ：符号位。<br>X1X2…Xn ：尾数。<br>X1 ：最高数位或最高有效位。<br>注：在计算机中，小数点本身是不存在的<br>原码定点小数范围： –(1-2^-n)  ~  (1-2^-n)<br>1.11…1  ~  0.11…1<br>补码定点小数范围： –1  ~  (1-2^-n)<br>1.00…0  ~  0.11…1</p><h4 id="浮点表示法"><a href="#浮点表示法" class="headerlink" title="浮点表示法"></a>浮点表示法</h4><p>浮点表示法：小数点的位置可左右浮动的表示方法。其思想来源于科学计数法。<br>例：△–0.0000000000000307<br>=-0.307 * 10^-13=-3.07 * 10^-14<br>=-30.7 * 10^-15=-307 * 10^-16…<br>      浮点数的一般表示方法：<br>                              N=M * R^E<br>  其中，M为尾数（定点小数），R为基数（定点整数、二进制中R=2），E为阶码（定点整数）</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620001024248.png" alt="image-20210620001024248" loading="lazy"></p><p><strong>规格化，类似于科学计数法，记住以下两个点就行</strong></p><ul><li><strong>正数，一般是0.1…….的形式</strong></li><li><strong>负数，除了-0.5=1.1以外，其他都是1.0…….的形式</strong></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620001044921.png" alt="image-20210620001044921" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620001056244.png" alt="image-20210620001056244" loading="lazy"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>定点数与浮点数的比较：<br>  （1）表示范围：浮点数比定点数大；<br>  （2）运算精度：浮点数比定点数高；<br>    (3)   运算规则:  浮点数比定点数复杂； </p><h2 id="2-4-1定点加减运算"><a href="#2-4-1定点加减运算" class="headerlink" title="2.4.1定点加减运算"></a>2.4.1定点加减运算</h2><h3 id="原码加减"><a href="#原码加减" class="headerlink" title="原码加减"></a>原码加减</h3><p>按照运算规则，可以将原码加减运算归为四类：<br>    (+ A) + (+ B) = (+ A) – ( – B)<br>    (– A) + (– B) = (– A) – ( + B)<br>    (+ A) + (– B) = (+ A) – ( + B)<br>    (– A) + (+ B) = (– A) – ( – B)</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620164415760.png" alt="image-20210620164415760" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620164429405.png" alt="image-20210620164429405" loading="lazy"></p><h3 id="补码加减"><a href="#补码加减" class="headerlink" title="补码加减"></a>补码加减</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    补码加减相比原码加减来说，要简单一些：操作数用补码表示，连同符号位一起，结果也是用补码表示。<br>​            (X + Y)补 = X补 +Y补<br>​              (X － Y )补 = X补 + (－Y)补<br> 其中：(－Y)补 =  ((Y)补)求补<br> 即将(Y)补连同符号位一起，取反加一</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620165327654.png" alt="image-20210620165327654" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620170148713.png" alt="image-20210620170148713" loading="lazy"></p><p>注意某数的变补与某数补码的区别</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620170157358.png" alt="image-20210620170157358" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620170232069.png" alt="image-20210620170232069" loading="lazy"></p><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172535116.png" alt="image-20210620172535116" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172542474.png" alt="image-20210620172542474" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172857204.png" alt="image-20210620172857204" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172559958.png" alt="image-20210620172559958" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172609613.png" alt="image-20210620172609613" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172618366.png" alt="image-20210620172618366" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172730205.png" alt="image-20210620172730205" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620172736668.png" alt="image-20210620172736668" loading="lazy"></p><h3 id="数位扩展与压缩"><a href="#数位扩展与压缩" class="headerlink" title="数位扩展与压缩"></a>数位扩展与压缩</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620175649169.png" alt="image-20210620175649169" loading="lazy"></p><h2 id="2-4-2定点乘法运算"><a href="#2-4-2定点乘法运算" class="headerlink" title="2.4.2定点乘法运算"></a>2.4.2定点乘法运算</h2><h3 id="原码一位乘法"><a href="#原码一位乘法" class="headerlink" title="原码一位乘法"></a>原码一位乘法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180038868.png" alt="image-20210620180038868" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180109776.png" alt="image-20210620180109776" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180118101.png" alt="image-20210620180118101" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180140116.png" alt="image-20210620180140116" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180154536.png" alt="image-20210620180154536" loading="lazy"></p><h3 id="补码一位乘法"><a href="#补码一位乘法" class="headerlink" title="补码一位乘法"></a>补码一位乘法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620202409171.png" alt="image-20210620202409171" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620202434068.png" alt="image-20210620202434068" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620202456199.png" alt="image-20210620202456199" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620202508311.png" alt="image-20210620202508311" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620202523076.png" alt="image-20210620202523076" loading="lazy"></p><h3 id="原码两位乘法"><a href="#原码两位乘法" class="headerlink" title="原码两位乘法"></a>原码两位乘法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621131342397.png" alt="image-20210621131342397" loading="lazy"></p><h3 id><a href="#" class="headerlink" title></a><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621131414928.png" alt="image-20210621131414928" loading="lazy"></h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621131427897.png" alt="image-20210621131427897" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621131442495.png" alt="image-20210621131442495" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621131450914.png" alt="image-20210621131450914" loading="lazy"></p><h2 id="校验码的概念"><a href="#校验码的概念" class="headerlink" title="校验码的概念"></a>校验码的概念</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180432829.png" alt="image-20210620180432829" loading="lazy"></p><h2 id="2-5-1奇偶校验"><a href="#2-5-1奇偶校验" class="headerlink" title="2.5.1奇偶校验"></a>2.5.1奇偶校验</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620180451476.png" alt="image-20210620180451476" loading="lazy"></p><h2 id="2-5-2海明校验（重点）"><a href="#2-5-2海明校验（重点）" class="headerlink" title="2.5.2海明校验（重点）"></a>2.5.2海明校验（重点）</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>就是多重奇偶校验</p><p>假设校验位数为n,校验的数据个数为2^n-1-n</p><p>校验位为1,2,4,8,16,32………2^n</p><p>校验位检验的位置是根据它的权重决定的</p><ul><li>比如说有三个校验位P1,P2,P4</li><li>1就被P1检验，2就被P2检验，3就被P1+P2检验，4就被P4检验</li><li>5就被P1+P4检验,6就被P2+P4检验，7就被P4+P2+P1检验</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620204444285.png" alt="image-20210620204444285" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205141961.png" alt="image-20210620205141961" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205152826.png" alt="image-20210620205152826" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205159907.png" alt="image-20210620205159907" loading="lazy"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205251613.png" alt="image-20210620205251613" loading="lazy"></p><h2 id="2-5-3循环冗余校验（重点）"><a href="#2-5-3循环冗余校验（重点）" class="headerlink" title="2.5.3循环冗余校验（重点）"></a>2.5.3循环冗余校验（重点）</h2><p>下面废话一堆，其实结合个例题一看就懂了</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205350587.png" alt="image-20210620205350587" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205358510.png" alt="image-20210620205358510" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205410087.png" alt="image-20210620205410087" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205420279.png" alt="image-20210620205420279" loading="lazy"></p><h1 id="3-CPU子系统"><a href="#3-CPU子系统" class="headerlink" title="3.CPU子系统"></a>3.CPU子系统</h1><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620205651975.png" alt="image-20210620205651975" loading="lazy"></p><h2 id="3-1-1硬件结构模型"><a href="#3-1-1硬件结构模型" class="headerlink" title="3.1.1硬件结构模型"></a>3.1.1硬件结构模型</h2><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620210026335.png" alt="image-20210620210026335" loading="lazy"></p><h3 id="运算部件"><a href="#运算部件" class="headerlink" title="运算部件"></a>运算部件</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620210053481.png" alt="image-20210620210053481" loading="lazy"></p><h3 id="寄存器组"><a href="#寄存器组" class="headerlink" title="寄存器组"></a>寄存器组</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620210109226.png" alt="image-20210620210109226" loading="lazy"></p><p>寄存器分类</p><p>按寄存器存放的信息的类型(或使用的方式)进行分类(七类):</p><ul><li><p>① 通用寄存器<br> 一般是指可以通过程序访问的、具有多种用途的寄存器, 每一个通用寄存器有编号与之对应。<br>作用如: 存放数据(原始数据、中间结果、最终结果等),  也可以存放地址进行间接寻址、变址寻址等。<br>标识方法: 不同的CPU可能各不相同。<br>如: Intel8086的 AX、BX、CX、DX、DI等<br>PDP-11小型机的 R0、R1 、 R2等 </p></li><li><p>② 暂存器<br>暂存器不能通过程序访问, 也没有编号。<br>主要作用是存放指令执行过程中的中间信息。<br> 比如:<br>从一个主存单元读数据存到另一个单元, 则有以下过程 <strong>单元-&gt;暂存器-&gt;单元</strong>;<br> 为运算器两个输入端提供数据, 分两次将操作数送往两个不同的暂存器。</p></li><li><p>③ 指令寄存器 (IR)</p><pre><code>  存放从存贮单元中读出的指令。  一个指令寄存器存放一条指令, 也可以设置一个指令队列, 存放多条指令</code></pre></li><li><p>④ 程序计数器 (PC、CS、IP)</p><pre><code> 用于跟踪程序的地址。  PC的初值为所要执行的程序的首地址。 如果一条指令占据1个单元, 则一条指令被读出以后, 则进行: PC+1-&gt;PC操作 ; 如果一条指令占据2个单元, 则一条指令被读出以后, 则进行: PC+2-&gt;PC操作;  依次类推。</code></pre></li><li><p>⑤ 程序状态字寄存器(PSW)<br>用于记录程序指令过程中运行的状态和程序的工具方式。主要由以下两个部分构成: </p><ul><li><p>特征位</p><ul><li><p> 进位位C: 指令执行后,  如果结果产生进位, 则将C置为1, 否则置0;</p></li><li><p>溢出位V: 如果运算结果产生溢出,  则将V置为1, 否则置0;</p></li><li><p>零标志Z: 如果运算结果为0,  则将Z置为1, 否则置0;</p></li><li><p>正负标志N: 如果运算结果为负,  则将N置为1, 否则置0;</p></li><li><p>奇偶标志P: 如果运算结果中1的个数为奇数, 将P置为1, 否则置0; (Intel8086的规定与此相反)<br>以上标志位的状态是由指令执行的结果决定的。</p></li></ul></li><li><p>PSW的另一部分状态的设置是由编程来决定, 其典型的设置有:  </p><ul><li>跟踪位T: 称为断点标志, 主要用于程序调试。<br> 如果编程时, 将T置为1, 且在程序中安排一条测试指令, 当程序执行到该测试指令时,  程序将转入测试程序。</li><li>单步标志 TF<br>将单步标志置1, 则程序每执行一条指令, 就产生一次内部中断。其功能主要用于程序调试。</li><li>中断允许标志或程序优先级字段:<br> — 中断允许标志I(或TI): 根据当前运行程序与外部中断的紧要程度, 处理器通过对该标志的设置, 决定是否响应中断请求。<br>— 为每一程序和中断请求设置优先级, 仅当中断请求的优先级高于正在执行的程序的优先级, 才响应中断请求。</li><li><strong>(在微型计算机中, 一般采用前一种方式)</strong></li></ul></li></ul></li><li><p>⑥ 地址寄存器 MAR</p><pre><code> CPU访问存储器和访问I/O端口的地址首先存入MAR, 再有MAR送往外部地址总线。</code></pre></li><li><p>⑦ 数据缓冲寄存器 MBR (或MDR)</p><pre><code> 用于暂存CPU与存储器和外设之间通信的数据。</code></pre></li><li><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620210832870.png" alt="image-20210620210832870" loading="lazy"></p></li></ul><h3 id="微命令产生部件"><a href="#微命令产生部件" class="headerlink" title="微命令产生部件"></a>微命令产生部件</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211734821.png" alt="image-20210620211734821" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211743666.png" alt="image-20210620211743666" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211753698.png" alt="image-20210620211753698" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211805046.png" alt="image-20210620211805046" loading="lazy"></p><h3 id="时序系统"><a href="#时序系统" class="headerlink" title="时序系统"></a>时序系统</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211524156.png" alt="image-20210620211524156" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211539274.png" alt="image-20210620211539274" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211549074.png" alt="image-20210620211549074" loading="lazy"></p><h3 id="CPU内部的数据通路的结构"><a href="#CPU内部的数据通路的结构" class="headerlink" title="CPU内部的数据通路的结构"></a>CPU内部的数据通路的结构</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211612040.png" alt="image-20210620211612040" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211633075.png" alt="image-20210620211633075" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211648246.png" alt="image-20210620211648246" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211658648.png" alt="image-20210620211658648" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620211707739.png" alt="image-20210620211707739" loading="lazy"></p><h2 id="3-1-2基本功能与控制"><a href="#3-1-2基本功能与控制" class="headerlink" title="3.1.2基本功能与控制"></a>3.1.2基本功能与控制</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212756524.png" alt="image-20210620212756524" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212808645.png" alt="image-20210620212808645" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212816344.png" alt="image-20210620212816344" loading="lazy"></p><h2 id="3-2-2指令的一般格式"><a href="#3-2-2指令的一般格式" class="headerlink" title="3.2.2指令的一般格式"></a>3.2.2指令的一般格式</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212847814.png" alt="image-20210620212847814" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212904102.png" alt="image-20210620212904102" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212915663.png" alt="image-20210620212915663" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212934027.png" alt="image-20210620212934027" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212946228.png" alt="image-20210620212946228" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620212955770.png" alt="image-20210620212955770" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213008800.png" alt="image-20210620213008800" loading="lazy"></p><h3 id="指令字长"><a href="#指令字长" class="headerlink" title="指令字长"></a>指令字长</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213116832.png" alt="image-20210620213116832" loading="lazy"></p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213148055.png" alt="image-20210620213148055" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213155332.png" alt="image-20210620213155332" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213129597.png" alt="image-20210620213129597" loading="lazy"></p><h2 id="3-2-3常见的寻址方式（重点）"><a href="#3-2-3常见的寻址方式（重点）" class="headerlink" title="3.2.3常见的寻址方式（重点）"></a>3.2.3常见的寻址方式（重点）</h2><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213226781.png" alt="image-20210620213226781" loading="lazy"></p><h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213240193.png" alt="image-20210620213240193" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213255022.png" alt="image-20210620213255022" loading="lazy"></p><h3 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213314268.png" alt="image-20210620213314268" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213321395.png" alt="image-20210620213321395" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213334325.png" alt="image-20210620213334325" loading="lazy"></p><h3 id="变址、基址寻址及其变化"><a href="#变址、基址寻址及其变化" class="headerlink" title="变址、基址寻址及其变化"></a>变址、基址寻址及其变化</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213358366.png" alt="image-20210620213358366" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213419326.png" alt="image-20210620213419326" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213556043.png" alt="image-20210620213556043" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213604682.png" alt="image-20210620213604682" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213620194.png" alt="image-20210620213620194" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213645283.png" alt="image-20210620213645283" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213656790.png" alt="image-20210620213656790" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213703941.png" alt="image-20210620213703941" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213721095.png" alt="image-20210620213721095" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213742621.png" alt="image-20210620213742621" loading="lazy"></p><h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213809788.png" loading="lazy"></p><h2 id="3-2-4指令功能和类型"><a href="#3-2-4指令功能和类型" class="headerlink" title="3.2.4指令功能和类型"></a>3.2.4指令功能和类型</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213844763.png" alt="image-20210620213844763" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213901506.png" alt="image-20210620213901506" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213911989.png" alt="image-20210620213911989" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620213959075.png" alt="image-20210620213959075" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214011090.png" alt="image-20210620214011090" loading="lazy"></p><h2 id="3-3-1加法器及其进位逻辑"><a href="#3-3-1加法器及其进位逻辑" class="headerlink" title="3.3.1加法器及其进位逻辑"></a>3.3.1加法器及其进位逻辑</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001347705.png" alt="image-20210621001347705" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001357981.png" alt="image-20210621001357981" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001406502.png" alt="image-20210621001406502" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001417221.png" alt="image-20210621001417221" loading="lazy"></p><h2 id="3-4-1模型机指令系统"><a href="#3-4-1模型机指令系统" class="headerlink" title="3.4.1模型机指令系统"></a>3.4.1模型机指令系统</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001633508.png" alt="image-20210621001633508" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621001646050.png" alt="image-20210621001646050" loading="lazy"></p><h2 id="3-4-2基本部件和数据通路（重点）"><a href="#3-4-2基本部件和数据通路（重点）" class="headerlink" title="3.4.2基本部件和数据通路（重点）"></a>3.4.2基本部件和数据通路（重点）</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002003070.png" alt="image-20210621002003070" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002010636.png" alt="image-20210621002010636" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002019533.png" alt="image-20210621002019533" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002601033.png" alt="image-20210621002601033" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002632109.png" alt="image-20210621002632109" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002754482.png" alt="image-20210621002754482" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002807266.png" alt="image-20210621002807266" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002815872.png" alt="image-20210621002815872" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002833084.png" alt="image-20210621002833084" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002844110.png" alt="image-20210621002844110" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002851853.png" alt="image-20210621002851853" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002900762.png" alt="image-20210621002900762" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002911388.png" alt="image-20210621002911388" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002921932.png" alt="image-20210621002921932" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002929604.png" alt="image-20210621002929604" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621002947958.png" alt="image-20210621002947958" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003000668.png" alt="image-20210621003000668" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003009046.png" alt="image-20210621003009046" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003021167.png" alt="image-20210621003021167" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003028614.png" alt="image-20210621003028614" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003036780.png" alt="image-20210621003036780" loading="lazy"></p><h2 id="3-4-3指令流程和微命令（重点）"><a href="#3-4-3指令流程和微命令（重点）" class="headerlink" title="3.4.3指令流程和微命令（重点）"></a>3.4.3指令流程和微命令（重点）</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003211555.png" alt="image-20210621003211555" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003557209.png" alt="image-20210621003557209" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003604805.png" alt="image-20210621003604805" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003612151.png" alt="image-20210621003612151" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003626870.png" alt="image-20210621003626870" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003634343.png" alt="image-20210621003634343" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003642367.png" alt="image-20210621003642367" loading="lazy"></p><h2 id="3-4-4组合逻辑控制"><a href="#3-4-4组合逻辑控制" class="headerlink" title="3.4.4组合逻辑控制"></a>3.4.4组合逻辑控制</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003055099.png" alt="image-20210621003055099" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003108089.png" alt="image-20210621003108089" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003130447.png" alt="image-20210621003130447" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003137097.png" alt="image-20210621003137097" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003147303.png" alt="image-20210621003147303" loading="lazy"></p><h2 id="3-4-5微程序控制"><a href="#3-4-5微程序控制" class="headerlink" title="3.4.5微程序控制"></a>3.4.5微程序控制</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003319121.png" alt="image-20210621003319121" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621003326886.png" alt="image-20210621003326886" loading="lazy"></p><h1 id="4-存储子系统"><a href="#4-存储子系统" class="headerlink" title="4.存储子系统"></a>4.存储子系统</h1><h2 id="4-1-1存储系统的层次结构"><a href="#4-1-1存储系统的层次结构" class="headerlink" title="4.1.1存储系统的层次结构"></a>4.1.1存储系统的层次结构</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010803351.png" alt="image-20210621010803351" loading="lazy"></p><h2 id="4-1-2存储器的分类"><a href="#4-1-2存储器的分类" class="headerlink" title="4.1.2存储器的分类"></a>4.1.2存储器的分类</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010818565.png" alt="image-20210621010818565" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010825612.png" alt="image-20210621010825612" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010843552.png" alt="image-20210621010843552" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010856269.png" alt="image-20210621010856269" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010903481.png" alt="image-20210621010903481" loading="lazy"></p><h2 id="4-2-2动态MOS芯片"><a href="#4-2-2动态MOS芯片" class="headerlink" title="4.2.2动态MOS芯片"></a>4.2.2动态MOS芯片</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010934104.png" alt="image-20210621010934104" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621010940657.png" alt="image-20210621010940657" loading="lazy"></p><h2 id="4-3-2主存的逻辑设计（重点）"><a href="#4-3-2主存的逻辑设计（重点）" class="headerlink" title="4.3.2主存的逻辑设计（重点）"></a>4.3.2主存的逻辑设计（重点）</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011017660.png" alt="image-20210621011017660" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011024486.png" alt="image-20210621011024486" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011034348.png" alt="image-20210621011034348" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011041793.png" alt="image-20210621011041793" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011049946.png" alt="image-20210621011049946" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011100900.png" alt="image-20210621011100900" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011109741.png" alt="image-20210621011109741" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011115914.png" alt="image-20210621011115914" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011135476.png" alt="image-20210621011135476" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011141877.png" alt="image-20210621011141877" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011148787.png" alt="image-20210621011148787" loading="lazy"></p><h2 id="4-4-2磁记录编码方式"><a href="#4-4-2磁记录编码方式" class="headerlink" title="4.4.2磁记录编码方式"></a>4.4.2磁记录编码方式</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011330129.png" alt="image-20210621011330129" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011336095.png" alt="image-20210621011336095" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011342157.png" alt="image-20210621011342157" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011350896.png" alt="image-20210621011350896" loading="lazy"></p><h2 id="4-5-2磁盘技术指标与校验（重点）"><a href="#4-5-2磁盘技术指标与校验（重点）" class="headerlink" title="4.5.2磁盘技术指标与校验（重点）"></a>4.5.2磁盘技术指标与校验（重点）</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011400067.png" alt="image-20210621011400067" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011409461.png" alt="image-20210621011409461" loading="lazy"></p><h2 id="4-7-1计算机三级存储体系概念"><a href="#4-7-1计算机三级存储体系概念" class="headerlink" title="4.7.1计算机三级存储体系概念"></a>4.7.1计算机三级存储体系概念</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011614862.png" alt="image-20210621011614862" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011705948.png" alt="image-20210621011705948" loading="lazy"></p><h2 id="4-7-2Cache与内存的数据交互（重点）"><a href="#4-7-2Cache与内存的数据交互（重点）" class="headerlink" title="4.7.2Cache与内存的数据交互（重点）"></a>4.7.2Cache与内存的数据交互（重点）</h2><h3 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011744564.png" alt="image-20210621011744564" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011750954.png" alt="image-20210621011750954" loading="lazy"></p><h3 id="全相联映射"><a href="#全相联映射" class="headerlink" title="全相联映射"></a>全相联映射</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011811332.png" alt="image-20210621011811332" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011821045.png" alt="image-20210621011821045" loading="lazy"></p><h3 id="组相联映射"><a href="#组相联映射" class="headerlink" title="组相联映射"></a>组相联映射</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011853309.png" alt="image-20210621011853309" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621011902821.png" alt="image-20210621011902821" loading="lazy"></p><h3 id="常用的替换算法"><a href="#常用的替换算法" class="headerlink" title="常用的替换算法"></a>常用的替换算法</h3><ul><li>1、随机替换算法</li><li>2、先进先出算法（FIFO）</li><li>3、最近最少使用算法（LRU）<ul><li>该算法统计哪一个Cache行是近段时间使用次数最少的Cache行，需替换时就将它替换出去。</li><li>LRU替换算法可以通过为每个Cache行设置一个计数器来实现LRU替换算法，Cache每命中一次，命中行的计数器被清零，其他行的计数器加1，需要替换的话，就将计数器值最大的行替换出去。</li></ul></li></ul><h3 id="Cache的读-写操作"><a href="#Cache的读-写操作" class="headerlink" title="Cache的读/写操作"></a>Cache的读/写操作</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012047028.png" alt="image-20210621012047028" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012055868.png" alt="image-20210621012055868" loading="lazy"></p><h1 id="5-总线与输出"><a href="#5-总线与输出" class="headerlink" title="5.总线与输出"></a>5.总线与输出</h1><h2 id="5-2-1总线的特性与分类"><a href="#5-2-1总线的特性与分类" class="headerlink" title="5.2.1总线的特性与分类"></a>5.2.1总线的特性与分类</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214718868.png" alt="image-20210620214718868" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214729925.png" alt="image-20210620214729925" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214748355.png" alt="image-20210620214748355" loading="lazy"></p><h2 id="5-3直接程序传送模式"><a href="#5-3直接程序传送模式" class="headerlink" title="5.3直接程序传送模式"></a>5.3直接程序传送模式</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214813894.png" alt="image-20210620214813894" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214823987.png" alt="image-20210620214823987" loading="lazy"></p><h2 id="5-4-3中断响应与中断服务程序"><a href="#5-4-3中断响应与中断服务程序" class="headerlink" title="5.4.3中断响应与中断服务程序"></a>5.4.3中断响应与中断服务程序</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230735293.png" alt="image-20210620230735293" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230744441.png" alt="image-20210620230744441" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230753091.png" alt="image-20210620230753091" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230802957.png" alt="image-20210620230802957" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230827687.png" alt="image-20210620230827687" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620230836270.png" alt="image-20210620230836270" loading="lazy"></p><h2 id="5-5-1DMA基本概念"><a href="#5-5-1DMA基本概念" class="headerlink" title="5.5.1DMA基本概念"></a>5.5.1DMA基本概念</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214945728.png" alt="image-20210620214945728" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214955515.png" alt="image-20210620214955515" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620215002034.png" alt="image-20210620215002034" loading="lazy"></p><h1 id="6-输入-输出设备"><a href="#6-输入-输出设备" class="headerlink" title="6.输入/输出设备"></a>6.输入/输出设备</h1><h2 id="6-3-2显示成像原理"><a href="#6-3-2显示成像原理" class="headerlink" title="6.3.2显示成像原理"></a>6.3.2显示成像原理</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214237746.png" alt="image-20210620214237746" loading="lazy"></p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210620214359130.png" alt="image-20210620214359130" loading="lazy"></p><h1 id="压题-那必然不存在的"><a href="#压题-那必然不存在的" class="headerlink" title="压题?那必然不存在的"></a>压题?那必然不存在的</h1><h1 id="看看一些习题"><a href="#看看一些习题" class="headerlink" title="看看一些习题"></a>看看一些习题</h1><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012255765.png" alt="image-20210621012255765" loading="lazy"></p><h3 id="原码补码"><a href="#原码补码" class="headerlink" title="原码补码"></a>原码补码</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012346728.png" alt="image-20210621012346728" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012404049.png" alt="image-20210621012404049" loading="lazy"></p><h3 id="定点表示法-1"><a href="#定点表示法-1" class="headerlink" title="定点表示法"></a>定点表示法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012431810.png" alt="image-20210621012431810" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012440408.png" alt="image-20210621012440408" loading="lazy"></p><h3 id="规格化"><a href="#规格化" class="headerlink" title="规格化"></a>规格化</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012513415.png" alt="image-20210621012513415" loading="lazy"></p><h3 id="浮点表示法-1"><a href="#浮点表示法-1" class="headerlink" title="浮点表示法"></a>浮点表示法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012540759.png" alt="image-20210621012540759" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012552651.png" alt="image-20210621012552651" loading="lazy"></p><h3 id="溢出判断-1"><a href="#溢出判断-1" class="headerlink" title="溢出判断"></a>溢出判断</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012625440.png" alt="image-20210621012625440" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012642357.png" alt="image-20210621012642357" loading="lazy"></p><h3 id="补码一位乘法-1"><a href="#补码一位乘法-1" class="headerlink" title="补码一位乘法"></a>补码一位乘法</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012709252.png" alt="image-20210621012709252" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012736647.png" alt="image-20210621012736647" loading="lazy"></p><h3 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012804051.png" alt="image-20210621012804051" loading="lazy"></p><h3 id="海明校验"><a href="#海明校验" class="headerlink" title="海明校验"></a>海明校验</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012821007.png" alt="image-20210621012821007" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012848125.png" alt="image-20210621012848125" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012859637.png" alt="image-20210621012859637" loading="lazy"></p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013036302.png" alt="image-20210621013036302" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013044476.png" alt="image-20210621013044476" loading="lazy"></p><h3 id="指令流程"><a href="#指令流程" class="headerlink" title="指令流程"></a>指令流程</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012948441.png" alt="image-20210621012948441" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621012956809.png" alt="image-20210621012956809" loading="lazy"></p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="片选逻辑"><a href="#片选逻辑" class="headerlink" title="片选逻辑"></a>片选逻辑</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013105265.png" alt="image-20210621013105265" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013114980.png" alt="image-20210621013114980" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013125996.png" alt="image-20210621013125996" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013203667.png" alt="image-20210621013203667" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013214439.png" alt="image-20210621013214439" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013224114.png" alt="image-20210621013224114" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20210621013251597.png" alt="image-20210621013251597" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://www.blog.yln956.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://www.blog.yln956.top/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://www.blog.yln956.top/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-04-19T02:36:29.000Z</published>
    <updated>2021-09-03T05:56:52.717Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ZSB：这实际上有好蓝吗？用心听，拉有什么好蓝度呢？</p><p>龙哥推荐的计算机网络复习，TTTTQQQQLLLL<a href="https://www.runoob.com/w3cnote/summary-of-network.html">点这里</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h2><p><strong>第一阶段：从单个网络 ARPANET 向互联网发展的过程。</strong></p><ul><li><p>internet 和 Internet 的区别</p></li><li><p>internet泛指由多个计算机网络互连而成的网络。 </p></li><li><p>Internet是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络</p></li></ul><p><strong>第二阶段：建成了三级结构的互联网。(Internet 网)</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612220539089.png" alt="image-20210612220539089" loading="lazy"></p><p>**第三阶段：逐渐形成了多层次 ISP 结构的互联网。 **</p><p><strong>出现了互联网服务提供者 ISP (Internet Service Provider)。</strong></p><ul><li><p>传统的三网：电信网，有线电视网，计算机网络</p></li><li><p>ISP 也分成为不同层次的 ISP：主干 ISP、地区 ISP 和 本地 ISP。</p></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612220748352.png" alt="image-20210612220748352" loading="lazy"></p><h2 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h2><p>从因特网的工作方式上看，可以划分为以下的两大块（也称两类子网）：<br>(1) <strong>边缘部分</strong> :由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。<br>(2) <strong>核心部分</strong> :由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612222340989.png" alt="image-20210612222340989" loading="lazy"></p><p>在网络边缘的端系统中运行的程序之间的通信方式通常可划分为两大类：</p><ul><li><strong>客户—服务器方式（C/S 方式</strong>），即Client/Server方式 </li><li><strong>对等方式（P2P 方式）</strong> 即 Peer-to-Peer方式 ，不区分哪一个是服务请求方还是服务提供方</li></ul><p>在网络核心部分起特殊作用的是<strong>路由器(router)**。<br>路由器是实现</strong>分组交换(packet switching)**的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。（分组转发使用的是存储转发）</p><p><strong>三种交换的比较</strong> </p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612223656307.png" alt="image-20210612223656307" loading="lazy"></p><h2 id="几种不同类别的网络"><a href="#几种不同类别的网络" class="headerlink" title="几种不同类别的网络"></a>几种不同类别的网络</h2><p><strong>按照网络的作用范围进行分类</strong></p><ul><li><p>**广域网 WAN (Wide Area Network)**：作用范围通常为几十到几千公里。</p></li><li><p>**城域网 MAN (Metropolitan Area Network)**：作用距离约为  5 ~ 50 公里。</p></li><li><p><strong>局域网 LAN (Local Area Network)</strong> ：局限在较小的范围（如 1 公里左右）。</p></li><li><p><strong>个人区域网 PAN (Personal Area Network)</strong> ：范围很小，大约在 10 米左右。</p><p><strong>按照网络的使用者进行分类</strong></p></li><li><p><strong>公用网 (public network)</strong><br>按规定交纳费用的人都可以使用的网络。因此也可称为公众网。</p></li><li><p><strong>专用网 (private network)</strong><br>为特殊业务工作的需要而建造的网络。</p></li></ul><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><ol><li><p><strong>速率</strong></p><ol><li>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。</li><li>Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</li><li>速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等</li></ol></li><li><p><strong>速率往往是指额定速率或标称速率。</strong></p></li><li><p><strong>带宽</strong> </p><ol><li>​    “带宽”(bandwidth)本来（通讯领域）是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。</li><li>现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。</li></ol><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612225008810.png" alt="image-20210612225008810" loading="lazy">  </p></li><li><p><strong>时延(计算简单来看就是时间等于路程除以速度)</strong></p><ol><li><strong>发送时延</strong>    发送数据时，数据帧从结点进入到传输媒体所需要的时间。</li><li>也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。(结合书后题,会计算) </li></ol><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612225642291.png" alt="image-20210612225642291" loading="lazy"></p><ol><li><strong>传播时延</strong>    电磁波在信道中需要传播一定的距离而花费的时间（介质的物理性质决定P）。 (结合书后题,会计算) </li><li>信号发送速率和信号在信道上的传播速率是完全不同的概念。</li></ol><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612225833379.png" alt="image-20210612225833379" loading="lazy"></p><ol><li><p>处理时延    交换结点为存储转发而进行一些必要的处理所花费的时间。 </p></li><li><p>排队时延    结点缓存队列中分组排队所经历的时延。</p></li><li><p>排队时延的长短往往取决于网络中当时的通信量。</p></li><li><p>数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和： </p><p><strong>总时延 = 发送时延+传播时延+处理时延+排队时延</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612232740724.png" alt="image-20210612232740724" loading="lazy"></p></li></ol></li><li><p><strong>往返时间RTT</strong></p><ol><li>送发送方发送开始，到发送方收到接收方的确认消息的时间。</li><li>ping</li></ol></li><li><p><strong>利用率</strong></p><ol><li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零</li></ol></li><li><p><strong>网络利用率则是全网络的信道利用率的加权平均值。</strong></p><ol start="3"><li>信道利用率并非越高越好。 </li></ol></li><li><p>所有的对网络的衡量指标</p><ol><li>速率</li><li>带宽</li><li>吞吐率</li><li>时延</li><li>时延带宽积</li><li>往返时间 RTT</li><li>利用率</li></ol></li></ol><h2 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h2><ul><li>网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。 </li><li>协议是控制两个对等实体间通信规则的集合</li><li>要实现本层协议，必须要下一层提供的服务</li><li>协议组成要素:<br><strong>语法</strong>:数据与控制信息的结构或格式<br><strong>语义</strong>:需要发出何种控制信息，完成何种动作以及做出何种响应<br><strong>同步</strong>:事件实现顺序的详细说明</li></ul><h2 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210612234125144.png" alt="image-20210612234125144" loading="lazy"></p><h2 id="总结五层协议"><a href="#总结五层协议" class="headerlink" title="总结五层协议"></a>总结五层协议</h2><p><strong>1）物理层（Physical Layer）</strong></p><p>激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p><strong>2）数据链路层（Data Link Layer）</strong></p><p>数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>有关数据链路层的重要知识点：</p><ul><li><strong>1&gt; 数据链路层为网络层提供可靠的数据传输；</strong></li><li><strong>2&gt; 基本数据单位为帧；</strong></li><li><strong>3&gt; 主要的协议：以太网协议；</strong></li><li><strong>4&gt; 两个重要设备名称：网桥和交换机。</strong></li><li><strong>3）网络层（Network Layer）</strong></li></ul><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是”路径选择、路由及逻辑寻址”。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p><ul><li><strong>1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</strong></li><li><strong>2&gt; 基本数据单位为IP数据报；</strong></li><li><strong>3&gt; 包含的主要协议：</strong></li><li><strong>IP协议（Internet Protocol，因特网互联协议）;</strong></li><li><strong>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</strong></li><li><strong>ARP协议（Address Resolution Protocol，地址解析协议）;</strong></li><li><strong>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</strong></li><li><strong>4&gt; 重要的设备：路由器。</strong></li></ul><p><strong>4）传输层（Transport Layer）</strong></p><p>第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。 传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。 网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。 有关网络层的重点：</p><ul><li><strong>1&gt; 传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</strong></li><li><strong>2&gt; 包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；</strong></li><li><strong>3&gt; 重要设备：网关。</strong></li></ul><p><strong>5）应用层</strong></p><p>为操作系统或网络应用程序提供访问网络服务的接口。</p><p>会话层、表示层和应用层重点：</p><ul><li><strong>1&gt; 数据传输基本单位为报文；</strong></li><li><strong>2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</strong></li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="物理层的主要任务"><a href="#物理层的主要任务" class="headerlink" title="物理层的主要任务"></a>物理层的主要任务</h2><p>主要任务：确定与传输媒体的接口的一些特性。</p><ul><li><strong>机械特性</strong> ：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等（举例：网卡，网线）。</li><li><strong>电气特性</strong>：指明在接口电缆的各条线上出现的电压的范围。</li><li><strong>功能特性</strong>：指明某条线上出现的某一电平的电压表示何种意义。</li><li><strong>过程特性</strong> ：指明对于不同功能的各种可能事件的出现顺序（例如：网卡的同步信号 连续8个高电压）。 </li></ul><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><ul><li><strong>传输媒体也称为传输介质或传输媒介</strong>，它就是数据传输系统中在发送器和接收器之间的物理通路。</li><li>传输媒体可分为两大类，即导引型传输媒体和非导引型传输媒体。</li><li><strong>在导引型传输媒体中</strong>，电磁波被导引沿着固体媒体（铜线或光纤）传播。<strong>有线</strong></li><li><strong>非导引型传输媒体就是指自由空间</strong>。在非导引型传输媒体中，电磁波的传输常称为<strong>无线传输</strong>。</li></ul><h2 id="导引型传输媒体-会认图"><a href="#导引型传输媒体-会认图" class="headerlink" title="导引型传输媒体-会认图"></a>导引型传输媒体-会认图</h2><ul><li>双绞线、</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613013735147.png" alt="image-20210613013735147" loading="lazy"></p><ul><li>同轴电缆</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613013828029.png" alt="image-20210613013828029" loading="lazy"></p><ul><li>光缆<br>光纤是光纤通信的传输媒体。<br>由于可见光的频率非常高，约为 10^8 MHz 的量级，因此一个光纤通信系统的传输带宽远远大于目前其他各种传输媒体的带宽。</li></ul><h2 id="几个术语"><a href="#几个术语" class="headerlink" title="几个术语"></a>几个术语</h2><ul><li>数据(data)——运送消息的实体。</li><li>信号(signal)——数据的电气的或电磁的表现。 </li><li>“模拟的”(analogous)——代表消息的参数的取值是连续的。 </li><li>“数字的”(digital)——代表消息的参数的取值是离散的。 </li><li>码元(code)——在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形</li><li>信噪比：信号的平均功率和噪声的平均功率之比</li></ul><h2 id="信道的通信方式"><a href="#信道的通信方式" class="headerlink" title="信道的通信方式"></a>信道的通信方式</h2><ul><li><p><strong>单向通信（单工通信）</strong>——只能有一个方向的通信而没有反方向的交互。</p></li><li><p><strong>双向交替通信（半双工通信</strong>）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</p></li><li><p><strong>双向同时通信（全双工通信）</strong>——通信的双方可以同时发送和接收信息。</p></li><li><p>调制分为两大类：</p><ul><li><strong>基带调制</strong>：仅对基带信号的波形进行变换，使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为**编码 (coding)**。</li><li><strong>带通调制</strong>：使用载波 (carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道） 。<br>带通信号 ：经过载波调制后的信号。 </li></ul></li><li><p>最基本的二元制调制方法有以下几种：（带通调制）</p><ul><li>**调幅(AM)**：载波的振幅随基带数字信号而变化。 （比如0或1对应的有无载波输出）</li><li>**调频(FM)**：载波的频率随基带数字信号而变化。（比如0，1对应两不同的频率F1,F2）</li><li><strong>调相(PM)</strong> ：载波的初始相位随基带数字信号而变化。（比如0，1对应的相位度为0度,180度）</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613014611627.png" alt="image-20210613014611627" loading="lazy"></p></li><li><p>常用编码方式（基带调制）</p><ul><li>不归零制：正电平代表 1，负电平代表 0。</li><li>归零制：正脉冲代表 1，负脉冲代表 0。</li><li>曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。</li><li>差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613014827306.png" alt="image-20210613014827306" loading="lazy"></p><ul><li>从信号波形中可以看出，曼彻斯特 (Manchester) 编码和差分曼彻斯特编码产生的信号频率比不归零制高。</li><li>从自同步能力来看，不归零制不能从信号波形本身中提取信号时钟频率（这叫作没有自同步能力），而曼彻斯特编码和差分曼彻斯特编码具有<strong>自同步能力</strong>。</li></ul></li></ul><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><ul><li><p>频分复用FDM</p><ul><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li><li><strong>波分复用是一种特殊的频分复用</strong></li></ul></li><li><p>时分复用TDM</p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧</strong>（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li></ul></li><li><p>码分复用 CDM</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA  (Code Division Multiple Access)。</li><li>每一个比特时间划分为 m 个短的间隔，称为<strong>码片</strong>(chip)。</li></ul></li><li><p>码片序列</p><ul><li>每个站被指派一个唯一的 m bit 码片序列。<br>如发送比特 1，则发送自己的 m bit 码片序列。<br>如发送比特 0，则发送该码片序列的二进制反码。<br>例如，S 站的 8 bit 码片序列是 00011011。<br>发送比特 1 时，就发送序列 00011011，<br>发送比特 0 时，就发送序列 11100100。<br>S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1)<br>不要背，会做书后的计算题！！！ 就是ABCD站那个发了1,0的那道题。 </li><li><strong>相乘为1，发了1，相乘为-1，发送了0.相乘为0，没发送信息</strong><ul><li>任何一个码片向量和该码片向量自己的规格化内积都是 1 。</li><li>一个码片向量和该码片反码的向量的规格化内积值是 –1。 </li><li>两个不同站的码片序列正交，就是向量 S 和T 的规格化内积 (inner product) 等于 0</li></ul></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613102453110.png" alt="image-20210613102453110" loading="lazy"></p></li></ul><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><p> <strong>数据链路和帧</strong> </p><ul><li>链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。<ul><li>一条链路只是一条通路的一个组成部分。</li></ul></li><li>数据链路(data link) 除了物理线路+协议</li></ul><p><strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li><strong>点对点信道</strong>。这种信道使用一对一的点对点通信方式。</li><li><strong>广播信道。</strong>这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。 </li></ul><p><strong>三个基本问题</strong></p><ul><li><strong>封装成帧</strong>：就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。</li><li><strong>透明传输</strong>：解决在数据中出现控制字符的问题。</li><li><strong>差错控制</strong>：检测数据帧是否出错，一般采用CRC校验。</li></ul><p><strong>循环冗余检验的原理</strong></p><ul><li>在数据链路层传送的帧中，广泛使用了<strong>循环冗余检验</strong> CRC 的检错技术。</li><li>在发送端，先把数据划分为组。假定每组 k 个比特。 </li><li>假设待传送的一组数据 M = 101001（现在 k = 6）。我们在 M 的后面再添加供差错检测用的 n 位冗余码一起发送。</li><li><strong>课后题！！！！只能检测一个bit错误！！接收方余数不是0就是有错！检测错误不等于可靠！</strong>  </li><li>用二进制的模 2 运算进行 2n 乘 M 的运算，这相当于在 M 后面添加 n 个 0。</li><li>得到的 (k + n) 位的数除以事先选定好的长度为 (n + 1) 位的除数 P，得出商是 Q 而余数是 R，余数 R 比除数 P 少 1 位，即 R 是 n 位。 </li><li>将余数 R 作为冗余码拼接在数据 M 后面发送出去。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613103530294.png" alt="image-20210613103530294" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613103555620.png" alt="image-20210613103555620" loading="lazy"></p><h2 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议 PPP"></a>点对点协议 PPP</h2><p><strong>特点</strong> </p><ul><li>现在全世界使用得最多的数据链路层协议是点对点协议 PPP (Point-to-Point Protocol)。</li><li>用户使用拨号电话线接入因特网时，一般都是使用 PPP 协议。</li><li>PPP 是面向<strong>字节</strong>的，所有的 PPP 帧的长度都是整数字节。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613112038863.png" alt="image-20210613112038863" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613112106842.png" alt="image-20210613112106842" loading="lazy"></p><p><strong>载波监听多点接入/碰撞检测  CSMA/CD</strong> </p><ul><li>CSMA/CD 表示 Carrier Sense Multiple Access with Collision Detection。</li><li>CS：载波监听</li><li>MA：多点接入</li><li>CD：碰撞检测(冲突检测)</li></ul><p><strong>争用期</strong></p><ul><li>最先发送数据帧的站，在发送数据帧后至多经过时间 2 （两倍的端到端往返时延）就可知道发送的数据帧是否遭受了碰撞。</li><li>以太网的端到端往返时延 2 称为争用期，或碰撞窗口。</li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613115744546.png" alt="image-20210613115744546" loading="lazy"></li></ul><p><strong>最短有效帧长</strong></p><ul><li><strong>发送最短帧要经过争用期这段时间，此时间段内没有检测到碰撞，才能肯定这次发送不会发生碰撞。小于最短帧的都是无效帧。</strong></li><li>以太网规定了<strong>最短有效帧长为 64 字节</strong>，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧。 </li><li>题3-20，会计算最短有效帧</li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613115928039.png" alt="image-20210613115928039" loading="lazy"></li></ul><p><strong>48 位的 MAC 地址</strong></p><ul><li>在局域网中，<strong>硬件地址</strong>又称为<strong>物理地址</strong>，或 <strong>MAC 地址</strong>。 </li><li>IEEE 的<strong>注册管理机构 RA</strong> 负责向厂家分配地址字段的**前三个字节(即高位 24 位)**。</li><li>地址字段中的<strong>后三个字节(即低位 24 位)由厂家自行指派</strong>，称为<strong>扩展标识符</strong>，必须保证生产出的适配器没有重复地址。</li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613122356447.png" alt="image-20210613122356447" loading="lazy"></li></ul><p><strong>适配器检查 MAC 地址</strong> </p><ul><li>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址.<ul><li>如果是发往本站的帧则收下，然后再进行其他的处理。</li><li>否则就将此帧丢弃，不再进行其他的处理。</li></ul></li><li>“发往本站的帧”包括以下三种帧： <ul><li>单播(unicast)帧（一对一）</li><li>广播(broadcast)帧（一对全体）</li><li>多播(multicast)帧（一对多）</li></ul></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613122453312.png" alt="image-20210613122453312" loading="lazy"></p><p><strong>无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li><li>对于检查出的无效 MAC 帧就简单地丢弃。以太网不负责重传丢弃的帧。 </li></ul><p><strong>按照以下自学习算法处理收到的帧和建立交换表、</strong></p><ul><li>交换机收到一帧后先进行自学习。查找交换表中与收到帧的源地址有无相匹配的项目。<ul><li>如没有，就在交换表中增加一个项目（源地址、进入的接口和有效时间）。</li><li>如有，则把原有的项目进行更新（进入的接口或有效时间）。</li></ul></li><li>转发帧。查找交换表中与收到帧的目的地址有无相匹配的项目。<ul><li>如没有，则向所有其他接口（进入的接口除外）转发。</li><li>如有，则按交换表中给出的接口进行转发。</li><li>若交换表中给出的接口就是该帧进入交换机的接口，则应丢弃这个帧（因为这时不需要经过交换机进行转发）。</li></ul></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613122817907.png" alt="image-20210613122817907" loading="lazy"></p><p><strong>交换机使用了生成树协议</strong></p><ul><li>IEEE 802.1D 标准制定了一个生成树协议 STP  (Spanning Tree Protocol)。</li><li>其要点是：不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而防止交换回路。</li></ul><p><strong>用集线器组成更大的局域网都在一个碰撞域中</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613123406177.png" alt="image-20210613123406177" loading="lazy"></p><p><strong>网桥和集线器（或转发器）不同</strong></p><ul><li>集线器在转发帧时，不对传输媒体进行检测。</li><li>网桥在转发帧之前必须执行 CSMA/CD 算法。<ul><li>若在发送过程中出现碰撞，就必须停止发送和进行退避。</li></ul></li></ul><p><strong>独占传输媒体的带宽</strong></p><ul><li>对于普通 10 Mb/s 的共享式以太网，若共有 N 个用户，则每个用户占有的平均带宽只有总带宽(10 Mb/s)的 N 分之一。</li><li>使用以太网交换机时，虽然在每个接口到主机的带宽还是 10 Mb/s，但由于一个用户在通信时是独占而不是和其他网络用户共享传输媒体的带宽，因此对于拥有 N 对接口的交换机的总容量为 Nx10 Mb/s。这正是交换机的最大优点</li></ul><p><strong>交换器和集线器的不同</strong></p><ul><li> 数据转发给哪个端口,交换机基于MAC地址作出决定,集线器根本不做决定,而是将数据转发给所有端口.数据在交换机内部可以采用独立路径,在集线器中所有的数据都可以在所有的路径上流动. </li><li> 集线器所有端口共享一个带宽,交换机每个端口有自己独立的带宽,互不影响. </li><li> 集线器所有端口均是同一个冲突域,而交换机每个端口下是一 个独立的冲突域</li></ul><p><strong>星形以太网 10BASE-T</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613124256239.png" alt="image-20210613124256239" loading="lazy"></p><p><strong>10BASE-T 以太网在局域网中的统治地位</strong></p><ul><li>使用无屏蔽双绞线，采用星形拓扑。</li><li>每个站需要用两对双绞线，分别用于发送和接收。</li><li>10BASE-T 的通信距离稍短，每个站到集线器的距离不超过 100 m。</li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>网络层向上只提供<strong>简单灵活的、无连接的、尽最大努力交付</strong>的数据报服务。</p><p>网络层就是尽力转发数据，干这件事它已经精疲力尽了，别压榨了，别压榨了。</p><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><ul><li>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有三个协议：</li><li><strong>地址解析协议 ARP    (Address Resolution Protocol)</strong></li><li><strong>网际控制报文协议 ICMP   (Internet Control Message Protocol)</strong></li><li><strong>网际组管理协议 IGMP   (Internet Group Management Protocol)</strong></li></ul><p>网际层的 IP 协议及配套协议</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613134653206.png" alt="image-20210613134653206" loading="lazy"></p><p><strong>网络互相连接起来要使用一些中间设备</strong></p><ul><li>中间设备又称为中间系统或中继(relay)系统。<ul><li>物理层中继系统：转发器(repeater)。</li><li>数据链路层中继系统：网桥或桥接器(bridge)。</li><li>网络层中继系统：路由器(router)。</li><li>网桥和路由器的混合物：桥路器(brouter)。</li><li>网络层以上的中继系统：网关(gateway)-通过高层协议转换链接两个不兼容的系统（无线，有线；以太网，光纤）。</li></ul></li></ul><p><strong>分类 IP 地址</strong></p><ul><li><p>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号 net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id，它标志该主机（或路由器）。</p></li><li><p>两级的 IP 地址可以记为：</p><ul><li><p>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}  </p><ul><li>::= 代表“定义为”</li><li><strong>分类的IP,一般都使用的点分十进制记法，因此看第一个十进制（A类:0-127,B类:128-191,C类:192-223）</strong></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613135718978.png" alt="image-20210613135718978" loading="lazy"></p></li></ul></li></ul><p>一般不使用的特殊的 IP 地址</p><ul><li><strong>网络字段全0表示自己，不能作为目的地址，全1表示广播，不能作为源地址</strong></li><li>一般全0地址和全1地址都不可用作主机地址。因此C类地址最大可用主机数为：<br>254个（255-1个全1广播）</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613140500109.png" alt="image-20210613140500109" loading="lazy"></p><h2 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613140830509.png" alt="image-20210613140830509" loading="lazy"></p><p><strong>地址解析协议 ARP</strong></p><ul><li>ARP：IP–&gt;MAC，IP地址与MAC地址的映射问题</li><li>RARP:MAC–&gt;IP</li></ul><h2 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h2><ul><li>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。</li><li>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613153523563.png" alt="image-20210613153523563" loading="lazy"></p><p> IP 数据报分片</p><ul><li>一数据报的总长度为 3820 字节，其数据部分的长度为 3800 字节（使用固定首部），需要分片为长度不超过 1420 字节的数据报片。</li><li>因固定首部长度为 20 字节，因此每个数据报片的数据部分长度不能超过 1400 字节。</li><li>于是分为 3 个数据报片，其数据部分的长度分别为 1400、1400 和 1000 字节。</li><li>原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613154758221.png" alt="image-20210613154758221" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613160125209.png" alt="image-20210613160125209" loading="lazy"></p><p>特定主机路由 </p><ul><li>这种路由是为特定的目的主机指明一个路由。</li><li>采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。</li></ul><p>默认路由(default route)</p><ul><li>路由器还可采用默认路由以减少路由表所占用的空间和搜索路由表所用的时间。</li><li>这种转发方式在一个网络只有很少的对外连接时是很有用的。</li><li>默认路由在主机发送 IP 数据报时往往更能显示出它的好处。</li><li>如果一个主机连接在一个小网络上，而这个网络只用一个路由器和因特网连接，那么在这种情况下使用默认路由是非常合适的。 </li></ul><p>划分子网的基本思路 </p><ul><li>划分子网纯属一个单位内部的事情。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号借用若干个位作为子网号 subnet-id，而主机号 host-id 也就相应减少了若干个位。</li><li>IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}    </li></ul><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><ul><li>从一个 IP 数据报的首部并无法判断源主机或目的主机所连接的网络是否进行了子网划分。</li><li>使用子网掩码(subnet mask)可以找出 IP 地址中的子网部分。  </li></ul><p><strong>IP 地址的各字段和子网掩码</strong> </p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613160938972.png" alt="image-20210613160938972" loading="lazy"></p><p><strong>(IP 地址) AND (子网掩码) =网络地址</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613161014651.png" alt="image-20210613161014651" loading="lazy"></p><p><strong>已知 IP 地址是 141.14.72.24，子网掩码是 255.255.192.0。试求网络地址。</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613161130599.png" alt="image-20210613161130599" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613161341842.png" alt="image-20210613161341842" loading="lazy"></p><p><strong>不同的子网掩码得出相同的网络地址。但不同的掩码的效果是不同的。</strong> </p><h2 id="在划分子网的情况下路由器转发分组的算法-不用死记"><a href="#在划分子网的情况下路由器转发分组的算法-不用死记" class="headerlink" title="在划分子网的情况下路由器转发分组的算法(不用死记)"></a>在划分子网的情况下路由器转发分组的算法(不用死记)</h2><p>(1) 从收到的分组的首部提取目的 IP 地址 D。<br>(2) 先用各网络的子网掩码和 D 逐位相“与”，看是否和相应的网<br>     络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，<br>     执行 (3)。<br>(3) 若路由表中有目的地址为 D 的特定主机路由，则将分组传送给<br>      指明的下一跳路由器；否则，执行 (4)。<br>(4) 对路由表中的每一行，将子网掩码和 D 逐位相“与”。若结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行 (5)。<br>(5) 若路由表中有一个默认路由，则将分组传送给路由表中所指明<br>     的默认路由器；否则，执行 (6)。<br>(6) 报告转发分组出错。</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163257432.png" alt="image-20210613163257432" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163311735.png" alt="image-20210613163311735" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163331781.png" alt="image-20210613163331781" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163341651.png" alt="image-20210613163341651" loading="lazy"></p><h2 id="IP-编址问题的演进"><a href="#IP-编址问题的演进" class="headerlink" title="IP 编址问题的演进"></a>IP 编址问题的演进</h2><ul><li>二级地址分类–&gt;三级地址(划分子网)-&gt;无分类域间路由选择 CIDR (Classless Inter-Domain Routing)。 </li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163436702.png" alt="image-20210613163436702" loading="lazy"></p><p>CIDR 地址块</p><ul><li>128.14.32.0/20 表示的地址块共有 212 个地址（因为斜线后面的 20 是网络前缀的位数，所以这个地址的主机号是 12 位）。</li><li>这个地址块的起始地址是 128.14.32.0。</li><li>在不需要指出地址块的起始地址时，也可将这样的地址块简称为“/20 地址块”。</li><li><strong>128.14.32.0/20 地址块的最小地址：128.14.32.0</strong></li><li><strong>128.14.32.0/20 地址块的最大地址：128.14.47.255</strong></li><li><strong>全 0 和全 1 的主机号地址一般不使用。</strong></li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613163740800.png" alt="image-20210613163740800" loading="lazy"></p><p>CIDR 记法的其他形式</p><ul><li>10.0.0.0/10 可简写为 10/10，也就是将点分十进制中低位连续的 0 省略。</li><li>10.0.0.0/10 相当于指出 IP 地址 10.0.0.0 的掩码是 255.192.0.0，即  11111111 11000000 00000000 00000000</li><li>网络前缀的后面加一个星号 * 的表示方法<ul><li> 如 00001010 00*，在星号 * 之前是网络前缀，而星号 * 表示 IP 地址中的主机号，可以是任意值。</li></ul></li></ul><h2 id="CIDR-地址块划分：画二叉树，地址块开始结束，子网掩码，广播地址等，看课后题"><a href="#CIDR-地址块划分：画二叉树，地址块开始结束，子网掩码，广播地址等，看课后题" class="headerlink" title="CIDR 地址块划分：画二叉树，地址块开始结束，子网掩码，广播地址等，看课后题"></a>CIDR 地址块划分：画二叉树，地址块开始结束，子网掩码，广播地址等，看课后题</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613164047240.png" alt="image-20210613164047240" loading="lazy"></p><p>最长前缀匹配</p><ul><li>使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果。 </li><li>应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配(longest-prefix matching)。</li><li>网络前缀越长，其地址块就越小，因而路由就越具体(more specific) 。</li><li>最长前缀匹配又称为<strong>最长匹配</strong>或<strong>最佳匹配</strong>。 </li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613164718510.png" alt="image-20210613164718510" loading="lazy"></p><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><p><strong>网际控制报文协议 ICMP</strong></p><ul><li>为了提高 IP 数据报交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。</li><li>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。</li><li>ICMP 不是高层协议，而是 IP 层的协议。</li><li>ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。</li></ul><p><strong>ICMP 报文的种类</strong></p><ul><li>ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。 </li><li>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。</li></ul><p><strong>ICMP 差错报告报文共有 5 种</strong></p><ul><li><strong>终点不可达 （出现丢包就发这个）</strong></li><li>源点抑制(Source quench)  </li><li>时间超过 </li><li>参数问题 </li><li>改变路由（重定向）(Redirect)</li></ul><p><strong>不应发送 ICMP 差错报告报文的几种情况</strong></p><ul><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文。</li><li>对具有特殊地址（如127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</li></ul><p><strong>ICMP的应用举例PING (Packet InterNet Groper)</strong> </p><ul><li>PING 用来测试两个主机之间的连通性。</li><li>PING 使用了 ICMP 回送请求与回送回答报文。</li><li>PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。</li></ul><p><strong>Traceroute 的原理</strong></p><p><strong>追踪IP数据包所经过的路由器的命令。<br>原理是利用ICMP的差错报文，类型为时间超过设置IP首部TTL值为n，当到达第n路由器时，路由器会因为超时而丢弃这个IP报文，并发回一个ICMP差错报告给源端，源端就 可以从这个报告的IP首部取到源IP地址即路由器的地址</strong></p><p><strong>从路由算法的自适应性考虑</strong></p><ul><li><strong>静态</strong>路由选择策略——人工配置。 </li><li><strong>动态</strong>路由选择策略—-路由算法自动生成</li></ul><p><strong>自治系统 AS(Autonomous System)</strong></p><ul><li>自治系统 AS 的定义：在单一的技术管理下的一组路由器，使用一致的路由选择策略。</li></ul><p><strong>自治系统和内部网关协议、外部网关协议</strong> </p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613170138986.png" alt="image-20210613170138986" loading="lazy"></p><h2 id="RIP-协议"><a href="#RIP-协议" class="headerlink" title="RIP 协议"></a>RIP 协议</h2><p><strong>RIP 协议的三个要点</strong></p><ul><li>仅和相邻路由器交换信息。 </li><li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 </li><li>按固定的时间间隔交换路由信息，例如，每隔 30 秒。</li><li>特点：好消息传得快,坏消息传得慢</li></ul><p><strong>“距离”的定义</strong></p><ul><li>从一路由器到直接连接的网络的距离定义为 1。</li><li>从一个路由器到非直接连接的网络的距离定义为所经过的路由器数加 1。</li><li>RIP 协议中的“距离”也称为“跳数”(hop count)，因为每经过一个路由器，跳数就加 1。</li><li>这里的“距离”实际上指的是“最短距离”， </li><li>RIP 认为一个好的路由就是它通过的路由器的数目少，即“距离短”。</li><li>RIP 允许一条路径最多只能包含 15 个路由器。</li><li>“距离”的最大值为16 时即相当于不可达。可见 RIP 只适用于小型互联网。</li><li>RIP 不能在两个网络之间同时使用多条路由。RIP 选择一个具有最少路由器的路由（即最短路由），哪怕还存在另一条高速(低时延)但路由器较多的路由。  </li></ul><p><strong>距离向量算法—不要背会做题</strong></p><p>收到相邻路由器（其地址为 X）的一个 RIP 报文：<br>(1) 先修改此 RIP 报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。<br>(2) 对修改后的 RIP 报文中的每一个项目，重复以下步骤：<br>若项目中的目的网络不在路由表中，则把该项目加到路由表中。<br>    否则<br>       若下一跳字段给出的路由器地址是同样的，则把收到的项    目    替换原路由表中的项目。<br>       否则<br>           若收到项目中的距离小于路由表中的距离，则进行更新，<br>    否则，什么也不做。<br>(3) 若 3 分钟还没有收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为16（距离为16表示不可达）。<br>(4) 返回。</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613171113452.png" alt="image-20210613171113452" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613171146840.png" alt="image-20210613171146840" loading="lazy"></p><h2 id="内部网关协议-OSPF-Open-Shortest-Path-First"><a href="#内部网关协议-OSPF-Open-Shortest-Path-First" class="headerlink" title="内部网关协议 OSPF(Open Shortest Path First)"></a>内部网关协议 OSPF(Open Shortest Path First)</h2><ul><li>开放最短路径优先 OSPF (Open Shortest Path First)是为克服 RIP 的缺点在 1989 年开发出来的。</li><li>OSPF 的原理很简单，但实现起来却较复杂。</li><li>“开放”表明 OSPF 协议不是受某一家厂商控制，而是公开发表的。</li><li>“最短路径优先”是因为使用了 Dijkstra 提出的最短路径算法 SPF</li><li>采用分布式的链路状态协议 (link state protocol)。 </li><li>注意：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</li></ul><p><strong>三个要点</strong></p><ul><li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li><li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<ul><li>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 </li></ul></li><li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。  </li></ul><p><strong>链路状态数据库(link-state database)</strong> </p><ul><li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</li><li>这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的（这称为链路状态数据库的同步）。</li><li>OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。OSPF 的更新过程收敛得快是其重要优点。  </li></ul><h2 id="RIP和OSPF的不同"><a href="#RIP和OSPF的不同" class="headerlink" title="RIP和OSPF的不同"></a>RIP和OSPF的不同</h2><ul><li>RIP是一种距离向量协议，而OSPF是一种链路状态协议</li><li>RIP只跟邻居路由器交换信息，OSPF是泛洪</li><li>RIP最大距离16，只适合小规模网络。OSPF适合大规模网络</li><li>RIP仅和<strong>相邻路由器</strong>交换信息；OSPF向本自治系统<strong>所有路由器</strong>发送消息，由于路由器发送的链路状态信息只能单向传送，OSPF不存在“坏消息传播得慢”的问题，更新过程的收敛性得到保证。</li><li>RIP路由器交换的信息是当前<strong>本路由器</strong>所知道的全部信息，即自己现在的路由表。OSPF发送的信息是与本路由器<strong>相邻的所有路由器</strong>的链路状态 ，只涉及与相邻路由器的连通状态，与整个互联网的规模无关。</li><li>RIP：<strong>按固定的时间间隔</strong>交换路由信息（当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息）。OSPF：在网络刚刚启动计算第一次路由表时，一定发路由信息。<strong>只有当链路状态发生变化时</strong>，路由器才能向所有路由器用洪泛法发送此消息</li><li>RIP协议使用运输层的用户数据包UDP来进行传送 。OSPF的位置在网络层，直接用IP数据报传送</li></ul><h2 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h2><ul><li>BGP 是不同自治系统的路由器之间交换路由信息的协议。</li><li>BGP交换时自治系统间的可达性</li></ul><h2 id="典型的路由器的结构"><a href="#典型的路由器的结构" class="headerlink" title="典型的路由器的结构"></a>典型的路由器的结构</h2><ul><li>“转发”(forwarding) 就是路由器根据转发表将用户的 IP 数据报从合适的端口转发出去。</li><li>“路由选择”(routing) 则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。</li><li>路由表是根据路由选择算法得出的。而转发表是从路由表得出的。</li><li>在讨论路由选择的原理时，往往不去区分转发表和路由表的区别。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613173355797.png" alt="image-20210613173355797" loading="lazy"></p><p><strong>分组到路由器后路由器的操作</strong></p><ul><li>达到的数据包依次经过物理层解析，数据链路层解析（判断MAC地址是否是本路由器），网络层解析；</li><li>网络层先取出TTL减去1，如果为0则扔掉该报文并发送一个ICMP差错报文回源端；如果不为0，则取出目的IP进行查转发表工作，依照查到的转发表端口进行转发到对应目的端口；</li><li>目的端口把该IP数据包封装为MAC帧后发送到物理层线路上。</li></ul><h2 id="网际组管理协议-IGMP-和多播路由选择协议"><a href="#网际组管理协议-IGMP-和多播路由选择协议" class="headerlink" title="网际组管理协议 IGMP 和多播路由选择协议"></a>网际组管理协议 IGMP 和多播路由选择协议</h2><p><strong>IP多播需要两种协议</strong></p><ul><li>为了使路由器知道多播组成员的信息，需要利用网际组管理协议 IGMP (Internet Group Management Protocol)。</li><li>连接在局域网上的多播路由器还必须和因特网上的其他多播路由器协同工作，以便把多播数据报用最小代价传送给所有的组成员。这就需要使用多播路由选择协议。 </li></ul><h2 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h2><p><strong>虚拟专用网 VPN</strong></p><ul><li>利用公用的互联网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网VPN (Virtual Private Network)。</li><li>“专用网”为本机构的主机用于机构内部通信的网络，比外网安全。</li><li>由于 IP 地址的紧缺，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到互联网并不很安全，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP/IP 协议，那么从原则上讲，对于这些仅在机构内部使用的计算机就可以由本机构自行分配其 IP 地址。</li></ul><p><strong>本地地址与全球地址</strong></p><ul><li>本地地址——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</li><li>全球地址——全球唯一的 IP 地址，必须向互联网的管理机构申请。 </li><li>问题：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</li><li>解决：RFC 1918 指明了一些专用地址 (private address)。专用地址只能用作本地地址而不能用作全球地址。在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发。</li></ul><p><strong>RFC 1918 指明的专用 IP 地址</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613180503412.png" alt="image-20210613180503412" loading="lazy"></p><p><strong>RFC 1918 指明的专用地址(private address)</strong> </p><ul><li><strong>10.0.0.0 到 10.255.255.255</strong></li><li><strong>172.16.0.0 到 172.31.255.255</strong></li><li><strong>192.168.0.0 到 192.168.255.255</strong></li><li>这些地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信。</li><li>专用地址只能用作本地地址而不能用作全球地址。在因特网中的所有路由器对目的地址是专用地址的数据报一律不进行转发。 </li></ul><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p><strong>IPv6 的基本首部</strong></p><ul><li>IPv6 仍支持无连接的传送。</li><li>所引进的主要变化如下：<ul><li>更大的地址空间。IPv6 将地址从 IPv4 的 32 位 增大到了 128 位。 </li><li>扩展的地址层次结构。 </li><li>灵活的首部格式。 IPv6 定义了许多可选的扩展首部。</li><li>改进的选项。 IPv6 允许数据报包含有选项的控制信息，其选项放在有效载荷中。</li></ul></li></ul><p><strong>IPv6 数据报的一般形式</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613180007736.png" alt="image-20210613180007736" loading="lazy"></p><p><strong>从 IPv4 向 IPv6 过渡</strong></p><ul><li>两种向 IPv6 过渡的策略：<ul><li>使用双协议栈</li><li>使用隧道技术</li></ul></li></ul><p><strong>ICMPv6</strong></p><ul><li><strong>地址解析协议 ARP 和网际组管理协议 IGMP 协议的功能都已被合并到 ICMPv6 中。</strong> </li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613180142181.png" alt="image-20210613180142181" loading="lazy"></li></ul><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="应用进程之间的通信"><a href="#应用进程之间的通信" class="headerlink" title="应用进程之间的通信"></a>应用进程之间的通信</h2><ul><li>两个主机进行通信实际上就是两个主机中的应用进程互相通信。 </li><li>应用进程之间的通信又称为端到端的通信。 </li><li>运输层的一个很重要的功能就是<strong>复用</strong>和<strong>分用</strong>。</li><li>应用层不同进程的报文通过不同的端口向下交到运输层，再往下就共用网络层提供的服务。</li></ul><h2 id="运输层的两个主要协议"><a href="#运输层的两个主要协议" class="headerlink" title="运输层的两个主要协议"></a>运输层的两个主要协议</h2><p>TCP/IP 的运输层有两个不同的协议：</p><ul><li>(1) 用户数据报协议 UDP                 (User Datagram Protocol)</li><li>(2) 传输控制协议 TCP         (Transmission Control Protocol)</li></ul><h2 id="三类端口"><a href="#三类端口" class="headerlink" title="三类端口"></a>三类端口</h2><ul><li><strong>熟知端口</strong>，数值一般为 0~1023。</li><li><strong>登记端口号</strong>，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li><li><strong>客户端口号或短暂端口号</strong>，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。 </li><li>常用熟知端口</li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613193753357.png" alt="image-20210613193753357" loading="lazy"></li></ul><h2 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h2><ul><li>(1) UDP 是无连接的，发送数据之前不需要建立连接，，因此减少了开销和发送数据之前的时延。</li><li>(2) UDP 使用尽最大努力交付(无连接,没有确认)，即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li><li>(3) UDP 是面向报文的。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 一次交付一个完整的报文。</li><li>(4) UDP 没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。很适合多媒体通信的要求。</li><li>(5) UDP 支持一对一、一对多、多对一和多对多的交互通信。</li><li>(6) UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短。</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p><strong>TCP 最主要的特点</strong> </p><ul><li>TCP 是面向连接的运输层协议。</li><li>每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 </li><li>TCP 提供可靠交付的服务。</li><li> TCP 提供全双工通信。</li><li>面向字节流。</li><li>总结：TCP提供面向连接的，可靠的，字节流服务</li></ul><p><strong>套接字 (socket)</strong></p><ul><li><p> 套接字 socket = (IP地址: 端口号)</p></li><li><p>每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定。即：</p></li></ul><p>TCP 连接 ::= {socket1, socket2}   = {(IP1: port1), (IP2: port2)}  </p><h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><p><strong>停止等待协议</strong></p><p>出错就丢弃，超时重传</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613195540737.png" alt="image-20210613195540737" loading="lazy"></p><p><strong>自动重传ARQ</strong></p><ul><li>通常 A 最终总是可以收到对所有发出的分组的确认。如果 A 不断重传分组但总是收不到确认，就说明通信线路太差，不能进行通信。</li><li>使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。</li><li>像上述的这种可靠传输协议常称为自动重传请求 ARQ  (Automatic Repeat reQuest)。</li><li>ARQ 表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组 。</li></ul><p><strong>累积确认</strong></p><ul><li>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。</li><li>累积确认有的优点是：容易实现，即使确认丢失也不必重传。缺点是：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li></ul><p><strong>TCP 可靠通信的具体实现</strong></p><ul><li>TCP 连接的每一端都必须设有两个窗口——一个发送窗口和一个接收窗口。</li><li> TCP 的可靠传输机制用字节的序号进行控制。TCP 所有的确认都是基于序号而不是基于报文段。</li><li> TCP 两端的四个窗口经常处于动态变化之中。</li><li>TCP连接的往返时间 RTT 也不是固定不变的。需要使用特定的算法估算较为合理的重传时间。  </li></ul><p><strong>TCP利用滑动窗口实现流量控制</strong></p><ul><li>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失—接收缓存溢出了。</li><li>流量控制(flow control)就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</li><li>利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。 </li><li><strong>举例</strong></li><li><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613202930715.png" alt="image-20210613202930715" loading="lazy"></li></ul><p><strong>零窗口与持续计时器(作用,死锁的概念与解决方法)</strong></p><ul><li>TCP 为每一个连接设有一个持续计时器。</li><li>只要 TCP 连接的一方收到对方的零窗口通知，就启动持续计时器。</li><li>若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。</li><li>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。</li><li>若窗口不是零，则死锁的僵局就可以打破了。</li></ul><p><strong>拥塞控制与流量控制的关系</strong></p><ul><li>拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</li><li>拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。 </li><li>流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制。 </li><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</li></ul><h2 id="几种拥塞控制方法"><a href="#几种拥塞控制方法" class="headerlink" title="几种拥塞控制方法"></a>几种拥塞控制方法</h2><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a><strong>慢开始和拥塞避免</strong></h3><ul><li>发送方维持一个叫做拥塞窗口 cwnd (congestion window)的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。如再考虑到接收方的接收能力，则发送窗口还可能小于拥塞窗口。</li><li>发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li></ul><p><strong>慢开始算法的原理（从1开始，翻倍增加）</strong></p><ul><li><strong>在主机刚刚开始发送报文段时可先设置拥塞窗口 cwnd = 1，即设置为一个最大报文段 MSS 的数值。</strong></li><li><strong>在每收到一个对新的报文段的确认后，将拥塞窗口加 1，即增加一个 MSS 的数值</strong>。</li><li>用这样的方法逐步增大发送端的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。 </li></ul><p><strong>设置慢开始门限状态变量ssthresh</strong></p><ul><li>慢开始门限 ssthresh 的用法如下：</li><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</li><li>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍，使拥塞窗口 cwnd 按线性规律缓慢增长。</li></ul><p><strong>当网络出现拥塞时</strong></p><ul><li>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有按时收到确认），就要把慢开始门限 ssthresh 设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。</li><li>然后把拥塞窗口 cwnd 重新设置为 1，执行慢开始算法。</li><li>这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。 </li></ul><p><strong>举例</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613205838420.png" alt="image-20210613205838420" loading="lazy"></p><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a><strong>快重传和快恢复</strong></h3><p><strong>快重传</strong></p><ul><li>快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认。这样做可以让发送方及早知道有报文段没有到达接收方。 </li><li>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。 </li><li>不难看出，快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613210400125.png" alt="image-20210613210400125" loading="lazy"></p><p>快恢复算法 </p><ul><li>(1) 当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限 ssthresh 减半。但接下去不执行慢开始算法。 </li><li>(2)由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，即拥塞窗口 cwnd 现在不设置为 1，而是设置为慢开始门限 ssthresh 减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。 </li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613210455306.png" alt="image-20210613210455306" loading="lazy"></p><p><strong>发送窗口的上限值</strong></p><ul><li><p>发送方的发送窗口的上限值应当取为接收方窗口 rwnd 和拥塞窗口 cwnd 这两个变量中较小的一个，即应按以下公式确定：</p><p>发送窗口的上限值  Min [rwnd, cwnd] </p></li><li><p>当 rwnd &lt; cwnd 时，是接收方的接收能力限制发送窗口的最大值。</p></li><li><p>当 cwnd &lt; rwnd 时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul><h2 id="主动队列管理-AQM"><a href="#主动队列管理-AQM" class="headerlink" title="主动队列管理 AQM"></a>主动队列管理 AQM</h2><ul><li>所谓“主动”就是不要等到路由器的队列长度已经达到最大值时才不得不丢弃后面到达的分组。这样就太被动了。应当在队列长度达到某个值得警惕的数值时（即当网络拥塞有了某些拥塞征兆时），就主动丢弃到达的分组</li></ul><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><p><strong>运输连接的三个阶段</strong></p><ul><li>运输连接就有三个阶段，即：连接建立、数据传送和连接释放。运输连接的管理就是使运输连接的建立和释放都能正常地进行。</li><li>连接建立过程中要解决以下三个问题：<ul><li>要使每一方能够确知对方的存在。</li><li>要允许双方协商一些参数（如最大报文段长度，最大窗口大小，服务质量等）。</li><li>能够对运输实体资源（如缓存大小，连接表中的项目等）进行分配。  </li></ul></li></ul><p><strong>客户-服务器方式</strong> </p><ul><li>TCP 连接的建立都是采用客户服务器方式。</li><li>主动发起连接建立的应用进程叫做客户(client)。</li><li>被动等待连接建立的应用进程叫做服务器(server)。 </li></ul><h2 id="TCP-的连接建立与释放"><a href="#TCP-的连接建立与释放" class="headerlink" title="TCP 的连接建立与释放"></a>TCP 的连接建立与释放</h2><h3 id="用三次握手建立-TCP-连接"><a href="#用三次握手建立-TCP-连接" class="headerlink" title="用三次握手建立 TCP 连接"></a>用三次握手建立 TCP 连接</h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613220931223.png" alt="image-20210613220931223" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221000865.png" alt="image-20210613221000865" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221020312.png" alt="image-20210613221020312" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221034299.png" alt="image-20210613221034299" loading="lazy"></p><h3 id="TCP-的连接释放"><a href="#TCP-的连接释放" class="headerlink" title="TCP 的连接释放"></a><strong>TCP 的连接释放</strong></h3><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221150319.png" alt="image-20210613221150319" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221200073.png" alt="image-20210613221200073" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221209041.png" alt="image-20210613221209041" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221217627.png" alt="image-20210613221217627" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221226644.png" alt="image-20210613221226644" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613221242332.png" alt="image-20210613221242332" loading="lazy"></p><p><strong>以上拥塞控制，三次握手建立连接，四次握手断开连接注意每次的标志位，序号和确认号不要背，会做题</strong></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><p><strong>域名系统概述</strong></p><ul><li>许多应用层软件经常直接使用域名系统 DNS (Domain Name System)，但计算机的用户只是间接而不是直接使用域名系统。 </li><li>因特网采用层次结构的命名树作为主机的名字，并使用分布式的域名系统 DNS。</li><li>名字到 IP 地址的解析是由若干个域名服务器程序完成的。域名服务器程序在专设的结点上运行，运行该程序的机器称为域名服务器。</li></ul><p><strong>互联网的域名结构</strong></p><ul><li>互联网采用了层次树状结构的命名方法。</li><li>任何一个连接在互联网上的主机或路由器，都有一个唯一的层次结构的名字，即域名。<br>域名的结构由标号序列组成，各标号之间用点隔开：<pre><code>          … . 三级域名 . 二级域名 . 顶级域名</code></pre></li><li>各标号分别代表不同级别的域名</li></ul><p><strong>因特网的域名空间</strong> </p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613222209599.png" alt="image-20210613222209599" loading="lazy"></p><p><strong>域名服务器有以下四种类型</strong></p><ul><li>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址。<br>顶级域名服务器（即 TLD 服务器）负责管理在该顶级域名服务器注册的所有二级域名。<br>权限域名服务器负责一个区的域名服务器。<br>本地域名服务器：缓存已经访问过的域名对应的IP</li></ul><h2 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h2><p><strong>FTP概述</strong></p><ul><li>文件传送协议 FTP (File Transfer Protocol) 是因特网上使用得最广泛的文件传送协议。</li><li>传输层使用TCP协议，是一种可靠传输协议,因为需要保证文件的传输的可靠,完整,无差错.</li></ul><p><strong>万维网必须解决的问题</strong> </p><ul><li>(1) 怎样标志分布在整个因特网上的万维网文档？<br>使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。<br>使每一个文档在整个因特网的范围内具有唯一的标识符 URL。</li><li>(2) 用何协议实现万维网上各种超链的链接？<br>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。</li><li>(3) 怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？<br>超文本标记语言 HTML (HyperText Markup Language) 使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。 HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。 </li><li>(4) 怎样使用户能够很方便地找到所需的信息？<br>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。 </li></ul><p><strong>URL 的一般形式</strong> </p><ul><li>由以冒号隔开的两大部分组成，并且在 URL 中的字符对大写或小写没有要求。<br>URL 的一般形式是：</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613222348002.png" alt="image-20210613222348002" loading="lazy"></p><h2 id="HTTP-的报文结构"><a href="#HTTP-的报文结构" class="headerlink" title="HTTP 的报文结构"></a>HTTP 的报文结构</h2><p><strong>HTTP 有两类报文：</strong></p><ul><li>请求报文——从客户向服务器发送请求报文。</li><li>响应报文——从服务器到客户的回答。</li><li>由于 HTTP 是面向正文的 (text-oriented)，因此在报文中的每一个字段都是一些 ASCII 码串，因而每个字段的长度都是不确定的。</li></ul><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613222628904.png" alt="image-20210613222628904" loading="lazy"></p><p><strong>HTTP 请求报文的一些方法</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613224332683.png" alt="image-20210613224332683" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613224412579.png" alt="image-20210613224412579" loading="lazy"></p><h2 id="状态码都是三位数字"><a href="#状态码都是三位数字" class="headerlink" title="状态码都是三位数字"></a>状态码都是三位数字</h2><ul><li>1xx 表示通知信息的，如请求收到了或正在进行处理。</li><li>2xx 表示成功，如接受或知道了。</li><li>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。</li><li>4xx 表示客户的差错，如请求中有错误的语法或不能完成。</li><li>5xx 表示服务器的差错，如服务器失效无法完成请求。</li></ul><h2 id="其他应用协议"><a href="#其他应用协议" class="headerlink" title="其他应用协议"></a>其他应用协议</h2><ul><li>发送邮件的协议：SMTP</li><li>读取邮件的协议：POP3 和 IMAP</li><li>动态主机配置协议 DHCP(IPv4地址配置）</li><li>SNMP 使用无连接的 UDP</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>每层的数据单位：</p><ul><li>物理层：bit</li><li>数据链路层：帧</li><li>网络层：分组（报文）</li><li>传输层：TCP报文段，UDP数据报</li></ul></li><li><p>每层的ID</p><ul><li>物理层：无</li><li>数据链路层：MAC地址</li><li>网络层：IP地址</li><li>传输层：PORT端口</li></ul></li></ul><h1 id="所有的作业都是重点！"><a href="#所有的作业都是重点！" class="headerlink" title="所有的作业都是重点！"></a>所有的作业都是重点！</h1><p>所有课上做过的题都是重点！特别是大题！<br>1-17，2-16，3-07，3-20，3-27,3-33,4-10,4-20，4-22,4-37，4-41,5-39</p><h2 id="1-17，"><a href="#1-17，" class="headerlink" title="1-17，"></a>1-17，</h2><p><strong>简单来记，就是时间=路程/速度</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613235236067.png" alt="image-20210613235236067" loading="lazy"></p><h2 id="2-16，"><a href="#2-16，" class="headerlink" title="2-16，"></a>2-16，</h2><p><strong>相乘为0，没发数据，相乘为1发了数据1，相乘为-1，发了数据0</strong></p><p><strong>（原理：码片序列间的正交关系）</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613235424100.png" alt="image-20210613235424100" loading="lazy"></p><h2 id="3-07，"><a href="#3-07，" class="headerlink" title="3-07，"></a>3-07，</h2><p>CRC生成的多项式（转换成2进制数）作为除数（n+1位），要在数据后加上n个0，然后除以这个多项式，得到的余数就是加到数据后传输的数</p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614000250344.png" alt="image-20210614000250344" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614000331626.png" alt="image-20210614000331626" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614000340934.png" alt="image-20210614000340934" loading="lazy"></p><h2 id="3-8"><a href="#3-8" class="headerlink" title="3-8"></a>3-8</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614155227160.png" alt="image-20210614155227160" loading="lazy"></p><h2 id="3-9"><a href="#3-9" class="headerlink" title="3-9"></a>3-9</h2><p><strong>7E-&gt;7D5E</strong></p><p><strong>7D-&gt;7D5D</strong></p><p><strong>小于20-&gt;加个7D</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614155251763.png" alt="image-20210614155251763" loading="lazy"></p><h2 id="3-20"><a href="#3-20" class="headerlink" title="3-20"></a>3-20</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614001323294.png" alt="image-20210614001323294" loading="lazy"></p><h2 id="3-27"><a href="#3-27" class="headerlink" title="3-27,"></a>3-27,</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614002515816.png" alt="image-20210614002515816" loading="lazy"></p><h2 id="3-33"><a href="#3-33" class="headerlink" title="3-33,"></a>3-33,</h2><h2 id="4-10"><a href="#4-10" class="headerlink" title="4-10,"></a>4-10,</h2><p><strong>看第一个十进制位0-127就是A类，128-191就是B类，192-223就是C类</strong></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003602663.png" alt="image-20210614003602663" loading="lazy"></p><h2 id="4-17"><a href="#4-17" class="headerlink" title="4-17"></a>4-17</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210615015343888.png" alt="image-20210615015343888" loading="lazy"></p><h2 id="4-20，"><a href="#4-20，" class="headerlink" title="4-20，"></a>4-20，</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003732814.png" alt="image-20210614003732814" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003748117.png" alt="image-20210614003748117" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003802569.png" alt="image-20210614003802569" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003824218.png" alt="image-20210614003824218" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003837252.png" alt="image-20210614003837252" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003854797.png" alt="image-20210614003854797" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614003904504.png" alt="image-20210614003904504" loading="lazy"></p><h2 id="4-22"><a href="#4-22" class="headerlink" title="4-22,"></a>4-22,</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614004006191.png" alt="image-20210614004006191" loading="lazy"></p><h2 id="4-29"><a href="#4-29" class="headerlink" title="4-29"></a>4-29</h2><h2 id="4-37，"><a href="#4-37，" class="headerlink" title="4-37，"></a>4-37，</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614011455222.png" alt="image-20210614011455222" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614011504530.png" alt="image-20210614011504530" loading="lazy"></p><h2 id="4-41"><a href="#4-41" class="headerlink" title="4-41,"></a>4-41,</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613171113452.png" alt="image-20210613171113452" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210613171146840.png" alt="image-20210613171146840" loading="lazy"></p><h2 id="5-39"><a href="#5-39" class="headerlink" title="5-39"></a>5-39</h2><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614012131768.png" alt="image-20210614012131768" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614012148521.png" alt="image-20210614012148521" loading="lazy"></p><p><img src="/2021/04/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20210614012156689.png" alt="image-20210614012156689" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://www.blog.yln956.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-04-17T15:42:10.000Z</published>
    <updated>2021-09-03T05:56:59.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一个数据模型至少需要描述数据的静态特征、动态特征和（ <strong>完整性约束</strong> ）三项内容。</p><p>(<strong>DB</strong> )是长期存储在计算机内的有组织、可共享的数据集合。 </p><p>关于关系，下列说法中正确的是<br><strong>Ⅰ.关系中的每一个属性都是不可再分解的</strong><br><strong>Ⅱ.关系中不允许出现取值完全相同的元组</strong><br><strong>Ⅲ.可以不考虑关系中各元组的顺序</strong><br><strong>Ⅳ.可以不考虑关系中各属性的顺序</strong></p><p>对现实世界进行第一层抽象的模型，称为（）模型；对现实世界进行第二层抽象的模型，称为（）模型。 <strong>概念，结构/逻辑</strong></p><p>在E-R图中，用来表示属性的图形是（    ） <strong>椭圆形</strong> </p><p>SQL语言中用（ <strong>rollback</strong>）语句实现事务的回滚</p><p>触发器是一种特殊类型的存储过程，它不同于存储过程。</p><p>视图和表不一样，不是在物理上存在的一种数据库对象。</p><p>在SQL语言中的视图VIEW是数据库的（ <strong>外模式</strong>） 。</p><p>下列关于关系数据库的操作特点的说法，正确的是<br>    A. 需要指明操作的要求和操作的实现过程<br>    <strong>B. 需要指明操作的要求，但不需要指明操作的实现过程    √</strong><br>    C. 需要指明操作的实现过程，但不需要指明操作的要求<br>    D. 对操作要求和操作实现过程都不需要指明</p><p>下述对出生日期进行比较的表达式中，正确的是<br>    A. 出生日期 &gt;‘1980/1/1’</p><p>从一个表中筛选数据向另一个已经存在的表添加所用的命令是（ <strong>INSERT…SELECT</strong>    ）。</p><p>若要在基本表中增加一列CN（课程名），可用（ <strong>alter table s add (cn char(8))</strong> ）</p><p>查找表结构用以下哪一项（  <strong>DESC</strong>）</p><p> 在SQL Server中，在表中添加一个新列的正确SQL语句是 <strong>B. ALTER TABLE ADD 新列名 数据类型</strong></p><p>数据类型Numeric(10,4)表示的数据是 <strong>小数点后边有4位数字，小数点前边有6位数字</strong></p><p>TRUNCATE TABLE相当于无条件的DELETE FROM</p><p>数据库的( <strong>完整性</strong>)是 指数据的正确性和相容性。</p><p>数据模型的三要素是<strong>数据结构、数据操作和数据完整性约束</strong></p><p>数据模型的三要素  <strong>数据结构 ，完整性约束，数据操纵</strong></p><p>二维表结构是<strong>关系数据库采用的组织层数据模型</strong></p><p>文件系统具有的数据独立性是(.<strong>设备独立性</strong> )。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre class="line-numbers language-none"><code class="language-none">事务（1）原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。   （2）一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。   （3）隔离性：隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，  必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。   （4）持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。删除操作drop:视图，表table,列columndelete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>from </li><li>join </li><li>on </li><li>where </li><li>group by(开始使用select中的别名，后面的语句中都可以使用)</li><li> avg,sum…. </li><li>having </li><li>select </li><li>distinct </li><li>order by</li><li>limit<br>从这个顺序中我们不难发现，所有的 查询语句都是从from开始执行的，在执行过程中，每个步骤都会为下一个步骤生成一个虚拟表，这个虚拟表将作为下一个执行步骤的输入。 </li></ol><p><strong>第一步：</strong>首先对from子句中的前两个表执行一个笛卡尔乘积，此时生成虚拟表 vt1（选择相对小的表做基础表）。<br><strong>第二步：</strong>接下来便是应用on筛选器，on 中的逻辑表达式将应用到 vt1 中的各个行，筛选出满足on逻辑表达式的行，生成虚拟表 vt2 。<br><strong>第三步：</strong>如果是outer join 那么这一步就将添加外部行，left outer jion 就把左表在第二步中过滤的添加进来，如果是right outer join 那么就将右表在第二步中过滤掉的行添加进来，这样生成虚拟表 vt3 。</p><p><strong>第四步：</strong>如果 from 子句中的表数目多余两个表，那么就将vt3和第三个表连接从而计算笛卡尔乘积，生成虚拟表，该过程就是一个重复1-3的步骤，最终得到一个新的虚拟表 vt3。 </p><p><strong>第五步：</strong>应用where筛选器，对上一步生产的虚拟表引用where筛选器，生成虚拟表vt4，在这有个比较重要的细节不得不说一下，对于包含outer join子句的查询，就有一个让人感到困惑的问题，到底在on筛选器还是用where筛选器指定逻辑表达式呢？on和where的最大区别在于，如果在on应用逻辑表达式那么在第三步outer join中还可以把移除的行再次添加回来，而where的移除的最终的。举个简单的例子，有一个学生表（班级,姓名）和一个成绩表(姓名,成绩)，我现在需要返回一个x班级的全体同学的成绩，但是这个班级有几个学生缺考，也就是说在成绩表中没有记录。为了得到我们预期的结果我们就需要在on子句指定学生和成绩表的关系（学生.姓名=成绩.姓名）那么我们是否发现在执行第二步的时候，对于没有参加考试的学生记录就不会出现在vt2中，因为他们被on的逻辑表达式过滤掉了,但是我们用left outer join就可以把左表（学生）中没有参加考试的学生找回来，因为我们想返回的是x班级的所有学生，如果在on中应用学生.班级=’x’的话，left outer join会把x班级的所有学生记录找回（感谢网友康钦谋__康钦苗的指正），所以只能在where筛选器中应用学生.班级=’x’ 因为它的过滤是最终的。 </p><p><strong>第六步：</strong>group by 子句将中的唯一的值组合成为一组，得到虚拟表vt5。如果应用了group by，那么后面的所有步骤都只能得到的vt5的列或者是聚合函数（count、sum、avg等）。原因在于最终的结果集中只为每个组包含一行。这一点请牢记。 </p><p><strong>第七步：</strong>应用cube或者rollup选项，为vt5生成超组，生成vt6.<br><strong>第八步：</strong>应用having筛选器，生成vt7。having筛选器是第一个也是为唯一一个应用到已分组数据的筛选器。<br><strong>第九步：</strong>处理select子句。将vt7中的在select中出现的列筛选出来。生成vt8. </p><p><strong>第十步：</strong>应用distinct子句，vt8中移除相同的行，生成vt9。事实上如果应用了group by子句那么distinct是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。 </p><p><strong>第十一步：</strong>应用order by子句。按照order_by_condition排序vt9，此时返回的一个游标，而不是虚拟表。sql是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，这个对象包含特定的物理顺序的逻辑组织。这个对象就叫游标。正因为返回值是游标，那么使用order by 子句查询不能应用于表表达式。排序是很需要成本的，除非你必须要排序，否则最好不要指定order by，最后，在这一步中是第一个也是唯一一个可以使用select列表中别名的步骤。 </p><p><strong>第十二步：</strong>应用top选项。此时才返回结果给请求者即用户。 </p><h3 id="一些语句"><a href="#一些语句" class="headerlink" title="一些语句"></a>一些语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">between</span> <span class="token number">30</span> <span class="token operator">and</span> <span class="token number">40</span><span class="token keyword">case</span><span class="token keyword">when</span> 订单状态<span class="token operator">=</span><span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token string">'等待出库'</span><span class="token keyword">when</span> 订单状态<span class="token operator">=</span><span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token string">'已发货'</span><span class="token keyword">when</span> 订单状态<span class="token operator">=</span><span class="token string">'3'</span> <span class="token keyword">then</span> <span class="token string">'已完成'</span><span class="token keyword">end</span>substring<span class="token punctuation">(</span>姓名<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//从第1个字符开始 只截取之后的1个字符</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> 城市<span class="token comment">//去重复</span><span class="token keyword">from</span> 购物者<span class="token keyword">create</span> <span class="token keyword">proc</span> prc_score<span class="token variable">@sno</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">select</span> sname <span class="token keyword">as</span> 姓名<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">as</span> 平均分数<span class="token keyword">from</span> S<span class="token punctuation">,</span>SC<span class="token keyword">where</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno<span class="token operator">and</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span><span class="token variable">@sno</span><span class="token keyword">group</span> <span class="token keyword">by</span> sname<span class="token keyword">end</span><span class="token keyword">exists</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tuser <span class="token keyword">where</span> uid<span class="token operator">=</span><span class="token variable">@uid</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token string">'-1'</span><span class="token keyword">else</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tuser <span class="token keyword">where</span> upwd<span class="token operator">=</span><span class="token variable">@upwd</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token string">'-2'</span>   <span class="token keyword">else</span>     <span class="token keyword">select</span>   <span class="token string">'0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="http://www.blog.yln956.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA</title>
    <link href="http://www.blog.yln956.top/2021/04/17/JAVA/"/>
    <id>http://www.blog.yln956.top/2021/04/17/JAVA/</id>
    <published>2021-04-17T15:41:21.000Z</published>
    <updated>2021-09-03T05:57:06.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><pre class="line-numbers language-none"><code class="language-none">程序不能选择忽略事件。   错java 不能重写在超类中定义的静态方法构造方法可以是静态的数组中的元素可以不是是基元数据类型。比如指针,结构体型在Java 1.8中，“检查异常”必须在程序中处理。Java允许创建不规则数组，即Java多维数组中各行的列数可以不同。( )一个Java类可以不能有多个父类。声明为final的方法不能在子类中被覆盖。一个非抽象类不可以有选择地实现接口的部分抽象方法。    要实现所有，抽象类才能有选择受保护的数据或方法可以由任何包中的子类访问。受保护的数据或方法不可以由不同包中的任何类访问元注解不能用于注解Java程序中的类的成员方法。final类可以有实例，不能拓展子类和父类可以不在一个包中如果方法中发生必检异常，则必须捕获该异常或在其方法头中声明该异常。在Java程序中，不能使用protected来修饰一个类。抽象类是不能实例化的。类及其属性、方法可以同时有一个以上的修饰符来修饰。private 修饰的成员变量或方法的可见范围为当前类。 没有权限修饰符修饰的成员变量或方法的可见范围为当前包。 protected 修饰的成员变量或方法的可见范围是当前包及该类的子类，即可以被同一个包、该类的子类（可以不同包）的方法访问。 public修饰的成员变量或方法可以被所有包中所有类中的方法访问java应用程序经过编译后会产生一个以（.class ）为扩展名的字节码文件,Java应用程序源文件的扩展名为(java )。Java应用程序由若干个类所构成,这些类可以在一个源文件中,也可以分布在若干个源文件中,其中必须有一个源文件含有主类。sizeof不是java关键字abstract修饰抽象类抽象方法，抽象类一定要被继承，抽象方法一定要被重写自动转换次序.byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double定义合法标识符规则： （1）由26个英文字母大小写，0-9 ，_或 $ 组成 （2）数字不可以开头。 （3）不可以使用关键字和保留字，但能包含关键字和保留字 （4）Java中严格区分大小写，长度无限制 （5）标识符不能包含空格class表示___类;类对象__; *.class表示___类文件___; *.java表示__java文件___; java文件编译后是___class;类__文件A.构造方法的主要作用是完成对类的对象的初始化工作B.构造方法的返回类型只能是void型，即在方法名前加void    错C.一般在创建新对象时，系统会自动调用构造方法D.构造方法是类的一种特殊方法，它的方法名必须与类名相同一个Java文件中可以定义有多个class声明，并且类名称可以与文件名称同名(1)final类不能实现任何接口。(2)public接口可以被任何一个类实现。(3)友好类和它所实现的接口必须在一个包里。(4)如果一个类和友好接口在同一个包里，就允许它实现该接口。  13错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>　　　　　　<span class="token keyword">case</span> 值<span class="token operator">:</span>要执行的语句<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>　　　　　　…　　　　　　<span class="token keyword">default</span><span class="token operator">:</span>要执行的语句<span class="token punctuation">;</span>　　　　<span class="token punctuation">&#125;</span><span class="token class-name">Scanner</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>nextLine（）方法返回的是<span class="token class-name">Enter</span>键之前的所有字符，它是可以得到带空格的字符串的。next（）会自动消去有效字符前的空格，只返回输入的字符，不能得到带空格的字符串。    （简单点说，next我只要字，nextLine我啥都要）    <span class="token number">1.</span>十进制转成二进制<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment">//将十进制数转成字符串，例如n=5 ，s = "101"</span><span class="token number">2.</span>将字符串转成整形<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当然s只能是数字类的字符串</span>或者<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>将整形转成字符串<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span><span class="token number">1025</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  直接转成了 <span class="token number">4.</span>将整形转成十六进制的数<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出结果12</span><span class="token number">1</span><span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否是一个字母<span class="token number">2</span><span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否是一个数字字符<span class="token number">3</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否是一个空白字符<span class="token number">4</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否是大写字母<span class="token number">5</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否是小写字母<span class="token number">6</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>指定字母的大写形式<span class="token number">7</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>指定字母的小写形式<span class="token number">8</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回字符的字符串形式，字符串的长度仅为<span class="token number">1</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>value<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转大写</span><span class="token keyword">private</span>  <span class="token class-name">String</span> word<span class="token punctuation">;</span>word<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首字母大写，其他小写</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//0开始到1分隔</span>                <span class="token class-name">String</span> s<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  输入<span class="token number">11</span><span class="token operator">:</span><span class="token number">20</span><span class="token class-name">String</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过":"分隔字符串,x[0]="11",x[1]="20"</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The BMI is %.4f"</span><span class="token punctuation">,</span>BMI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保留四位小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> &#x2F;&#x2F;异常 public static void main(String[] args) &#123;    Scanner sc &#x3D; new Scanner(System.in);    while (sc.hasNext()) &#123;        String choice &#x3D; sc.next();        try &#123;            if (choice.equals(&quot;number&quot;))                throw new NumberFormatException();            else if (choice.equals(&quot;illegal&quot;)) &#123;                throw new IllegalArgumentException();            &#125; else if (choice.equals(&quot;except&quot;)) &#123;                throw new Exception();            &#125; else            break;        &#125;        &#x2F;*这里放置你的答案*&#x2F;        catch(NumberFormatException e) &#123;        System.out.println(&quot;number format exception&quot;);        System.out.println(e);        &#125;        catch(IllegalArgumentException e) &#123;        System.out.println(&quot;illegal argument exception&quot;);        System.out.println(e);        &#125;        catch(Exception e) &#123;        System.out.println(&quot;other exception&quot;);        System.out.println(e);        &#125;    &#125;&#x2F;&#x2F;end while    sc.close();&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">这是别人发的DAY_01<span class="token number">1.</span><span class="token class-name">Java</span>源代码（通过javac编译为）<span class="token operator">-></span>字节码文件<span class="token operator">-></span>执行并运行结果<span class="token number">2.D</span>OS 运行JAVA常见错误：文件名被隐藏——隐藏已知类型的扩展名 这个√取消javac <span class="token operator">+</span>文件名<span class="token operator">+</span>扩展名java<span class="token operator">+</span>类名 不带扩展名<span class="token number">3.</span>path环境变量配置作用：程序执行需要使用外部指令javac<span class="token punctuation">,</span>但是javac指令仅仅能在JDK安装目录下的bin目录下使用。而程序开发的时候，不能将源代码写入JDK的安装目录，因此需要将源程序保存到任意位置的指定目录classpath作用：设定为<span class="token keyword">class</span>文件的目录，使classpath目录中的<span class="token punctuation">.</span><span class="token keyword">class</span>可以在任意目录运行DAY_02<span class="token number">4.</span>关键字全部小写<span class="token keyword">goto</span>和<span class="token keyword">const</span>是保留字<span class="token number">5.</span>包其实就是文件夹，用于把相同类名进行区分类或者接口：每个单词首字母大写 方法变量：从第二个单词开始首字母大写文档注释<span class="token comment">/** **/</span><span class="token number">6.8421</span>码 是bcd一种<span class="token number">7.</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>b1<span class="token operator">+</span>b2<span class="token punctuation">;</span><span class="token comment">//类型提升，将byte转化为Int类型</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//常量相加，先把结果计算出来，然后再转为对应类型</span><span class="token class-name">XJad</span><span class="token operator">:</span>将<span class="token punctuation">.</span><span class="token keyword">class</span>文件反编译为java文件<span class="token number">8.</span>计算机中数据运算都是补码进行的获取<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">130</span>二进制<span class="token operator">-></span>做截取，截成<span class="token keyword">byte</span><span class="token operator">-></span>已知补码求原码其中第三步：补码 <span class="token number">10000010</span><span class="token operator">-></span>反码 <span class="token number">10000001</span> <span class="token operator">-></span> 原码 <span class="token number">11111110</span>由此<span class="token keyword">byte</span> <span class="token number">130</span> 为<span class="token operator">-</span><span class="token number">126</span><span class="token number">9.</span>看程序写结果字符和一个整数相加，<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">98</span>字符串数据和其他数据做<span class="token operator">+</span>，这个<span class="token operator">+</span>是字符串连接符DAY_03 _04<span class="token number">1.</span><span class="token operator">&amp;</span>有<span class="token boolean">false</span>则<span class="token boolean">false</span> <span class="token operator">|</span> 有<span class="token boolean">true</span>则<span class="token boolean">true</span> <span class="token operator">^</span><span class="token punctuation">(</span>异或<span class="token punctuation">)</span> 相同为<span class="token boolean">false</span><span class="token number">2.</span><span class="token class-name">Alt</span><span class="token operator">+</span><span class="token operator">/</span>自动填充函数<span class="token number">3.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>里头可以输出汉字<span class="token class-name">Scanner</span> in  <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"echo:"</span><span class="token operator">+</span>in<span class="token punctuation">.</span><span class="token function">nextline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2+3="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span>）<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span>ctrl<span class="token operator">+</span><span class="token operator">/</span> 注释代码或解开注释<span class="token number">5.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100-"</span><span class="token operator">+</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>要输入两次<span class="token number">6.</span><span class="token keyword">return</span> 不是结束循环，而是结束方法DAY _05<span class="token number">1.</span>数组逆序（元素对调）返回值类型 <span class="token keyword">void</span>！！！（无需返回，<span class="token keyword">void</span>返回的就是数组地址）<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>lenght<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2.</span><span class="token keyword">final</span> <span class="token keyword">int</span> 常量定义<span class="token number">3.</span><span class="token keyword">void</span>类型 没有明确的返回值 直接输出不能够输出调用 赋值调用 因为println不能是空类型<span class="token number">4.</span>数组初始化有动态、静态两种方式，只能任选其一：动态：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  静态：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>arr <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">new</span>可以看成是为arr分配地址<span class="token number">5.</span>栈：存放局部变量栈的特点：用完即释放堆：堆放所有<span class="token keyword">new</span>出来的东西堆的特点：每个都有地址值 都有初始值 使用完毕变成垃圾，没有立即回收，会在空闲时回收<span class="token class-name">Array</span> <span class="token class-name">Index</span> <span class="token class-name">Out</span> of <span class="token class-name">Bound</span> <span class="token class-name">Exception</span><span class="token operator">:</span>数组索引越界<span class="token class-name">Null</span> <span class="token class-name">Pointer</span> <span class="token class-name">Exception</span><span class="token operator">:</span>空指针异常 DAY_06<span class="token number">1</span>、二维数组 定义格式 推荐：数据类型 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>其他：数据类型 数组名<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span>          数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token number">2.</span>一个java文件中写两个类：一个基本的类，一个测试类在测试类（含主函数）中编译<span class="token class-name">Java</span>文件，会将该类所涉及的所有类都编译成<span class="token keyword">class</span>报错实参形参长度不同，一定是没有给一定数量的参数或者压根没有给参数<span class="token number">3.</span>main 方法储存在栈里头，然后在堆里储存类的代码，最后调用在方法区的方法DAY_07<span class="token number">1.</span>成员变量与局部变量的区别成员变量在类中方法外 局部变量在定义中或方法声明上成员变量在堆内存，局部变量在栈内存成员变量随着对象的创建而存在，局部变量随着方法调用存在成员变量有默认初始化值，局部变量必须定义赋值然后才能使用<span class="token number">2.</span>类型包括基本数据类型、引用类型（数组、类、接口）  形式参数的改变直接影响实际参数（如果是引用类型的话）  方法里头调用一个类，此时传进去的是类的地址<span class="token number">3.</span>匿名对象：没有名字的对象 可以作为实际参数传递  <span class="token keyword">new</span> student<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>不适合多次调用，用完被垃圾回收器回DAY_08<span class="token number">1.</span>在同一个文件夹下，类定义在一个文件还是两个文件下相同<span class="token number">2.</span>构造代码块在构造函数之前执行，且出现在类中的成员位置局部代码块用于限定变量的声明周期 静态代码块与构造代码块类似，只是用<span class="token keyword">static</span>修饰了构造代码块只需要在代码外面有一个大括号，在一个类中代码无法在成员变量的位置直接执行例如：<span class="token keyword">class</span> demo<span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>中的输出是无法执行的<span class="token number">3.</span>开发的原则：低耦合，高内聚 耦合：类与类之间的关系 内聚：自己完成事件的能力<span class="token number">4.</span>子类不能继承父类的私有变量和私有方法，即只能继承父类所有非私有的成员<span class="token number">5.</span>举例输出子类局部、成员、继承的父类变量<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用本类成员变量的构造方法，<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用父类的构造方法 同理，<span class="token keyword">super</span><span class="token punctuation">.</span>方法，<span class="token keyword">this</span><span class="token punctuation">.</span>方法<span class="token number">6.</span>子类所有构造方法默认会访问父类的【空参数】构造方法 子类初始化之前一定要先完成父类的初始化<span class="token number">7.</span>父类如果只有一个含参构造函数，那么默认的无参构造函数会消失因此要在父类加入一个无参构造函数；或者使用<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用父类的含参构造函数或者通过<span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用一个访问了父类构造方法的成员方法 而且<span class="token keyword">this</span> <span class="token keyword">super</span>必须在第一个语句上<span class="token number">8.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>······；<span class="token punctuation">&#125;</span>方法的重写子类不能访问权限比父类更低 比如不可以子类为<span class="token keyword">void</span> 父类为<span class="token keyword">public</span>父类用静态方法，子类也必须用静态方法重写<span class="token class-name">Day</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">1</span>、<span class="token keyword">final</span> 可以修饰类、方法、变量，此时父类的功能不能被覆盖最终类不能被继承 <span class="token keyword">final</span>的方法 叫覆盖、重写、复写<span class="token keyword">final</span>修饰基本类型：值不能发生改变 修饰引用类型：引用地址不能发生改变<span class="token number">2</span>、多态：有继承关系、有方法重写、有父类引用指向子类对象子类可以访问父类的变量，但是父类不能访问子类的变量 多态中成员变啦领编译运行看左边成员方法的编译看左边，运行看右边弊端：不能使用子类特有的功能向下转型：把 <span class="token class-name">Zi</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Zi</span><span class="token punctuation">)</span> f f能转化为zi<span class="token number">3</span>、抽象类具有构造方法，但是不能实例化<span class="token number">4</span>、接口没有构造方法 接口方法不能有主体ctrl shitf f 格式化 ctrl shitf o 导包<span class="token class-name">Integer</span><span class="token punctuation">.</span>toHexString 整数转为十六进制<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#125;</span>DAY <span class="token number">12</span><span class="token number">1</span>、字符串一旦被赋值，就不能改变 <span class="token class-name">String</span> s 值不能变，但是引用s可以变<span class="token number">2</span>、<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>创建<span class="token number">2</span>个对象<span class="token punctuation">,</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span>创建<span class="token number">1</span>个对象<span class="token number">3</span>、<span class="token operator">==</span> 比较引用对象，是比较地址，equals默认是地址，但是<span class="token class-name">String</span>改写后 判断内容相等<span class="token number">4</span>、字符串相加：如果是变量，先开空间再拼接，如果是常量，先加然后在常量池寻找 有就返回<span class="token number">5</span>、字符串内容为空 <span class="token class-name">String</span> s  <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>字符串对象为空 <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token number">6</span>、<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 比较字符串内容是否相同，区分大小写<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 比较自妇产内容是否相同，忽略大小写<span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 判断大字符串中是否包含小字符串<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 判断字符串是否以某个指定的字符串开头<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 判断字符串是否为空<span class="token number">7</span>、<span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> getBytes 把字符串转换为字节数组<span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 把字符串转换为字符数组<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">)</span> 把字符数组转换为字符串string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 把字符串转成小写compareTo 函数 按字典顺序比较两个字符串<span class="token number">8</span>、<span class="token class-name">Arrays</span><span class="token punctuation">.</span>toString（arr）把arr转成字符串 <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>数组排序 <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>  <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> number <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token operator">-></span><span class="token class-name">String</span><span class="token class-name">String</span><span class="token operator">-></span><span class="token class-name">Int</span><span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">9</span>、<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>十进制转到二进制 <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 转到八进制十进制转到其他进制： <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num，rad<span class="token punctuation">)</span>其他进制转到十进制：<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span>rad<span class="token punctuation">)</span><span class="token number">10</span>、<span class="token keyword">try</span><span class="token punctuation">&#123;</span>可能出现的问题<span class="token punctuation">&#125;</span><span class="token keyword">catch</span>（异常名 变量比如：<span class="token class-name">ParseException</span> e）<span class="token punctuation">&#123;</span>针对问题的处理<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>（<span class="token keyword">finally</span><span class="token punctuation">&#123;</span>释放资源<span class="token punctuation">&#125;</span>）<span class="token number">11</span>、<span class="token class-name">Exception</span> e 所有异常的父类 <span class="token function">simpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:MM:ss"</span><span class="token punctuation">)</span><span class="token number">12</span>、如果要自己写一个异常类 需要继承自<span class="token class-name">Exception</span> 或者 继承自<span class="token class-name">RuntimeException</span>字符串考点spllit方法 抽象类不能实例化 异常处理机制 数组的定义 回文 二进制 三角函数 随机数 栈、队列 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JAVA" scheme="http://www.blog.yln956.top/categories/JAVA/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-04-17T15:40:14.000Z</published>
    <updated>2021-09-03T05:56:58.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>对于给定的n个元素，可以构造出的逻辑结构有<strong>集合、线性、树、图</strong>四种。</p><p> 一个算法具有5个特性：<strong>_有穷_、_确定_、_可行_、_有0个或多个输入_和_有一个或多个输出_。</strong></p><p>对算法设计的4个要求是<strong><em>正确_、_可读_、_健壮_和_效率与低存储要求</em></strong>。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201226101009754.png" alt="image-20201226101009754" loading="lazy"></p><p>1、对线性表的基本操作有哪些？</p><p>答：</p><p>1、构造空线性表；</p><p>2、销毁线性表；</p><p>3、获取线性表表长；</p><p>4、判断线性表是否空表；</p><p>5、访问线性表中第i个元素；</p><p>6、获取线性表中第1个满足某关系的元素e的位置；</p><p>7、在线性表中第i个元素前（或后）插入新元素；</p><p>8、将线性表中第i个元素删除。</p><h3 id="数组，栈，队列"><a href="#数组，栈，队列" class="headerlink" title="数组，栈，队列"></a>数组，栈，队列</h3><p>8、表达式23+((12<em>3-2)/4+34</em>5/7)+108/9的后缀表达式是<strong><em>23 12 3<em>2-4/34 5</em>7/++108 9 /+</em></strong>。</p><p><strong>画树或者直接写  左根右→左右根</strong></p><p>13、设循环队列用数组A[1..M]表示，队首、队尾指针分别是FRONT和TAIL，判定队满的条件为<strong>_(TAIL+1)%M==FRONT%M_。</strong></p><p>14、设Q[0..N-1]为循环队列，其头、尾指针分别为P和R，则队Q中当前所含元素个数为<strong><em>(R-P+N)%N</em></strong>。</p><p>设数组a[1..50,1..80]的基地址为2000，每个元素占2个存储单元，若以行序为主序顺序存储，则元素a[45,68]的存储地址为___9174__；若以列序为主序顺序存储，则元素a[45,68]的存储地址为___8788__。</p><p><strong>行：（44 * 80 + 67） * 2 + 2000= 9174         列：（67 * 50 +44） * 2 + 2000 = 8788</strong></p><p>18、n阶对称矩阵a满足a[i][j]=a[j][i],i,j=1..n,，用一维数组t[1..m]存储(按行向存储左下三角)时，t的长度为<strong><em>n(n+1)/2</em></strong>， 当</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201226142157850.png" alt="image-20201226142157850" loading="lazy"></p><p>设矩阵A= <img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps4.png" alt="img" loading="lazy"></p><p>（1）若将A视为对称矩阵，画出对其压缩存储的存储表；</p><p>（2）若将A视为稀疏矩阵，画出其三元表形式压缩存储表；</p><p>（3）若将A视为稀疏矩阵，画出A的十字链表结构。</p><p>（1）</p><table><thead><tr><th>2</th><th>0</th><th>0</th><th>0</th><th>3</th><th>0</th><th>4</th><th>0</th><th>0</th><th>0</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>（2）</p><table><thead><tr><th>i</th><th>1</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>j</td><td>1</td><td>4</td><td>3</td><td>2</td><td>1</td></tr><tr><td>v</td><td>2</td><td>4</td><td>3</td><td>3</td><td>4</td></tr></tbody></table><p>（3）</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps6.png" alt="img" loading="lazy"></p><p>24、已知广义表A=(9，7，(8，10，(99))，12)，试用求表头和表尾的操作Head( )和Tail( )将原子元素99从A中取出来。</p><p>答：Head(Head(Tail(Tail(Head(Tail(Tail(A)))))))。</p><p><strong>head取头，返回单个元素(不带括号)，tail取尾（除头取的元素以外的其他元素），返回集合元素（带括号）</strong></p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201226143828172.png" alt="image-20201226143828172" loading="lazy"></p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>取一块连续的内存空间，在存储每个结点的同时，各自都附加一个记录其父结点位置的变量。</p><p>在树结构中，除了树根外，每个结点都只有一个父结点（又叫“双亲结点”）。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2-1FS015503O53.png" alt="img" loading="lazy"></p><h4 id="孩子表示法（邻接表）"><a href="#孩子表示法（邻接表）" class="headerlink" title="孩子表示法（邻接表）"></a>孩子表示法（邻接表）</h4><p>将树中的每个结点的孩子结点排列成一个线性表，用链表存储起来。对于含有 n 个结点的树来说，就会有 n 个单链表，将 n 个单链表的头指针存储在一个线性表中，这样的表示方法就是孩子表示法。</p><blockquote><p>如果结点没有孩子（例如叶子结点），那么它的单链表为空表。</p></blockquote><p>例如，使用孩子表示法存储图 1 （A），存储效果如图 2：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2-1FS0155F5a9.png" alt="img" loading="lazy"></p><p>图 2 孩子表示法</p><p>使用孩子表示法存储的树结构，正好和双亲表示法相反，适用于查找某结点的孩子结点，不适用于查找其父结点。可以将两种表示方法合二为一，存储效果如图 3：</p><h4 id="孩子兄弟表示法（二叉链）"><a href="#孩子兄弟表示法（二叉链）" class="headerlink" title="孩子兄弟表示法（二叉链）"></a>孩子兄弟表示法（二叉链）</h4><p>使用链式存储结构存储普通树。链表中每个结点由 3 部分组成：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2-1FS0155TD42.png" alt="img" loading="lazy"></p><p>图 4 结点构成</p><p>其中孩子指针域，表示指向当前结点的第一个孩子结点，兄弟结点表示指向当前结点的下一个兄弟结点。</p><p>通过孩子兄弟表示法，普通树转化为了二叉树，所以孩子兄弟表示法又被称为“二叉树表示法”或者“二叉链表表示法”。</p><p>例如，用孩子兄弟表示法表示图 1 （A）的普通树，存储结果为：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2-1FS0160020200.png" alt="img" loading="lazy"></p><p>1、已知一棵度为3的树有2个度为1的结点，3个度为2的结点，4个度为3的结点，则该树有<strong>__</strong><strong>12</strong>__个叶结点。</p><p><strong>B:边数，N：结点数</strong></p><p><strong>n=b+1    n=n0+n1+n2+n3=n1+2<em>n2+3 <em>n3+1→ n=n2+2 <em>n3+1</em></em>        **3+2</em>4+1</strong></p><p>6、已知一棵二叉树的中序序列是DBEAFIHCG，后序序列是DEBHIFGCA，画出这棵二叉树。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps7.png" alt="img" loading="lazy"></p><p>中缀式a+b<em>3+4</em>(c-d)对应的前缀式为________，若a=1, b=2, c=3, d=4，则后缀式db/cc<em>a-b</em>+的运算结果为________。</p><p>14、设一棵二叉树的前序遍历序列为ABDFCEGH，中序遍历序列为BFDAGEHC</p><p>(1)画出这棵二叉树。</p><p>(2)画出这棵二叉树的后序线索树。</p><p>(3)将这棵二叉树转换成对应的树（或森林)</p><p><strong>线索树先写出序列，无左孩子就指向前驱，无右孩子就指向后继</strong></p><p>FDBGHECA</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps14-1608971064985.png" alt="img" loading="lazy"></p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps15-1608971064986.png" alt="img" loading="lazy">                <img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps16-1608971064986.png" alt="img" loading="lazy"></p><p>15、将下列由三棵树组成的森林转换为二叉树。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps17-1608971064986.png" alt="img" loading="lazy"></p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps18-1608971064986.png" alt="img" loading="lazy"></p><h4 id="树转换二叉树"><a href="#树转换二叉树" class="headerlink" title="树转换二叉树"></a><strong>树转换二叉树</strong></h4><p>（1）加线。在所有兄弟结点之间加一条连线。</p><p>（2）去线。树中的每个结点，只保留它与第一个孩子结点的连线，删除它与其它孩子结点之间的连线。</p><p>（3）层次调整。以树的根节点为轴心，将整棵树顺时针旋转一定角度，使之结构层次分明。（注意第一个孩子是结点的左孩子，兄弟转换过来的孩子是结点的右孩子）</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2012110416594150.jpg" alt="img" loading="lazy"></p><p>口诀：兄弟相连，长兄为父，孩子靠左。</p><p>核心：左孩子，右兄弟          </p><h4 id="森林转换二叉树"><a href="#森林转换二叉树" class="headerlink" title="森林转换二叉树"></a>森林转换二叉树</h4><p>（1）把每棵树转换为二叉树。</p><p>（2）第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右子树，用线连接起来。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2012110417004247.jpg" alt="img" loading="lazy"></p><h4 id="二叉树转树"><a href="#二叉树转树" class="headerlink" title="二叉树转树"></a><strong>二叉树转树</strong></h4><p>是树转换为二叉树的逆过程。还原结点A的孩子，结点A的左孩子开始，一直向右走，这些结点就是结点A的孩子，遇见顺序就是它们作为结点A孩子的顺序。</p><p>（1）加线。若某结点X的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子结点、右孩子的右孩子的右孩子结点…，都作为结点X的孩子。将结点X与这些右孩子结点用线连接起来。</p><p>（2）去线。删除原二叉树中所有结点与其右孩子结点的连线。</p><p>（3）层次调整。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2012110417011138.jpg" alt="img" loading="lazy"></p><h4 id="二叉树转森林"><a href="#二叉树转森林" class="headerlink" title="二叉树转森林"></a><strong>二叉树转森林</strong></h4><p>假如一棵二叉树的根结点有右孩子，则这棵二叉树能够转换为森林，否则将转换为一棵树。在二叉树种A有右子树上向右的一连串结点都是A的兄弟，那么就把兄弟分离，A的每个兄弟结点作为森林中树的根结点。</p><p>（1）从根结点开始，若右孩子存在，则把与右孩子结点的连线删除。再查看分离后的二叉树，若其根结点的右孩子存在，则连线删除…。直到所有这些根结点与右孩子的连线都删除为止。</p><p>（2）将每棵分离后的二叉树转换为树。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2012110417014911.jpg" alt="img" loading="lazy"></p><p><strong>哈夫曼树编码，左0右1</strong></p><h4 id="哈夫曼树HT的存储结构的初态和终态"><a href="#哈夫曼树HT的存储结构的初态和终态" class="headerlink" title="哈夫曼树HT的存储结构的初态和终态"></a>哈夫曼树HT的存储结构的初态和终态</h4><p>18、已知下列字符A、B、C、D、E、F、G的权值分别为3、12、7、4、2、8、11，试填写出其对应哈夫曼树HT的存储结构的初态和终态。</p><p>表18-1  HT初态</p><table><thead><tr><th>下标值</th><th>数据域</th><th>weight</th><th>parent</th><th>lchild</th><th>rchild</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>3</td><td>0</td><td>0</td><td>0</td></tr><tr><td>2</td><td>B</td><td>12</td><td>0</td><td>0</td><td>0</td></tr><tr><td>3</td><td>C</td><td>7</td><td>0</td><td>0</td><td>0</td></tr><tr><td>4</td><td>D</td><td>4</td><td>0</td><td>0</td><td>0</td></tr><tr><td>5</td><td>E</td><td>2</td><td>0</td><td>0</td><td>0</td></tr><tr><td>6</td><td>F</td><td>8</td><td>0</td><td>0</td><td>0</td></tr><tr><td>7</td><td>G</td><td>11</td><td>0</td><td>0</td><td>0</td></tr><tr><td>8</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>9</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>10</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>11</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>12</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>13</td><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>表18-2  HT终态（书上的结果）</p><table><thead><tr><th>下标值</th><th>数据域</th><th>weight</th><th>parent</th><th>lchild</th><th>rchild</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>3</td><td>8</td><td>0</td><td>0</td></tr><tr><td>2</td><td>B</td><td>12</td><td>12</td><td>0</td><td>0</td></tr><tr><td>3</td><td>C</td><td>7</td><td>10</td><td>0</td><td>0</td></tr><tr><td>4</td><td>D</td><td>4</td><td>9</td><td>0</td><td>0</td></tr><tr><td>5</td><td>E</td><td>2</td><td>8</td><td>0</td><td>0</td></tr><tr><td>6</td><td>F</td><td>8</td><td>10</td><td>0</td><td>0</td></tr><tr><td>7</td><td>G</td><td>11</td><td>11</td><td>0</td><td>0</td></tr><tr><td>8</td><td></td><td>5</td><td>9</td><td>1</td><td>5</td></tr><tr><td>9</td><td></td><td>9</td><td>11</td><td>4</td><td>8</td></tr><tr><td>10</td><td></td><td>15</td><td>12</td><td>3</td><td>6</td></tr><tr><td>11</td><td></td><td>20</td><td>13</td><td>7</td><td>9</td></tr><tr><td>12</td><td></td><td>27</td><td>13</td><td>2</td><td>10</td></tr><tr><td>13</td><td></td><td>47</td><td>0</td><td>11</td><td>12</td></tr></tbody></table><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps3.png" alt="img" loading="lazy"></p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>7、在图G的邻接表表示中，每个顶点邻接表中所含的结点数（即该顶点的链表结点），对于无向图来说等于该顶点的<strong><em>度</em></strong>；对于有向图来说等于该顶点的<strong><em>出度</em></strong>。</p><p>8、在有向图的邻接矩阵表示中，计算第I个顶点入度的方法是<strong><em>第I列非零元的个数</em></strong>。</p><h4 id="图的邻接矩阵和邻接表"><a href="#图的邻接矩阵和邻接表" class="headerlink" title="图的邻接矩阵和邻接表"></a>图的邻接矩阵和邻接表</h4><p>9、请用邻接矩阵和邻接表表示法画出下图G的存储结构。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps10.png" alt="img" loading="lazy"></p><p>邻接矩阵：<img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps11.png" alt="img" loading="lazy"></p><p>邻接表：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps12.png" alt="img" loading="lazy"></p><h4 id="深度优先遍历-DFS-和广度优先遍历-BFS"><a href="#深度优先遍历-DFS-和广度优先遍历-BFS" class="headerlink" title="深度优先遍历(DFS)和广度优先遍历(BFS)"></a>深度优先遍历(DFS)和广度优先遍历(BFS)</h4><p><strong>深度优先遍历(DFS)</strong>　<strong>在此我想用一句话来形容 “不到南墙不回头”。</strong></p><p>11、下面的邻接表表示一个给定的无向图，给出从顶点v4开始，对图用深度优先搜索法进行遍历时的顶点序列<strong><em>v4, v2, v1, v3, v5, v6</em></strong>；给出从顶点v4开始，对图用广度优先搜索法进行遍历时的顶点序列<strong><em>v4, v2, v3, v6, v1, v5</em></strong>。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps17-1609049024682.png" alt="img" loading="lazy"></p><p>图示为：<img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps18-1609049024683.png" alt="img" loading="lazy"></p><p>12、给出下图G：</p><p>（1）画出G的邻接表表示图；</p><p>（2）根据你画出的邻接表，以顶点1为根，画出G的深度优先生成树和广度优先生成树。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps31.png" alt="img" loading="lazy"></p><p>（1）邻接表表示图</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps32.png" alt="img" loading="lazy"></p><p>（2）深度优先生成树为：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps33.png" alt="img" loading="lazy"></p><p>广度优先生成树为：</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps34.png" alt="img" loading="lazy"></p><h4 id="最小生成树（普里姆算法和克鲁斯卡尔算法）"><a href="#最小生成树（普里姆算法和克鲁斯卡尔算法）" class="headerlink" title="最小生成树（普里姆算法和克鲁斯卡尔算法）"></a>最小生成树（普里姆算法和克鲁斯卡尔算法）</h4><p>13、<strong>Prim（普里姆）算法</strong>适用于求<strong><em>稠密图</em></strong>的网的最小生成树；<strong>Kruskal（克鲁斯卡尔）算法</strong>适用于求<strong><em>稀疏图</em></strong>的网的最小生成树。</p><p><strong>Prim（普里姆）算法：从某点出发遍历周围最小权值的边，直到遍历完所有点，边连线不能形成环</strong></p><p><strong>Kruskal（克鲁斯卡尔）算法：从权值最小的边开始，一直遍历最小权值的边，直到遍历完所有点，边连线不能形成环</strong></p><p>16、在拓扑分类中，拓扑序列的最后一个顶点必定是_<strong>出度为0</strong>_的顶点。</p><p><strong>拓扑排列，从出度为零的点开始选择</strong></p><h4 id="最短路径（过程）"><a href="#最短路径（过程）" class="headerlink" title="最短路径（过程）"></a>最短路径（过程）</h4><p>17、已知一图如下图所示：</p><p>（1）写出该图的两个拓扑排序（升序、降序）；</p><p>（2）以1为源点，4为终点，给出所有事件允许发生的最早时间和最晚时间，并给出关键路径；</p><p>（3）求顶点1到其余各顶点的最短路径。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps35.png" alt="img" loading="lazy"></p><p>（1）拓扑排序升序：1, 5, 6, 2, 7, 3, 8, 4；降序：1, 5, 6, 7, 8, 2, 3, 4</p><p>（2）关键路径</p><table><thead><tr><th>顶点</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>Ve</td><td>0</td><td>30</td><td>50</td><td>65</td><td>10</td><td>17</td><td>25</td><td>35</td></tr><tr><td>Vl</td><td>0</td><td>30</td><td>50</td><td>65</td><td>15</td><td>27</td><td>44</td><td>59</td></tr></tbody></table><p>关键路径为1, 2, 3, 4</p><p><strong>（3）最短路径：</strong></p><table><thead><tr><th>顶点集</th><th>D[2]</th><th>D[3]</th><th>D[4]</th><th>D[5]</th><th>D[6]</th><th>D[7]</th><th>D[8]</th><th>P[2]</th><th>P[3]</th><th>P[4]</th><th>P[5]</th><th>P[6]</th><th>P[7]</th><th>P[8]</th></tr></thead><tbody><tr><td>1</td><td>30</td><td>-1</td><td>60</td><td>10</td><td>-1</td><td>-1</td><td>-1</td><td>1</td><td>-1</td><td>1</td><td>1</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>1,5</td><td>25</td><td>-1</td><td>60</td><td></td><td>17</td><td>-1</td><td>-1</td><td>5</td><td>-1</td><td>1</td><td></td><td>5</td><td>-1</td><td>-1</td></tr><tr><td>1,5,6</td><td>20</td><td>33</td><td>60</td><td></td><td></td><td>25</td><td>-1</td><td>6</td><td>6</td><td>1</td><td></td><td></td><td>6</td><td>-1</td></tr><tr><td>1,5,6,2</td><td></td><td>33</td><td>60</td><td></td><td></td><td>25</td><td>-1</td><td></td><td>6</td><td>1</td><td></td><td></td><td>6</td><td>-1</td></tr><tr><td>1,5,6,2,7</td><td></td><td>31</td><td>28</td><td></td><td></td><td></td><td>35</td><td></td><td>7</td><td>7</td><td></td><td></td><td></td><td>7</td></tr><tr><td>1,5,6,2,7,4</td><td></td><td>31</td><td></td><td></td><td></td><td></td><td>35</td><td></td><td>7</td><td></td><td></td><td></td><td></td><td>7</td></tr><tr><td>1,5,6,2,7,4,3</td><td></td><td></td><td></td><td></td><td></td><td></td><td>35</td><td></td><td></td><td></td><td></td><td></td><td></td><td>7</td></tr><tr><td>1,5,6,2,7,4,3,8</td><td>20</td><td>31</td><td>28</td><td>10</td><td>17</td><td>25</td><td>35</td><td>6</td><td>7</td><td>7</td><td>1</td><td>5</td><td>6</td><td>7</td></tr></tbody></table><p>注：1、表中未填项即是其上面那一项，因为已经找到了最短路径，故相应数组元素不再再修改；</p><p>2、未列D[1]和P[1]，值均为0，自己到自己。</p><p>18、已知一图如下图所示：</p><p>（1）写出该图的两个拓扑排序（升序、降序）；</p><p>（2）以0为源点，11为终点，计算出所有事件和活动的最早发生时间和最晚发生时间，并给出关键路径；</p><p>（3）求顶点1到其余各顶点的<strong>最短路径</strong>。</p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps36.png" alt="img" loading="lazy"></p><p>（1）拓扑排序升序：0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11；降序：0, 3, 4, 8, 2, 7, 10, 1, 5, 6, 9, 11</p><p>（2）关键路径</p><table><thead><tr><th>顶点</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>Ve</td><td>0</td><td>2</td><td>2</td><td>4</td><td>9</td><td>5</td><td>9</td><td>7</td><td>12</td><td>13</td><td>13</td><td>20</td></tr><tr><td>Vl</td><td>0</td><td>4</td><td>2</td><td>5</td><td>10</td><td>7</td><td>9</td><td>9</td><td>13</td><td>13</td><td>14</td><td>20</td></tr></tbody></table><p>关键事件：0, 2, 6, 9, 11</p><table><thead><tr><th></th><th>a1</th><th>a2</th><th>a3</th><th>a4</th><th>a5</th><th>a6</th><th>a7</th><th>a8</th><th>a9</th><th>a10</th><th>a11</th><th>a12</th><th>a13</th><th>a14</th><th>a15</th><th>a16</th></tr></thead><tbody><tr><td>Ee</td><td>0</td><td>0</td><td>0</td><td>2</td><td>2</td><td>2</td><td>4</td><td>4</td><td>9</td><td>5</td><td>9</td><td>7</td><td>7</td><td>12</td><td>13</td><td>13</td></tr><tr><td>El</td><td>2</td><td>0</td><td>1</td><td>4</td><td>2</td><td>4</td><td>5</td><td>6</td><td>10</td><td>7</td><td>9</td><td>9</td><td>11</td><td>13</td><td>13</td><td>14</td></tr></tbody></table><p>关键活动为：a2, a5, a11, a15</p><p>故关键路径为：0, 2, 6, 9, 11</p><p><strong>（3）最短路径</strong></p><table><thead><tr><th>顶点集</th><th>0</th><th>0,1</th><th>0,1,2</th><th>0,1,2,3</th><th>0,1,2,3, 5</th><th>0,1,2,3, 5,6</th><th>0,1,2,3, 5,6,7</th><th>0,1,2,3, 5,6,7,4</th><th>0,1,2,3, 5,6,7,4, 10</th><th>0,1,2,3, 5,6,7,4, 10,9</th><th>0,1,2,3, 5,6,7,4, 10,9,8</th><th>0,1,2,3, 5,6,7,4, 10,9,8,11</th></tr></thead><tbody><tr><td>D[1]</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>2</td></tr><tr><td>D[2]</td><td>2</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>2</td></tr><tr><td>D[3]</td><td>4</td><td>4</td><td>4</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>4</td></tr><tr><td>D[4]</td><td>-1</td><td>-1</td><td>-1</td><td>9</td><td>9</td><td>9</td><td>9</td><td></td><td></td><td></td><td></td><td>9</td></tr><tr><td>D[5]</td><td>-1</td><td>5</td><td>5</td><td>5</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>5</td></tr><tr><td>D[6]</td><td>-1</td><td>-1</td><td>9</td><td>9</td><td>7</td><td></td><td></td><td></td><td></td><td></td><td></td><td>7</td></tr><tr><td>D[7]</td><td>-1</td><td>-1</td><td>7</td><td>7</td><td>7</td><td>7</td><td></td><td></td><td></td><td></td><td></td><td>7</td></tr><tr><td>D[8]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>12</td><td>12</td><td>12</td><td></td><td>12</td></tr><tr><td>D[9]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>11</td><td>11</td><td>11</td><td>11</td><td></td><td></td><td>11</td></tr><tr><td>D[10]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>10</td><td>10</td><td></td><td></td><td></td><td>10</td></tr><tr><td>D[11]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>16</td><td>16</td><td>16</td><td>16</td></tr><tr><td>P[1]</td><td>0</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>0</td></tr><tr><td>P[2]</td><td>0</td><td>0</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>0</td></tr><tr><td>P[3]</td><td>0</td><td>0</td><td>0</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>0</td></tr><tr><td>P[4]</td><td>-1</td><td>-1</td><td>-1</td><td>3</td><td>3</td><td>3</td><td>3</td><td></td><td></td><td></td><td></td><td>3</td></tr><tr><td>P[5]</td><td>-1</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td></tr><tr><td>P[6]</td><td>-1</td><td>-1</td><td>2</td><td>2</td><td>5</td><td></td><td></td><td></td><td></td><td></td><td></td><td>5</td></tr><tr><td>P[7]</td><td>-1</td><td>-1</td><td>2</td><td>2</td><td>2</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td>2</td></tr><tr><td>P[8]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>4</td><td>4</td><td>4</td><td></td><td>4</td></tr><tr><td>P[9]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>6</td><td>6</td><td>6</td><td>6</td><td></td><td></td><td>6</td></tr><tr><td>P[10]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>7</td><td>7</td><td></td><td></td><td></td><td>7</td></tr><tr><td>P[11]</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>10</td><td>10</td><td>10</td><td>10</td></tr></tbody></table><p>注：本表是纵向计算，与书上相同。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image.png" alt="image" loading="lazy"></p><p>1.希尔排序：选择增量，并排序，比如5,2,1         基数排序：使用队列，从最低位起，按关键字的不同值将序列中的记录分配到RADIX个队列中</p><p>2.<strong>选择排序</strong>和<strong>归并排序</strong>不受关键字<strong>个数</strong>影响</p><p>3.稳定算法：<strong>直接插入，冒泡，归并和基数</strong> 排序</p><p><strong>直接插入排序</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//核心代码</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>temp<span class="token punctuation">)</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>冒泡排序：即沉底或者冒头</strong></p><p><img src="/2021/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201227151453700.png" alt="image-20201227151453700" loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择排序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://www.blog.yln956.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>离散数学</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</id>
    <published>2021-04-17T15:39:34.000Z</published>
    <updated>2021-09-03T05:56:54.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><p>小道消息，懂得都懂</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210105194524397.png" alt="image-20210105194524397" loading="lazy"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>交</p><p>并</p><p>补</p><p>差</p><p>环和</p><p>环积</p><h2 id="数理逻辑"><a href="#数理逻辑" class="headerlink" title="数理逻辑"></a>数理逻辑</h2><h3 id="一些没想好放哪的概念"><a href="#一些没想好放哪的概念" class="headerlink" title="一些没想好放哪的概念"></a>一些没想好放哪的概念</h3><p>重言式（永真）:对应所有指派，命题公式均为真</p><p>矛盾式（永假）:对应所有指派，命题公式均为假</p><p>偶然式:不是永真，也不是永假</p><p>辖域：紧接于量词之后的最小子公式叫量词的辖域</p><p><strong>命题：陈述句</strong>。是或真或假的断言</p><pre><code>例如：今天下雨。√      x+y&gt;4 ×明年十月一日是晴天。√无法确定真假，但也是命题</code></pre><h3 id="运算优先级及它们的真值表"><a href="#运算优先级及它们的真值表" class="headerlink" title="运算优先级及它们的真值表"></a>运算优先级及它们的真值表</h3><p>优先级：┐，∧、∨，→，&lt;-&gt;.</p><p>真值表：挺好记的，∧就是要全部是真才是真、∨有一个为真就是真，→前面真，后面假才是假，&lt;-&gt;就是双向-&gt;记得-&gt;就行了</p><table><thead><tr><th>p</th><th>q</th><th>p∧q</th><th>p∨q</th><th>p-&gt;q</th><th>p&lt;-&gt;q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>p∧q :p并且q</p><p> p∨q:p或q</p><p> p-&gt;q :如果p，那么q</p><p> p&lt;-&gt;q:p等值于q</p><p>∀：任意</p><p>┐∀：不是所有</p><p>∃：存在</p><p>┐∃：并非存在</p><h3 id="恒等式证明"><a href="#恒等式证明" class="headerlink" title="恒等式证明"></a>恒等式证明</h3><p><strong>1.真值表法</strong>  变元比较少的情况下常用。</p><p><strong>2.等值演算法</strong>.基本恒等式和带入，替换规则。</p><p><strong>3.蕴含法</strong> P&lt;=&gt;Q的充要条件为P=&gt;Q且Q=&gt;P.</p><p><strong>逻辑恒等式、永真蕴含式(书P9 - P10)</strong></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106001807234.png" alt="image-20210106001807234" loading="lazy"></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210105230707183.png" alt="image-20210105230707183" loading="lazy"></p><p>永真蕴含式</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210105230843232.png" alt="image-20210105230843232" loading="lazy"></p><h3 id="主析取范式，主合取范式"><a href="#主析取范式，主合取范式" class="headerlink" title="主析取范式，主合取范式"></a>主析取范式，主合取范式</h3><p>将合取式称为积，将析取式称为和</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210105235325365.png" alt="image-20210105235325365" loading="lazy"></p><p>利用真值表</p><p>1代表主析取范式</p><pre><code>不带非表示1，带非表示0</code></pre><p>0代表主合取范式Π（2，4，6），M2M4M6</p><pre><code>带非表示1，不带表示0</code></pre><h3 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h3><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106001509361.png" alt="image-20210106001509361" loading="lazy"></p><p><strong>“A(x)对y是自由的”含义</strong></p><p><strong>US：∀xA(x) =&gt; A(x)</strong></p><p><strong>ES（ES在US之前）：∃xA(x) =&gt; A(x)</strong></p><p><strong>EG：A(y) =&gt; ∃xA(x)</strong></p><p><strong>UG：A(x) =&gt; ∀xA(x)</strong></p><h2 id="代数"><a href="#代数" class="headerlink" title="代数"></a>代数</h2><h3 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h3><p>封闭性：给定集合S，若对S上的元素进行 <strong><strong>* 运算，产生的象也在S中，则称集合S在 *</strong></strong> 运算下是封闭的。</p><p><strong>二元运算要满足封闭性</strong></p><p>可交换，可结合，可分配</p><p><strong>左右幺元，左右零元</strong></p><p>逆元，与逆元密切相关的一个概念，<strong>可约性</strong>，可约不一定可逆</p><pre><code>例：设 * 是集合S上的二元可结合运算，若a∈S是可逆的，则a是可约的。比如：(a ***** x=a ***** y)V(x ***** a=y ***** a)=&gt;(x=y)</code></pre><h3 id="同态与同构"><a href="#同态与同构" class="headerlink" title="同态与同构"></a>同态与同构</h3><p>同构：即存在双射</p><pre><code>两个代数同构，指它们在结构上完全一致，仅仅是元素与运算符的表示形式不同，运算性质，元素间的总体关系，即本质是一样的。</code></pre><p>同态：</p><pre><code>单（一）同态：h为单射（其余和同构相同）满同态：h为满射（其余和同构相同）自同态：A=A’（其余和同构相同）自同构：A=A’，且h是同构，则称h是自同构</code></pre><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106171152305.png" alt="image-20210106171152305" loading="lazy"></p><h3 id="半群，独异点和群"><a href="#半群，独异点和群" class="headerlink" title="半群，独异点和群"></a>半群，独异点和群</h3><p>半群：设V=&lt;S, ***** &gt;是一个代数系统， <strong><strong>* 是一个二元运算，如果 *</strong></strong> 运算是可结合的,即对于 <strong><strong>* a,b,c *</strong></strong> S,有a*(b<em>c)=(a</em>b)*c，则称V为半群。</p><pre><code>即满足**封闭性，可结合**</code></pre><p>独异点(<strong>含幺半群</strong>)：设V=&lt;S, ***** &gt;是半群，且V中有幺元，则称V是一个含幺半群，也称独异点。为强调幺元存在,有时将它写成&lt;S, ***** ,1&gt;。</p><pre><code>即满足**封闭性，可结合，有幺元**</code></pre><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106005914495.png" alt="image-20210106005914495" loading="lazy"></p><p>子半群：设V=&lt;S, ***** &gt;是半群，T <strong><strong>* S，且对于 *</strong></strong> 运算封闭，那么称&lt;T, ***** &gt;是半群&lt;S, ***** &gt;的子半群。</p><p>可交换半群(可交换独异点)：在半群(独异点)中，若运算是可交换的,则称此半群(独异点)为可交换半群(可交换独异点)。</p><p>循环独异点：设&lt;S, ***** ,e&gt;是独异点，若∃xg∈S，对∀xa ***** S,都有一个相应的h∈N使a=g^h。则称此独异点为循环独异点。并称元素g是此循环独异点的生成元。</p><p>群：设&lt;G, ***** &gt;是一个代数系统,二元运算 ***** 满足：<br>    ①满足结合律。②幺元存在。③每个元素都有逆元。<br>    则&lt;G, ***** &gt;称为群。</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106012211255.png" alt="image-20210106012211255" loading="lazy"></p><p>有限群（基数称为阶数），无限群</p><p>可交换群</p><p>元素的阶：设&lt;G, ***** &gt;是一个群，且a∈G，如果存在正整数n,使an = e,则称元素a的阶是有限的，满足a^n = e的最小正整数n称为a的<br>阶。</p><p>置换群：记号<strong>⚬</strong>表示<strong>左合成（从右到左）</strong>，例如p1⚬p2，表示先进行p2置换，再进行p1置换</p><pre><code>          记号**◇**表示**右合成（从右到左）**，例如p1◇p2，表示先进行p1置换，再进行p2置换</code></pre><p>令</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106012650403.png" alt="image-20210106012650403" loading="lazy"></p><p>则左合成</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106012719339.png" alt="image-20210106012719339" loading="lazy"></p><p>令</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106012827134.png" alt="image-20210106012827134" loading="lazy"></p><p>则右合成</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106012730680.png" alt="image-20210106012730680" loading="lazy"></p><h2 id="二元关系"><a href="#二元关系" class="headerlink" title="二元关系"></a>二元关系</h2><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>n元关系,空关系</p><p>设R是A到B的二元关系(即R∈A×B)，称A<br>为R的<strong>前域</strong>,B为R的<strong>陪域</strong>。<br>D(R)={x|∃y(&lt;x,y&gt;属于R)}叫作R的<strong>定义域</strong>(domain)。<br>R(R)={y|∃x(&lt;x,y&gt;∈R)}叫作R的<strong>值域</strong>(range)。</p><p>A上的二元关系R={&lt;x,x&gt;|任意x∈A}称为<strong>相等关系</strong>(恒等关系),记IA或EA</p><p>关系特性：</p><p><strong>自反</strong>：每个结点点都存在自回路，关系图主对角线上元素均为1</p><p><strong>反自反</strong>：每个结点点都<strong>不</strong>存在自回路，关系图主对角线上元素均为0</p><p><strong>对称</strong>：只要有a到b的弧，就有b到a的弧，关系图关于主对角线对称</p><p><strong>反对称</strong>：如果存在a到b的弧，就<strong>不</strong>存在b到a的弧</p><p><strong>传递</strong>：若有a到b和b到c，则必有a到c</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106093803548.png" alt="image-20210106093803548" loading="lazy"></p><h3 id="关系的合成运算"><a href="#关系的合成运算" class="headerlink" title="关系的合成运算"></a>关系的合成运算</h3><p>⑴关系的合成运算一般是不可交换的</p><p>(2)关系的合成运算是可结合的</p><p>(3)关系的合成运算对集合的<strong>并</strong>是可分配的</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106094038342.png" alt="image-20210106094038342" loading="lazy"></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106094051159.png" alt="image-20210106094051159" loading="lazy"></p><h3 id="关系R的幂"><a href="#关系R的幂" class="headerlink" title="关系R的幂"></a>关系R的幂</h3><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106094202358.png" alt="image-20210106094202358" loading="lazy"></p><p><strong>一个比较重要的定理</strong></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106094236333.png" alt="image-20210106094236333" loading="lazy"></p><h3 id="关系的闭包运算"><a href="#关系的闭包运算" class="headerlink" title="关系的闭包运算"></a>关系的闭包运算</h3><p>逆运算：设R是集合A到B的二元关系,关系R的逆(R的逆关系)是一个B到A上的二元关系</p><p><strong>r(R)：自反闭包；s(R)：对称闭包；t(R)：传递闭包</strong></p><p><strong>闭包就是满足自反(对称,传递)性的一个最小关系</strong></p><p>构成关系R闭包的基本方法：给R补充必要的序偶,使所得的新关系R具有自反(对称,传递)性</p><pre><code>简单来说，随便搞</code></pre><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106094929109.png" alt="image-20210106094929109" loading="lazy"></p><h3 id="次序关系"><a href="#次序关系" class="headerlink" title="次序关系"></a>次序关系</h3><p>偏序：若R具有性质：<strong>自反的，反对称的，传递的</strong>，则称R是A上的一个偏序关系，简称偏序。</p><p><strong>偏序集习惯上用哈斯(Ｈasse)图表示。</strong><br>哈斯图是一种简化的关系图：<br>①略去每个节点的自回路；②能用传递关系得出的边略去；③每条边都是向上画，并将箭头略去。(哈斯图的自反传递闭包就是关系图)</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106095321593.png" alt="image-20210106095321593" loading="lazy"></p><p>假定题目给了个A集合，B∈A，找B集合中的</p><p>最大元素：B集合中找，要和所有元素可比的最大的元素</p><p>最小元素：B集合中找，要和所有元素可比的最小的元素</p><p>极大元素：B集合中找，在最高层的，可以有多个</p><p>极小元素：B集合中找，在最低层的，可以有多个</p><p>上界：A集合找所有大于等于B集合元素的元素，要有可比性</p><p>下界：A集合找所有大于等于B集合元素的元素，要有可比性</p><p>最小上界(lub)：顾名思义</p><p>最大下界(glb)：顾名思义</p><p>拟序：若集合A上的二元关系R是<strong>反自反的,反对称的，传递的,</strong> 则称R是A上的拟序关系,简称拟序</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106100505089.png" alt="image-20210106100505089" loading="lazy"></p><p>线序：偏序关系中每两个元素都可以比较</p><p>良序：线序关系的每一非空子集都有最小元素</p><p>等价关系：如果集合A中的二元关系R是<strong>自反的，对称的，传递的，</strong>则称R是A上的一个等价关系。</p><p>模数等价（模同余）</p><p>划分：</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101232291.png" alt="image-20210106101232291" loading="lazy"></p><p>概念真头大，还是例子好理解</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101211995.png" alt="image-20210106101211995" loading="lazy"></p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>数据结构都会吧</p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101517939.png" alt="image-20210106101517939" loading="lazy"></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101642562.png" alt="image-20210106101642562" loading="lazy"></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101701331.png" alt="image-20210106101701331" loading="lazy"></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106101723027.png" alt="image-20210106101723027" loading="lazy"></p><h3 id="正则图"><a href="#正则图" class="headerlink" title="正则图"></a>正则图</h3><p>如果每个结点的度数均为k，则该图称为k-正则图</p><p><strong>10个顶点的3-正则图</strong></p><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106102030813.png" alt="image-20210106102030813" loading="lazy"></p><h3 id="概念：没错，又是我"><a href="#概念：没错，又是我" class="headerlink" title="概念：没错，又是我"></a>概念：没错，又是我</h3><p>任何图中，度数为奇数的结点必是偶数个。</p><p>子图：边点都能删</p><p>生成子图：只删边</p><p>导出子图：删点</p><p>补图：由G中所有结点和所有能使G成为完全图的添加边组成的图</p><p>图的同构：两图的结点和边分别存在着一一对应，且保持关联关系</p><pre><code>同构**必要条件(证明不是同构)**:(1) 结点数目相等；(2) 边数相等；(3) 度数相同的结点数目相等。</code></pre><p><img src="/2021/04/17/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20210106102747629.png" alt="image-20210106102747629" loading="lazy"></p><h3 id="路径和回路"><a href="#路径和回路" class="headerlink" title="路径和回路"></a>路径和回路</h3><p>简单路径：边不重复的路径</p><p>基本路径：各点出现不超过一次的路径</p><p>简单回路：边不重复的回路</p><p>基本回路：各点出现不超过一次的回路</p><p>强连通，弱连通，最短路径</p><p>欧拉图：一笔画问题，平凡图是欧拉图。</p><p>哈密尔顿图：每个顶点只经过一次的回路</p><h3 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h3><p>Km,n：上面m个顶点下面出度为n</p><pre><code>**完全匹配，最大匹配**</code></pre><p>无向图G作为二部图的充要条件是G中所有回路长度均为偶数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="离散数学" scheme="http://www.blog.yln956.top/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>信安数学</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/</id>
    <published>2021-04-17T15:38:27.000Z</published>
    <updated>2021-09-03T05:57:02.198Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信安数学基础（我大哥说有手就行）"><a href="#信安数学基础（我大哥说有手就行）" class="headerlink" title="信安数学基础（我大哥说有手就行）"></a>信安数学基础（我大哥说有手就行）</h1><p><strong>耗子尾汁</strong></p><p>完全剩余系：有n个元素</p><p>简化剩余系：最多n-1个</p><h4 id><a href="#" class="headerlink" title></a><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20201227190842638.png" alt="image-20201227190842638" loading="lazy"></h4><p>例如3的简化剩余系：2,4        或       1，5</p><p><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20201227191913038.png" alt="image-20201227191913038" loading="lazy"></p><p><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20210106131738797.png" alt="image-20210106131738797" loading="lazy"></p><p><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20210106135758273.png" alt="image-20210106135758273" loading="lazy"></p><p><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20210106135815518.png" alt="image-20210106135815518" loading="lazy"></p><p><img src="/2021/04/17/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/image-20210106135840612.png" alt="image-20210106135840612" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="信安数学" scheme="http://www.blog.yln956.top/categories/%E4%BF%A1%E5%AE%89%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E6%B1%87%E7%BC%96/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E6%B1%87%E7%BC%96/</id>
    <published>2021-04-17T15:36:07.000Z</published>
    <updated>2021-09-03T05:56:56.119Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>本人菜鸡</p><p>别骂了别骂了</p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><p><strong>汇编语言与机器语言有什么关系？</strong><br>机器语言是一种数字语言，人难以理解<br>汇编语言采用助记符描述指令，如ADD,CALL等指令，人易理解些<br>一般来说，汇编指令同机器指令有一一对应的关系</p><pre class="line-numbers language-none"><code class="language-none">int Y;Mov eax , Yint X &#x3D;  Y + 4 ;Add eax , 4Mov x  , eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-IA-32处理器体系结构"><a href="#2-IA-32处理器体系结构" class="headerlink" title="2.IA-32处理器体系结构"></a>2.IA-32处理器体系结构</h2><pre class="line-numbers language-none"><code class="language-none">Ø 了解微机的结构Ø 掌握IA32处理器的基本执行环境，掌握各寄存器的作用Ø 理解指令的运行过程Ø 掌握IA-32处理器有3种基本的操作模式，特别是保护模式与实模式（包括地址计算等）Ø 了解其它内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-汇编语言基础"><a href="#3-汇编语言基础" class="headerlink" title="3.汇编语言基础"></a>3.汇编语言基础</h2><pre class="line-numbers language-none"><code class="language-none">Ø 理解汇编语言的基本要素，能写出完整的汇编程序Ø 理解汇编程序转换为可执行程序的全过程Ø 掌握配置VC6的方法Ø 掌握汇编数据定义方法、符号常量的定义方法Ø 理解Intel处理器所使用的小端顺序，并能灵活运用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数据传送寻址和算术运算"><a href="#4-数据传送寻址和算术运算" class="headerlink" title="4 .数据传送寻址和算术运算"></a>4 .数据传送寻址和算术运算</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">r8<span class="token number">8</span>位寄存器<span class="token punctuation">:</span>AH<span class="token punctuation">,</span>AL<span class="token punctuation">,</span>…DH<span class="token punctuation">,</span>DLr16<span class="token number">16</span>位寄存器AX<span class="token punctuation">,</span>BX<span class="token punctuation">,</span>CX<span class="token punctuation">,</span>DX<span class="token punctuation">,</span>SI<span class="token punctuation">,</span>DI<span class="token punctuation">,</span>SP<span class="token punctuation">,</span>BPr32<span class="token number">32</span>位寄存器，上列中加前缀Ereg任意通用寄存器sreg<span class="token number">16</span>位段寄存器CS<span class="token punctuation">,</span>DS<span class="token punctuation">,</span>SS<span class="token punctuation">,</span>ES<span class="token punctuation">,</span>FS<span class="token punctuation">,</span>GSimm8<span class="token number">8</span>位立即数，字节Imm16<span class="token punctuation">,</span><span class="token number">32</span><span class="token number">16</span>位立即数，字<span class="token punctuation">;</span><span class="token number">32</span>位立即数<span class="token punctuation">,</span>双字imm任意立即数r<span class="token operator">/</span>m8<span class="token number">8</span>位操作数，<span class="token number">8</span>位寄存器或者字节内存r<span class="token operator">/</span>m16<span class="token punctuation">,</span><span class="token number">32</span><span class="token number">16</span>位，<span class="token number">32</span>位寄存器或内存单元mem内存操作数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">mov把一个字节或字的操作数从源地址传送至目的地址     mov eax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>eax<span class="token operator">=</span><span class="token number">00000000</span>h    movzx零拓展，再传送<span class="token punctuation">,</span>用于无符号数    mov bx<span class="token punctuation">,</span><span class="token number">0</span>a<span class="token operator">=</span>A69Bh    movzx eax<span class="token punctuation">,</span>bx<span class="token punctuation">;</span>bx<span class="token operator">=</span><span class="token number">0000</span>A69Bh    movsz符号拓展，再传送，用于有符号数    mov ax<span class="token punctuation">,</span><span class="token number">10001111</span>b<span class="token punctuation">;</span>ax<span class="token operator">=</span><span class="token number">1111111110001111</span>b                <span class="token comment">//LAHF    标志寄存器传送,把标志装入AH.  </span><span class="token comment">//SAHF    标志寄存器传送,把AH内容装入标志寄存器.         </span>        inc加<span class="token number">1</span>dec减<span class="token number">1</span>sub减法add求和        add a<span class="token punctuation">,</span>ba<span class="token operator">=</span>a<span class="token operator">+</span>b       sub a<span class="token punctuation">,</span>ba<span class="token operator">=</span>a<span class="token operator">+</span>b        加减法会影响标志位        neg转换成补码，按位取反再<span class="token operator">+</span><span class="token number">1</span>        有符号数与无符号数溢出的判断方法有符号数最高位为符号位，<span class="token number">0</span>为正数，<span class="token number">1</span>为负数，所以一个字节八位（<span class="token number">2</span><span class="token operator">^</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">256</span>），却只能表示绝对值为<span class="token number">7</span>位以内的数（<span class="token number">2</span><span class="token operator">^</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">128</span>，<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span>包含<span class="token number">0</span>）。有符号数溢出会先溢出到符号位，导致正数变负数的情况，符号标志位由<span class="token number">0</span>置<span class="token number">1.</span>无符号数没有符号位，溢出代表其大小无法存储数据，直接溢出标志位 置<span class="token number">1</span>                offset返回数据标号的偏移地址，以字节为单位。ptr     重写一个操作数的大小类型        num1 dword <span class="token number">12345678</span>h        mov ax<span class="token punctuation">,</span>num1 <span class="token punctuation">;</span>这个不被允许        mov ax<span class="token punctuation">,</span>word ptr num1 <span class="token punctuation">;</span>这就可以type    返回按字节计算的变量的单个元素的大小lenthof 返回操作数的元素个数       <span class="token keyword">sizeof</span>返回操作数所占的字节数个数        <span class="token comment">//align    将变量的位置按指定的大小对齐</span><span class="token comment">//label    插入一个标号，并定于大小</span>            <span class="token comment">//val1 label word</span>间接寻址            array byte <span class="token number">10</span>h<span class="token punctuation">,</span><span class="token number">20</span>h<span class="token punctuation">,</span><span class="token number">30</span>h<span class="token punctuation">;</span>            mov esi<span class="token punctuation">,</span>offset array            moval<span class="token punctuation">,</span><span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">10</span>h            inc esi            mov al<span class="token punctuation">,</span><span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">20</span>h变址寻址                        array byte <span class="token number">10</span>h<span class="token punctuation">,</span><span class="token number">20</span>h<span class="token punctuation">,</span><span class="token number">30</span>h<span class="token punctuation">;</span>            mov esi<span class="token punctuation">,</span><span class="token number">0</span>            moval<span class="token punctuation">,</span>array<span class="token punctuation">[</span>exi<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">10</span>h            mov al<span class="token punctuation">,</span>array<span class="token punctuation">[</span>esi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">20</span>h变址寻址比例因子            array word <span class="token number">10</span>h<span class="token punctuation">,</span><span class="token number">20</span>h<span class="token punctuation">,</span><span class="token number">30</span>h<span class="token punctuation">;</span>            mov esi<span class="token punctuation">,</span><span class="token number">0</span>            moval<span class="token punctuation">,</span>array<span class="token punctuation">[</span>exi<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">10</span>h            mov esi<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">*</span>type array            mov al<span class="token punctuation">,</span>array<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">20</span>h            mov esi<span class="token punctuation">,</span><span class="token number">2</span>            mov al<span class="token punctuation">,</span>array<span class="token punctuation">[</span>esi<span class="token operator">*</span>type array<span class="token punctuation">]</span><span class="token punctuation">;</span>al<span class="token operator">=</span><span class="token number">30</span>hjmp无条件跳转                loop循环，把ECX的值<span class="token operator">-</span><span class="token number">1</span>再与<span class="token number">0</span>比较，等于<span class="token number">0</span>不跳转，不等于<span class="token number">0</span>则跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-过程"><a href="#5-过程" class="headerlink" title="5.过程"></a>5.过程</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">push入栈 esp<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>要压入的<span class="token number">32</span>位值压入esp指向的内存pop出栈 esp<span class="token operator">+</span><span class="token number">4</span>pushfd把<span class="token number">32</span>位的标志寄存器压栈popfd 出pushad把<span class="token number">8</span>个通用<span class="token number">32</span>位寄存器压栈popad 出过程定义exam1 <span class="token function">proc</span> <span class="token punctuation">(</span>uses eax<span class="token punctuation">,</span>ebx<span class="token punctuation">)</span>…………retexam1 endp过程调用call exam1call   调用过程把eip压栈（即当前call指令的下一条指令的地址），然后将过程名所在地址赋给eip，相当于跳转到过程名所在的代码处。ret从栈中取出<span class="token number">32</span>位值，赋给eipuses保护寄存器uses eax    相当于  push eax  pop eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-条件处理"><a href="#6-条件处理" class="headerlink" title="6.条件处理"></a>6.条件处理</h2><pre class="line-numbers language-none"><code class="language-none">and与，相当于合取把源操作数和目的操作数对各二进制位按位相与，结果存到目的操作数中or或，析取xor相同为0，不同为1not对操作数取反cmp对两个操作数作相减运算，不修改操作数，但会影响标志位,跟着条件跳转使用test将两操作数按位执行相与操作，结果不存到目的操作数，但标志寄存器中的标志位体现结果的属性。      test a,b   &#x3D;&gt; and a,b    a&amp;b&#x3D;0    zf&#x3D;1&#x2F;&#x2F;clc将CF清0&#x2F;&#x2F;stc将CF置1数字1与数字符号1，对于后者存在计算机中使用的是它的ASCII代码31hA41ha   61h特定标志位跳转jz为零跳转ZF&#x3D;1jnzjc进位跳转CF&#x3D;1jncjo溢出跳转OF&#x3D;1jnojs有符号跳转SF&#x3D;1jnsjp偶校验跳转PF&#x3D;1jnpje相等跳转jne不相等跳转jcxz cx&#x3D;0跳转jecxz ecx&#x3D;0跳转jrcxz rcx&#x3D;0跳转    无符号数比较跳转(a在b前面，a是大于，e表示等于)ja大于跳转（leftnum&gt;rightnum）jnbe不小于等于跳转jae大于等于跳转jnb不小于跳转jb小于跳转jnae不大于等于跳转jbe小于等于跳转jna不大于跳转有符号数比较跳转(G在L前面，G是大于，E表示等于)JG大于跳转（leftnum&gt;rightnum）JNLE不小于等于跳转JGE大于等于跳转JNL不小于JL小于跳转JNGE不大于等于JLE小于等于JNG不大于loopz&#x2F;loopeecx不等于0并且ZF标志位为1时跳转，即与LOOP指令不同的地方就是要同时判别ZF标志位ZF&#x3D;1，其他和loop一样loopnz&#x2F;loopneZF&#x3D;0，其他和loop一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-整数算术指令"><a href="#7-整数算术指令" class="headerlink" title="7.整数算术指令"></a>7.整数算术指令</h2><pre class="line-numbers language-none"><code class="language-none">SHL逻辑左移（无符号）SHR逻辑右移SAL算术左移（有符号）SAR算术右移ROL循环左移ROR循环右移RCL带进位的循环左移RCR带进位的循环右移&#x2F;&#x2F;SHLD双精度左移&#x2F;&#x2F;SHRD双精度右移    MUL(无符号乘法)被乘数乘数乘积ALreg&#x2F;mem8AXAXreg&#x2F;mem16DX:AXEAXreg&#x2F;mem32EDX:EAXIMUL(有符号乘法)单操作数如果结果的高一半不是低一半的符号扩展，OF，CF置位双操作数两个操作数相乘，结果存到第一个操作数中，如果第一个操作数存不下结果，OF、CF置位。三操作数第二、三两个操作数相乘，结果存到第一个操作数中如果第一个操作数存不下结果，OF、CF置位DIV(无符号除法)被除数除数商余数AXreg&#x2F;mem8ALAHDX:AXreg&#x2F;mem16AXDXEDX:EAXreg&#x2F;mem32EAXEDXIDIV(有符号除法)与无符号除法几乎一样，但是进行除法前要对被除数进行符号拓展CBW字节转字 AL拓展到AHCWD字转双字 AX拓展到DXCDQ双字转四字 EAX拓展到EDX拓展加减法ADC带进位加法SBB带借位减法（无需了解调整指令）算术调整指令（第一个字母A，ASCALL调整&#x2F;D,十进制调整，第二个字母A表示调整）AAAAASAADAAMDAADAS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-高级过程"><a href="#8-高级过程" class="headerlink" title="8.高级过程"></a>8.高级过程</h2><pre class="line-numbers language-none"><code class="language-none">LEA返回间接操作数的地址INVOKEcall指令的增强版，支持堆栈参数传递Invoke DumpMem,offset array,lengthof array这条指令的实际效果(指令顺序与语言选项有关)Push lengthof arrayPush offset arrayCall DumpMem&#x2F;&#x2F;ENTER 为方便建立堆栈框架的指令 ENTER 8,0      Push ebp Mov ebp , espSub esp , 8&#x2F;&#x2F;LEAVE   与ENTER配合LEAVEMov esp,ebpPop ebp&#x2F;&#x2F;LOCAL可定义全局变量Local var1:byte 定义一个名为var1的字节变量Local v1:dword,v2:byte 定义了两个变量Local arr[10]:dword  定义数组&#x2F;&#x2F;PROTO声明过程原型Ø 掌握堆栈框架(Stack Frame)的使用：栈框架的建立，栈的清理，要求能画出栈在调用一个过程中的变化情况；Ø 理解通过栈传递参数的原理，能结合EBP来计算参数的位置Ø 理解C调用约写与stdcall调用约定的不同点与相同点Ø 理解如何在过程中使用局量变量Ø 掌握LEA指令Ø 了解ENTER、LEAVE指令Ø 了解Local伪指令Ø 掌握invoke伪指令的使用，理解它是如何转换为call指令的。Ø 了解proto伪指令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-串操作"><a href="#9-串操作" class="headerlink" title="9.串操作"></a>9.串操作</h2><pre class="line-numbers language-none"><code class="language-none">CLD DF&#x3D;0  DS:SI 源串段寄存器 :源串变址.            ES:DI 目标串段寄存器:目标串变址.            CX 重复次数计数器.            AL&#x2F;AX 扫描值.            D标志   0表示重复操作中SI和DI应自动增量; 1表示应自动减量.            Z标志   用来控制扫描或比较操作的结束.  MOVS    串传送.(相当于mov [edi],[esi])( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )  CMPS    串比较.(相当于cmp [esi],[edi])( CMPSB 比较字符. CMPSW 比较字. )  SCAS    串扫描.把AL或AX的内容与目标串作比较,比较结果反映在标志位.  LODS    装入串.把源串中的元素(字或字节)逐一装入AL或AX中.( LODSB 传送字符. LODSW 传送字.    LODSD 传送双字. )  STOS    保存串.是LODS的逆过程.  REP         当CX&#x2F;ECX&lt;&gt;0时重复.(&lt;&gt; &#x3D;&#x3D; !&#x3D; ) REPE&#x2F;REPZ   当ZF&#x3D;1或比较结果相等,且CX&#x2F;ECX&lt;&gt;0时重复.  REPNE&#x2F;REPNZ 当ZF&#x3D;0或比较结果不相等,且CX&#x2F;ECX&lt;&gt;0时重复.  REPC        当CF&#x3D;1且CX&#x2F;ECX&lt;&gt;0时重复.  REPNC       当CF&#x3D;0且CX&#x2F;ECX&lt;&gt;0时重复.  基址变址寻址.data  arr word 1000h,2000h,3000h.code  mov ebx , offset arr  mov esi , 2  mov ax , [ebx + esi]  ;ax &#x3D; 2000h  mov ecx , 4  mov ax , [ebx + ecx] ; ax &#x3D; 3000h相对基址变址寻址mov ecx , tableB[ebx,eax*2]了解比例因子mov al , [eax + ebx * 4]1,2,4,8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-结构和宏"><a href="#10-结构和宏" class="headerlink" title="10.结构和宏"></a>10.结构和宏</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">定义结构    结构名   <span class="token keyword">struct</span>各域的声明结构名 endsØ 本章内容未讲，无需复习。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一、数据传输指令"><a href="#一、数据传输指令" class="headerlink" title="一、数据传输指令"></a>一、数据传输指令</h2><p>网上抄的，别骂了别骂了 </p><p>它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据.</p><h3 id="1-通用数据传送指令"><a href="#1-通用数据传送指令" class="headerlink" title="1. 通用数据传送指令"></a>1. 通用数据传送指令</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">MOV     传送字或字节<span class="token punctuation">.</span>  MOVSX   先符号扩展<span class="token punctuation">,</span>再传送<span class="token punctuation">.</span>MOVZX   先零扩展<span class="token punctuation">,</span>再传送<span class="token punctuation">.</span>  PUSH    把字压入堆栈<span class="token punctuation">.</span>  POP     把字弹出堆栈<span class="token punctuation">.</span>  PUSHA   把AX<span class="token punctuation">,</span>CX<span class="token punctuation">,</span>DX<span class="token punctuation">,</span>BX<span class="token punctuation">,</span>SP<span class="token punctuation">,</span>BP<span class="token punctuation">,</span>SI<span class="token punctuation">,</span>DI依次压入堆栈<span class="token punctuation">.</span>  POPA    把DI<span class="token punctuation">,</span>SI<span class="token punctuation">,</span>BP<span class="token punctuation">,</span>SP<span class="token punctuation">,</span>BX<span class="token punctuation">,</span>DX<span class="token punctuation">,</span>CX<span class="token punctuation">,</span>AX依次弹出堆栈<span class="token punctuation">.</span>  PUSHAD  把EAX<span class="token punctuation">,</span>ECX<span class="token punctuation">,</span>EDX<span class="token punctuation">,</span>EBX<span class="token punctuation">,</span>ESP<span class="token punctuation">,</span>EBP<span class="token punctuation">,</span>ESI<span class="token punctuation">,</span>EDI依次压入堆栈<span class="token punctuation">.</span>  POPAD   把EDI<span class="token punctuation">,</span>ESI<span class="token punctuation">,</span>EBP<span class="token punctuation">,</span>ESP<span class="token punctuation">,</span>EBX<span class="token punctuation">,</span>EDX<span class="token punctuation">,</span>ECX<span class="token punctuation">,</span>EAX依次弹出堆栈<span class="token punctuation">.</span>  BSWAP   交换<span class="token number">32</span>位寄存器里字节的顺序  XCHG    交换字或字节<span class="token punctuation">.</span><span class="token punctuation">(</span>至少有一个操作数为寄存器<span class="token punctuation">,</span>段寄存器不可作为操作数<span class="token punctuation">)</span>  CMPXCHG 比较并交换操作数<span class="token punctuation">.</span><span class="token punctuation">(</span>第二个操作数必须为累加器AL<span class="token operator">/</span>AX<span class="token operator">/</span>EAX<span class="token punctuation">)</span>  XADD    先交换再累加<span class="token punctuation">.</span><span class="token punctuation">(</span>结果在第一个操作数里<span class="token punctuation">)</span>  XLAT    字节查表转换<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span>BX指向一张<span class="token number">256</span>字节的表的起点<span class="token punctuation">,</span>AL为表的索引值<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span><span class="token punctuation">,</span>即<span class="token number">0</span><span class="token operator">-</span>FFH<span class="token punctuation">)</span><span class="token punctuation">;</span>返回AL为查表结果<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span>BX<span class="token operator">+</span>AL<span class="token punctuation">]</span><span class="token operator">-></span>AL<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-输入输出端口传送指令"><a href="#2-输入输出端口传送指令" class="headerlink" title="2. 输入输出端口传送指令."></a>2. 输入输出端口传送指令.</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">IN      I&#x2F;O端口输入. ( 语法: IN   累加器,    &#123;端口号│DX&#125; )  OUT     I&#x2F;O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )输入输出端口由立即方式指定时,    其范围是 0-255; 由寄存器 DX 指定时,其范围是    0-65535.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-目的地址传送指令"><a href="#3-目的地址传送指令" class="headerlink" title="3. 目的地址传送指令."></a>3. 目的地址传送指令.</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">LEA     装入有效地址<span class="token punctuation">.</span>例<span class="token operator">:</span> LEA DX<span class="token punctuation">,</span>string <span class="token punctuation">;</span>把偏移地址存到DX<span class="token punctuation">.</span>  LDS     传送目标指针<span class="token punctuation">,</span>把指针内容装入DS<span class="token punctuation">.</span>例<span class="token operator">:</span> LDS SI<span class="token punctuation">,</span>string   <span class="token punctuation">;</span>把段地址<span class="token operator">:</span>偏移地址存到DS<span class="token operator">:</span>SI<span class="token punctuation">.</span>  LES     传送目标指针<span class="token punctuation">,</span>把指针内容装入ES<span class="token punctuation">.</span>例<span class="token operator">:</span> LES DI<span class="token punctuation">,</span>string   <span class="token punctuation">;</span>把段地址<span class="token operator">:</span>偏移地址存到ES<span class="token operator">:</span>DI<span class="token punctuation">.</span>  LFS     传送目标指针<span class="token punctuation">,</span>把指针内容装入FS<span class="token punctuation">.</span>例<span class="token operator">:</span> LFS DI<span class="token punctuation">,</span>string   <span class="token punctuation">;</span>把段地址<span class="token operator">:</span>偏移地址存到FS<span class="token operator">:</span>DI<span class="token punctuation">.</span>  LGS     传送目标指针<span class="token punctuation">,</span>把指针内容装入GS<span class="token punctuation">.</span>例<span class="token operator">:</span> LGS DI<span class="token punctuation">,</span>string   <span class="token punctuation">;</span>把段地址<span class="token operator">:</span>偏移地址存到GS<span class="token operator">:</span>DI<span class="token punctuation">.</span>  LSS     传送目标指针<span class="token punctuation">,</span>把指针内容装入SS<span class="token punctuation">.</span>例<span class="token operator">:</span> LSS DI<span class="token punctuation">,</span>string   <span class="token punctuation">;</span>把段地址<span class="token operator">:</span>偏移地址存到SS<span class="token operator">:</span>DI<span class="token punctuation">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-标志传送指令"><a href="#4-标志传送指令" class="headerlink" title="4. 标志传送指令."></a>4. 标志传送指令.</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">LAHF    标志寄存器传送,把标志装入AH.  SAHF    标志寄存器传送,把AH内容装入标志寄存器.  PUSHF   标志入栈.  POPF    标志出栈.  PUSHD   32位标志入栈.  POPD    32位标志出栈.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、算术运算指令"><a href="#二、算术运算指令" class="headerlink" title="二、算术运算指令"></a>二、算术运算指令</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">ADC     带进位加法<span class="token punctuation">.</span>  INC     加 <span class="token number">1.</span>  AAA     加法的ASCII码调整<span class="token punctuation">.</span>  DAA     加法的十进制调整<span class="token punctuation">.</span>  SUB     减法<span class="token punctuation">.</span>  SBB     带借位减法<span class="token punctuation">.</span>  DEC     减 <span class="token number">1.</span>  NEG     求反<span class="token punctuation">(</span>以    <span class="token number">0</span> 减之<span class="token punctuation">)</span><span class="token punctuation">.</span>  CMP     比较<span class="token punctuation">.</span><span class="token punctuation">(</span>两操作数作减法<span class="token punctuation">,</span>仅修改标志位<span class="token punctuation">,</span>不回送结果<span class="token punctuation">)</span><span class="token punctuation">.</span>  AAS     减法的ASCII码调整<span class="token punctuation">.</span>  DAS     减法的十进制调整<span class="token punctuation">.</span>  MUL     无符号乘法<span class="token punctuation">.</span>结果回送AH和<span class="token function">AL</span><span class="token punctuation">(</span>字节运算<span class="token punctuation">)</span><span class="token punctuation">,</span>或DX和<span class="token function">AX</span><span class="token punctuation">(</span>字运算<span class="token punctuation">)</span><span class="token punctuation">,</span>  IMUL    整数乘法<span class="token punctuation">.</span>结果回送AH和<span class="token function">AL</span><span class="token punctuation">(</span>字节运算<span class="token punctuation">)</span><span class="token punctuation">,</span>或DX和<span class="token function">AX</span><span class="token punctuation">(</span>字运算<span class="token punctuation">)</span><span class="token punctuation">,</span>  AAM     乘法的ASCII码调整<span class="token punctuation">.</span>  DIV     无符号除法<span class="token punctuation">.</span>结果回送<span class="token punctuation">:</span>商回送AL<span class="token punctuation">,</span>余数回送AH<span class="token punctuation">,</span> <span class="token punctuation">(</span>字节运算<span class="token punctuation">)</span><span class="token punctuation">;</span>或 商回送AX<span class="token punctuation">,</span>余数回送DX<span class="token punctuation">,</span> <span class="token punctuation">(</span>字运算<span class="token punctuation">)</span><span class="token punctuation">.</span>  IDIV    整数除法<span class="token punctuation">.</span>结果回送<span class="token punctuation">:</span>商回送AL<span class="token punctuation">,</span>余数回送AH<span class="token punctuation">,</span> <span class="token punctuation">(</span>字节运算<span class="token punctuation">)</span><span class="token punctuation">;</span>或 商回送AX<span class="token punctuation">,</span>余数回送DX<span class="token punctuation">,</span> <span class="token punctuation">(</span>字运算<span class="token punctuation">)</span><span class="token punctuation">.</span>  AAD     除法的ASCII码调整<span class="token punctuation">.</span>  CBW     字节转换为字<span class="token punctuation">.</span> <span class="token punctuation">(</span>把AL中字节的符号扩展到AH中去<span class="token punctuation">)</span>  CWD     字转换为双字<span class="token punctuation">.</span> <span class="token punctuation">(</span>把AX中的字的符号扩展到DX中去<span class="token punctuation">)</span>  CWDE    字转换为双字<span class="token punctuation">.</span> <span class="token punctuation">(</span>把AX中的字符号扩展到EAX中去<span class="token punctuation">)</span>  CDQ     双字扩展<span class="token punctuation">.</span> <span class="token punctuation">(</span>把EAX中的字的符号扩展到EDX中去<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、逻辑运算指令"><a href="#三、逻辑运算指令" class="headerlink" title="三、逻辑运算指令"></a>三、逻辑运算指令</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">AND</span>     与运算<span class="token punctuation">.</span>  <span class="token keyword">OR</span>      或运算<span class="token punctuation">.</span>  <span class="token keyword">XOR</span>     异或运算<span class="token punctuation">.</span>  <span class="token constant">NOT</span>     取反<span class="token punctuation">.</span>  <span class="token constant">TEST</span>    测试<span class="token punctuation">.</span><span class="token punctuation">(</span>两操作数作与运算<span class="token punctuation">,</span>仅修改标志位<span class="token punctuation">,</span>不回送结果<span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token constant">SHL</span>     逻辑左移<span class="token punctuation">.</span>  <span class="token constant">SAL</span>     算术左移<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">=</span><span class="token constant">SHL</span><span class="token punctuation">)</span>  <span class="token constant">SHR</span>     逻辑右移<span class="token punctuation">.</span>  <span class="token constant">SAR</span>     算术右移<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">=</span><span class="token constant">SHR</span><span class="token punctuation">)</span>  <span class="token constant">ROL</span>     循环左移<span class="token punctuation">.</span>  <span class="token constant">ROR</span>     循环右移<span class="token punctuation">.</span>  <span class="token constant">RCL</span>     通过进位的循环左移<span class="token punctuation">.</span>  <span class="token constant">RCR</span>     通过进位的循环右移<span class="token punctuation">.</span>            以上八种移位指令<span class="token punctuation">,</span>其移位次数可达<span class="token number">255</span>次<span class="token punctuation">.</span>            移位一次时<span class="token punctuation">,</span> 可直接用操作码<span class="token punctuation">.</span> 如 <span class="token constant">SHL</span> <span class="token constant">AX</span><span class="token punctuation">,</span><span class="token number">1.</span>            移位<span class="token operator">></span><span class="token number">1</span>次时<span class="token punctuation">,</span> 则由寄存器<span class="token constant">CL</span>给出移位次数<span class="token punctuation">.</span>            如 <span class="token constant">MOV</span> <span class="token constant">CL</span><span class="token punctuation">,</span><span class="token number">04</span>   <span class="token constant">SHL</span> <span class="token constant">AX</span><span class="token punctuation">,</span><span class="token constant">CL</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、串指令"><a href="#四、串指令" class="headerlink" title="四、串指令"></a>四、串指令</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">          DS:SI 源串段寄存器 :源串变址.            ES:DI 目标串段寄存器:目标串变址.            CX 重复次数计数器.            AL/AX 扫描值.            D标志   0表示重复操作中SI和DI应自动增量; 1表示应自动减量.            Z标志   用来控制扫描或比较操作的结束.  MOVS    串传送.( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )  CMPS    串比较.( CMPSB 比较字符. CMPSW 比较字. )  SCAS    串扫描.把AL或AX的内容与目标串作比较,比较结果反映在标志位.  LODS    装入串.把源串中的元素(字或字节)逐一装入AL或AX中.( LODSB 传送字符. LODSW 传送字.    LODSD 传送双字. )  STOS    保存串.是LODS的逆过程.  REP         当CX/ECX&lt;>0时重复.  REPE/REPZ   当ZF=1或比较结果相等,且CX/ECX&lt;>0时重复.  REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;>0时重复.  REPC        当CF=1且CX/ECX&lt;>0时重复.  REPNC       当CF=0且CX/ECX&lt;>0时重复.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、程序转移指令"><a href="#五、程序转移指令" class="headerlink" title="五、程序转移指令"></a>五、程序转移指令</h2><h3 id="1-无条件转移指令-长转移"><a href="#1-无条件转移指令-长转移" class="headerlink" title="1. 无条件转移指令 (长转移)"></a>1. 无条件转移指令 (长转移)</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">JMP         无条件转移指令  CALL        过程调用  RET<span class="token operator">/</span>RETF    过程返回<span class="token punctuation">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2"><a href="#2-条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2" class="headerlink" title="2. 条件转移指令      (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )"></a>2. 条件转移指令      (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">JA/JNBE     不小于或不等于时转移.  JAE/JNB     大于或等于转移.  JB/JNAE     小于转移.  JBE/JNA     小于或等于转移.      以上四条,测试无符号整数运算的结果<span class="token punctuation">(</span>标志C和Z<span class="token punctuation">)</span>.  JG/JNLE     大于转移.  JGE/JNL     大于或等于转移.  JL/JNGE     小于转移.  JLE/JNG     小于或等于转移.      以上四条,测试带符号整数运算的结果<span class="token punctuation">(</span>标志S,O和Z<span class="token punctuation">)</span>.  JE/JZ       等于转移.  JNE/JNZ     不等于时转移.  JC          有进位时转移.  JNC         无进位时转移.  JNO         不溢出时转移.  JNP/JPO     奇偶性为奇数时转移.  JNS         符号位为 <span class="token string">"0"</span> 时转移.  JO          溢出转移.  JP/JPE      奇偶性为偶数时转移.  JS          符号位为 <span class="token string">"1"</span> 时转移.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-循环控制指令-短转移"><a href="#3-循环控制指令-短转移" class="headerlink" title="3. 循环控制指令(短转移)"></a>3. 循环控制指令(短转移)</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">LOOP            CX不为零时循环.  LOOPE&#x2F;LOOPZ     CX不为零且标志Z&#x3D;1时循环.  LOOPNE&#x2F;LOOPNZ   CX不为零且标志Z&#x3D;0时循环.  JCXZ            CX为零时转移.  JECXZ           ECX为零时转移.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-中断指令"><a href="#4-中断指令" class="headerlink" title="4. 中断指令"></a>4. 中断指令</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">INT         中断指令  INTO        溢出中断  IRET        中断返回  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-处理器控制指令"><a href="#5-处理器控制指令" class="headerlink" title="5. 处理器控制指令"></a>5. 处理器控制指令</h3><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">HLT         处理器暂停<span class="token punctuation">,</span>  直到出现中断或复位信号才继续<span class="token punctuation">.</span>  WAIT        当芯片引线TEST为高电平时使CPU进入等待状态<span class="token punctuation">.</span>  ESC         转换到外处理器<span class="token punctuation">.</span>  LOCK        封锁总线<span class="token punctuation">.</span>  NOP         空操作<span class="token punctuation">.</span>  STC         置进位标志位<span class="token punctuation">.</span>  CLC         清进位标志位<span class="token punctuation">.</span>  CMC         进位标志取反<span class="token punctuation">.</span>  STD         置方向标志位<span class="token punctuation">.</span>  CLD         清方向标志位<span class="token punctuation">.</span>  STI         置中断允许位<span class="token punctuation">.</span>  CLI         清中断允许位<span class="token punctuation">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、伪指令"><a href="#六、伪指令" class="headerlink" title="六、伪指令"></a>六、伪指令</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">DW</span>          定义字<span class="token punctuation">(</span><span class="token number">2</span>字节<span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token constant">PROC</span>        定义过程<span class="token punctuation">.</span>  <span class="token constant">ENDP</span>        过程结束<span class="token punctuation">.</span>  <span class="token constant">SEGMENT</span>     定义段<span class="token punctuation">.</span>  <span class="token constant">ASSUME</span>      建立段寄存器寻址<span class="token punctuation">.</span>  <span class="token constant">ENDS</span>        段结束<span class="token punctuation">.</span>  <span class="token keyword">END</span>         程序结束<span class="token punctuation">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、处理机控制指令：标志处理指令"><a href="#七、处理机控制指令：标志处理指令" class="headerlink" title="七、处理机控制指令：标志处理指令"></a>七、处理机控制指令：标志处理指令</h2><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">CLC     进位位置<span class="token number">0</span>指令  CMC     进位位求反指令  STC     进位位置为<span class="token number">1</span>指令  CLD     方向标志置<span class="token number">1</span>指令  STD     方向标志位置<span class="token number">1</span>指令  CLI     中断标志置<span class="token number">0</span>指令  STI     中断标志置<span class="token number">1</span>指令  NOP     无操作  HLT     停机  WAIT    等待  ESC     换码  LOCK    封锁  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点运算指令集"><a href="#浮点运算指令集" class="headerlink" title="浮点运算指令集"></a>浮点运算指令集</h2><h3 id="一、控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B-—"><a href="#一、控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B-—" class="headerlink" title="一、控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)—-"></a>一、控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)—-</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token constant">FINIT</span>                 初始化浮点部件                  机器码  9B <span class="token constant">DB</span> <span class="token constant">E3</span>  <span class="token constant">FCLEX</span>                 清除异常                         机器码  9B <span class="token constant">DB</span> <span class="token constant">E2</span>  <span class="token constant">FDISI</span>                 浮点检查禁止中断                 机器码  9B <span class="token constant">DB</span> <span class="token constant">E1</span>  <span class="token constant">FENI</span>                  浮点检查禁止中断二            机器码  9B <span class="token constant">DB</span> <span class="token constant">E0</span>  <span class="token constant">WAIT</span>                  同步<span class="token constant">CPU</span>和<span class="token constant">FPU</span>                    机器码  9B  <span class="token constant">FWAIT</span>                 同步<span class="token constant">CPU</span>和<span class="token constant">FPU</span>                    机器码  <span class="token constant">D9</span> <span class="token constant">D0</span>  <span class="token constant">FNOP</span>                  无操作                          机器码  <span class="token constant">DA</span> <span class="token constant">E9</span>  <span class="token constant">FXCH</span>                  交换<span class="token constant">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>和<span class="token constant">ST</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                机器码  <span class="token constant">D9</span> <span class="token constant">C9</span>  <span class="token constant">FXCH</span> <span class="token constant">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            交换<span class="token constant">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>和<span class="token constant">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                机器码  <span class="token constant">D9</span> <span class="token class-name">C1iii</span>  <span class="token constant">FSTSW</span> ax              状态字到ax                       机器码  9B <span class="token constant">DF</span> <span class="token constant">E0</span>  <span class="token constant">FSTSW</span>   word ptr mem  状态字到mem                      机器码  9B <span class="token constant">DD</span> mm111mmm  <span class="token constant">FLDCW</span>   word ptr mem  mem到状态字                      机器码  <span class="token constant">D9</span> mm101mmm  <span class="token constant">FSTCW</span>   word ptr mem  控制字到mem                      机器码  9B <span class="token constant">D9</span> mm111mmm    <span class="token constant">FLDENV</span>  word ptr mem  mem到全环境                      机器码  <span class="token constant">D9</span> mm100mmm  <span class="token constant">FSTENV</span>  word ptr mem  全环境到mem                      机器码  9B <span class="token constant">D9</span> mm110mmm  <span class="token constant">FRSTOR</span>  word ptr mem  mem到<span class="token constant">FPU</span>状态                    机器码  <span class="token constant">DD</span> mm100mmm  <span class="token constant">FSAVE</span>   word ptr mem  <span class="token constant">FPU</span>状态到mem                    机器码  9B <span class="token constant">DD</span> mm110mmm    <span class="token constant">FFREE</span> <span class="token constant">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>           标志<span class="token constant">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>未使用                   机器码  <span class="token constant">DD</span> <span class="token class-name">C0iii</span>  <span class="token constant">FDECSTP</span>               减少栈指针<span class="token number">1</span><span class="token punctuation">-></span><span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">-></span><span class="token number">1</span>             机器码  <span class="token constant">D9</span> <span class="token constant">F6</span>  <span class="token constant">FINCSTP</span>               增加栈指针<span class="token number">0</span><span class="token punctuation">-></span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">-></span><span class="token number">2</span>             机器码  <span class="token constant">D9</span> <span class="token constant">F7</span>  <span class="token constant">FSETPM</span>                浮点设置保护                       机器码  <span class="token constant">DB</span> <span class="token constant">E4</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据传送指令"><a href="#二、数据传送指令" class="headerlink" title="二、数据传送指令"></a>二、数据传送指令</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">FLDZ                  将<span class="token number">0.0</span>装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  机器码  D9 EE  FLD1                  将<span class="token number">1.0</span>装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  机器码  D9 E8  FLDPI                 将π装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    机器码  D9 EB  FLDL2T                将ln10<span class="token operator">/</span>ln2装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>             机器码  D9 E9  FLDL2E                将<span class="token number">1</span><span class="token operator">/</span>ln2装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                机器码  D9 EA  FLDLG2                将ln2<span class="token operator">/</span>ln10装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>             机器码  D9 EC  FLDLN2                将ln2装入<span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  机器码  D9 ED    FLD    real4 ptr mem  装入mem的单精度浮点数             机器码  D9 mm000mmm  FLD    real8 ptr mem  装入mem的双精度浮点数             机器码  DD mm000mmm  FLD   real10 ptr mem  装入mem的十字节浮点数             机器码  DB mm101mmm    FILD    word ptr mem  装入mem的二字节整数              机器码  DF mm000mmm  FILD   dword ptr mem  装入mem的四字节整数              机器码  DB mm000mmm  FILD   qword ptr mem  装入mem的八字节整数              机器码  DF mm101mmm    FBLD   tbyte ptr mem  装入mem的十字节BCD数            机器码  DF mm100mmm    FST    real4 ptr mem  保存单精度浮点数到mem             机器码  D9 mm010mmm  FST    real8 ptr mem  保存双精度浮点数到mem             机器码  DD mm010mmm    FIST    word ptr mem  保存二字节整数到mem              机器码  DF mm010mmm  FIST   dword ptr mem  保存四字节整数到mem              机器码  DB mm010mmm    FSTP   real4 ptr mem  保存单精度浮点数到mem并出栈      机器码  D9 mm011mmm  FSTP   real8 ptr mem  保存双精度浮点数到mem并出栈      机器码  DD mm011mmm  FSTP  real10 ptr mem  保存十字节浮点数到mem并出栈      机器码  DB mm111mmm    FISTP   word ptr mem  保存二字节整数到mem并出栈           机器码  DF mm011mmm  FISTP  dword ptr mem  保存四字节整数到mem并出栈           机器码  DB mm011mmm  FISTP  qword ptr mem  保存八字节整数到mem并出栈           机器码  DF mm111mmm    FBSTP  tbyte ptr mem  保存十字节BCD数到mem并出栈     机器码  DF mm110mmm    <span class="token return-type class-name">FCMOVB</span>                <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span>时传送              机器码  DA C0iii  <span class="token return-type class-name">FCMOVBE</span>               <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span>时传送             机器码  DA D0iii  <span class="token return-type class-name">FCMOVE</span>                <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span>时传送             机器码  DA C1iii  <span class="token return-type class-name">FCMOVNB</span>               <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span>时传送             机器码  DB C0iii  <span class="token return-type class-name">FCMOVNBE</span>              <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span>时传送              机器码  DB D0iii  <span class="token return-type class-name">FCMOVNE</span>               <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span>时传送            机器码  DB C1iii  <span class="token return-type class-name">FCMOVNU</span>               <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 有序时传送        机器码  DB D1iii  <span class="token return-type class-name">FCMOVU</span>                <span class="token function">ST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ST</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 无序时传送        机器码  DA D1iii  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、比较指令"><a href="#三、比较指令" class="headerlink" title="三、比较指令"></a>三、比较指令</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">FCOM                  ST(0)-ST(1)                      机器码  D8 D1  FCOMI                 ST(0),ST(i)  ST(0)-ST(1)         机器码  DB F0iii  FCOMIP                ST(0),ST(i)  ST(0)-ST(1)并出栈   机器码  DF F0iii  FCOM   real4 ptr mem  ST(0)-实数mem                      机器码  D8 mm010mmm  FCOM   real8 ptr mem  ST(0)-实数mem                      机器码  DC mm010mmm    FICOM   word ptr mem  ST(0)-整数mem                      机器码  DE mm010mmm  FICOM  dword ptr mem  ST(0)-整数mem                      机器码  DA mm010mmm  FICOMP  word ptr mem  ST(0)-整数mem并出栈               机器码  DE mm011mmm  FICOMP dword ptr mem  ST(0)-整数mem并出栈               机器码  DA mm011mmm    FTST                  ST(0)-0                          机器码  D9 E4  FUCOM  ST(i)          ST(0)-ST(i)                      机器码  DD E0iii  FUCOMP ST(i)          ST(0)-ST(i)并出栈                   机器码  DD E1iii  FUCOMPP               ST(0)-ST(1)并二次出栈             机器码  DA E9  FXAM                  ST(0)规格类型                    机器码  D9 E5  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、运算指令"><a href="#四、运算指令" class="headerlink" title="四、运算指令"></a>四、运算指令</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">FADD                  把目的操作数 (直接接在指令后的变量或堆栈缓存器) 与来源操作数 (接在目的操作数后的变量或堆栈缓存器)  相加，并将结果存入目的操作数  FADDP  ST(i),ST       这个指令是使目的操作数加上 ST  缓存器，并弹出 ST 缓存器，而目的操作数必须是堆栈缓存器的其中之一，最后不管目的操作数为何，经弹出一次后，目的操作数会变成上一个堆栈缓存器了  FIADD                 FIADD 是把 ST   加上来源操作数，然后再存入 ST 缓存器，来源操作数必须是字组整数或短整数形态的变数    FSUB                  减  FSUBP  FSUBR                 减数与被减数互换  FSUBRP  FISUB  FISUBR    FMUL                  乘  FMULP  FIMUL    FDIV                  除  FDIVP  FDIVR  FDIVRP  FIDIV  FIDIVR    FCHS                  改变 ST 的正负值    FABS                  把 ST  之值取出，取其绝对值后再存回去。    FSQRT                 将 ST  之值取出，开根号后再存回去。    FSCALE                这个指令是计算 ST*2^ST(1)之值，再把结果存入 ST 里而 ST(1)   之值不变。ST(1)  必须是在 -32768 到 32768 (-215 到 215 )之间的整数，如果超过这个范围计算结果无法确定，如果不是整数 ST(1)    会先向零舍入成整数再计算。所以为安全起见，最好是由字组整数载入到 ST(1) 里。    FRNDINT               这个指令是把 ST 的数值舍入成整数，FPU    提供四种舍入方式，由 FPU 的控制字组(control    word)中的 RC 两个位决定                            RC    舍入控制                            00    四舍五入                            01    向负无限大舍入                            10    向正无限大舍入                            11    向零舍去  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="汇编" scheme="http://www.blog.yln956.top/categories/%E6%B1%87%E7%BC%96/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>模电</title>
    <link href="http://www.blog.yln956.top/2021/04/17/%E6%A8%A1%E7%94%B5/"/>
    <id>http://www.blog.yln956.top/2021/04/17/%E6%A8%A1%E7%94%B5/</id>
    <published>2021-04-17T15:29:38.000Z</published>
    <updated>2021-09-03T05:56:56.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="电子技术基础"><a href="#电子技术基础" class="headerlink" title="电子技术基础"></a>电子技术基础</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181426892.png" alt="image-20210107181426892" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181625933.png" alt="image-20210107181625933" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181646995.png" alt="image-20210107181646995" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181741152.png" alt="image-20210107181741152" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181758888.png" alt="image-20210107181758888" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181811199.png" alt="image-20210107181811199" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181936348.png" alt="image-20210107181936348" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107181957992.png" alt="image-20210107181957992" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182312982.png" alt="image-20210107182312982" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182336364.png" alt="image-20210107182336364" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182352864.png" alt="image-20210107182352864" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182820982.png" alt="image-20210107182820982" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182907346.png" alt="image-20210107182907346" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183450567.png" alt="image-20210107183450567" loading="lazy"></p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182645834.png" alt="image-20210107182645834" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182717578.png" alt="image-20210107182717578" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107182943184.png" alt="image-20210107182943184" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183420655.png" alt="image-20210107183420655" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183514871.png" alt="image-20210107183514871" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183546266.png" alt="image-20210107183546266" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183603061.png" alt="image-20210107183603061" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183649229.png" alt="image-20210107183649229" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183704117.png" alt="image-20210107183704117" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183730788.png" alt="image-20210107183730788" loading="lazy"></p><p>这是电压串联正反馈</p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183744417.png" alt="image-20210107183744417" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210107183800733.png" alt="image-20210107183800733" loading="lazy"></p><h2 id="大题（部分应该是考选择）学会这里就够了，概念什么的就看造化了"><a href="#大题（部分应该是考选择）学会这里就够了，概念什么的就看造化了" class="headerlink" title="大题（部分应该是考选择）学会这里就够了，概念什么的就看造化了"></a>大题（部分应该是考选择）学会这里就够了，概念什么的就看造化了</h2><h3 id="第一章直流电路"><a href="#第一章直流电路" class="headerlink" title="第一章直流电路"></a>第一章直流电路</h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109131645454.png" alt="image-20210109131645454" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109131723232.png" alt="image-20210109131723232" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109131752113.png" alt="image-20210109131752113" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109131842058.png" alt="image-20210109131842058" loading="lazy"></p><h3 id="第二章暂态分析"><a href="#第二章暂态分析" class="headerlink" title="第二章暂态分析"></a>第二章暂态分析</h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109183919397.png" alt="image-20210109183919397" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109183945731.png" alt="image-20210109183945731" loading="lazy"></p><h3 id="第四章模拟集成运算放大器"><a href="#第四章模拟集成运算放大器" class="headerlink" title="第四章模拟集成运算放大器"></a>第四章模拟集成运算放大器</h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109231413316.png" alt="image-20210109231413316" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109231434251.png" alt="image-20210109231434251" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109231456114.png" alt="image-20210109231456114" loading="lazy"></p><h3 id="第五章半导体二极管及稳流电压"><a href="#第五章半导体二极管及稳流电压" class="headerlink" title="第五章半导体二极管及稳流电压"></a>第五章半导体二极管及稳流电压</h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109190700745.png" alt="image-20210109190700745" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109190802683.png" alt="image-20210109190802683" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109190843704.png" alt="image-20210109190843704" loading="lazy"></p><h3 id="第六章晶体三极管及其放大"><a href="#第六章晶体三极管及其放大" class="headerlink" title="第六章晶体三极管及其放大"></a>第六章晶体三极管及其放大<img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110192823664.png" alt="image-20210110192823664" loading="lazy"></h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110192849501.png" alt="image-20210110192849501" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110192918406.png" alt="image-20210110192918406" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110192942469.png" alt="image-20210110192942469" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110193012641.png" alt="image-20210110193012641" loading="lazy"></p><h3 id="第九章负反馈放大电路"><a href="#第九章负反馈放大电路" class="headerlink" title="第九章负反馈放大电路"></a>第九章负反馈放大电路</h3><p>看填空题</p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210110193031579.png" alt="image-20210110193031579" loading="lazy"></p><h2 id="直流电路"><a href="#直流电路" class="headerlink" title="直流电路"></a>直流电路</h2><h3 id="关联参考方向"><a href="#关联参考方向" class="headerlink" title="关联参考方向"></a>关联参考方向</h3><p>关联：P=UI</p><p>非关联：P=-UI</p><p>关联和非关联有相对性</p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108001709442.png" alt="image-20210108001709442" loading="lazy"></p><p><strong>两个，关联和非关联</strong></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108001804586.png" alt="image-20210108001804586" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108001842686.png" alt="image-20210108001842686" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108001909977.png" alt="image-20210108001909977" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108002438159.png" alt="image-20210108002438159" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108002929029.png" alt="image-20210108002929029" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108003319502.png" alt="image-20210108003319502" loading="lazy"><br><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108005133507.png" alt="image-20210108005133507" loading="lazy"></p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108003616287.png" alt="image-20210108003616287" loading="lazy"></p><p>一般说的电压源电流源都是理想状态下的</p><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108003636629.png" alt="image-20210108003636629" loading="lazy"></p><h3 id="基尔霍夫定律（KCL和KVL）"><a href="#基尔霍夫定律（KCL和KVL）" class="headerlink" title="基尔霍夫定律（KCL和KVL）"></a>基尔霍夫定律（KCL和KVL）</h3><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210108005705257.png" alt="image-20210108005705257" loading="lazy"></p><p>KCL:节点流出电流之和等于流入电流之和</p><p>KVL:任何闭合回路绕行一周各支路的电压代数和恒等于为0</p><h3 id="等效电路"><a href="#等效电路" class="headerlink" title="等效电路"></a>等效电路</h3><p>等效是指外电路等效，内部结构不一定一样</p><p><strong>电阻等效</strong></p><pre><code>串联等效，并联等效，串并联等效</code></pre><p><strong>电源等效</strong></p><pre><code>电压源串联等效，电流源并联等效，电压源与元件并联等效（可去掉元件），电流与元件串联等效（可去掉元件）</code></pre><h3 id="节点点位分析法"><a href="#节点点位分析法" class="headerlink" title="节点点位分析法"></a>节点点位分析法</h3><h3 id="叠加定理"><a href="#叠加定理" class="headerlink" title="叠加定理"></a>叠加定理</h3><p>在多个源的电路中，让其中一个源单独工作，其余电源置零</p><h3 id="戴维南定理"><a href="#戴维南定理" class="headerlink" title="戴维南定理"></a>戴维南定理</h3><h2 id="暂态分析"><a href="#暂态分析" class="headerlink" title="暂态分析"></a>暂态分析</h2><p><img src="/2021/04/17/%E6%A8%A1%E7%94%B5/image-20210109142028524.png" alt="image-20210109142028524" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="模电" scheme="http://www.blog.yln956.top/categories/%E6%A8%A1%E7%94%B5/"/>
    
    
    <category term="复习" scheme="http://www.blog.yln956.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>教程</title>
    <link href="http://www.blog.yln956.top/2021/03/07/jiaocheng/"/>
    <id>http://www.blog.yln956.top/2021/03/07/jiaocheng/</id>
    <published>2021-03-07T02:02:38.000Z</published>
    <updated>2021-09-03T05:57:05.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$ E = mc^2 $$</span><span class="token equation string">\[ E = mc^2 \]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$$ E = mc^2 $$<br>[ E = mc^2 ]</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$E = mc^2$</span><span class="token equation string">$<span class="token equation-command regex">\frac</span>&#123;<span class="token equation-command regex">\partial</span>&#125;&#123;<span class="token equation-command regex">\partial</span> t&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$E = mc^2$<br>$\frac{\partial}{\partial t}$<br>$\frac{7x+5}{1+y^2}$</p><p>$z=z_l$</p><p>$\cdots$</p><p>$\frac{d}{dx}e^{ax}=ae^{ax}\quad \sum_{i=1}^{n}{(X_i - \overline{X})^2}$</p><p>$\sqrt{2};\sqrt[n]{3}$</p><p>$\vec{a} \cdot \vec{b}=0$</p><p>$\int ^2_3 x^2 {\rm d}x$<br>$\iint$<br>$\iiint$<br>$\oint$<br>$\oint$<br>$\mathrm{d}$<br>$\prime$<br>$\lim$<br>$\infty$<br>$\partial$<br>$\sum$</p><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol><li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li><li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li></ol><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：$x^4$</li><li>下标符号，符号：<code>_</code>，如：$x_1$</li><li>组合符号，符号：<code>&#123;&#125;</code>，如：${16}<em>{8}O{2+}</em>{2}$</li></ol><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：$V_{\mbox{初始}}$</li><li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li><li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li><li>标签，符号<code>\tag&#123;数字&#125;</code>，如：$\tag{11}$</li><li>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li><li>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li><li>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li></ol><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol><li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x : y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号``，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol><li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li><li>中括号，符号：<code>[]</code>，如：$[x+y]$</li><li>大括号，符号：<code>\&#123; \&#125;</code>，如：${x+y}$</li><li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li><li>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li><li>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li></ol><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：$x+y=z$</li><li>减法运算，符号：<code>-</code>，如：$x-y=z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li><li>减甲运算，符号：<code>\mp</code>，如：$x \mp y=z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li><li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li><li>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol><li>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：$\overline{xyz}$</li><li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li><li>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\sqrt[3]{x+y}$</li><li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li><li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li><li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li><li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li><li>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li></ol><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：$x+y=z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：$x \in y$</li><li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li><li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li><li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li><li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li><li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li><li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li><li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li><li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li><li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li><li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li><li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li><li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li><li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li><li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li><li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li><li>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></li><li>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></li><li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li></ol><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：$\infty$</li><li>虚数，符号：<code>\imath</code>，如：$\imath$</li><li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li><li>数学符号，符号<code>\hat&#123;a&#125;</code>，如：$\hat{a}$</li><li>数学符号，符号<code>\check&#123;a&#125;</code>，如：$\check{a}$</li><li>数学符号，符号<code>\breve&#123;a&#125;</code>，如：$\breve{a}$</li><li>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：$\tilde{a}$</li><li>数学符号，符号<code>\bar&#123;a&#125;</code>，如：$\bar{a}$</li><li>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：$\vec{a}$</li><li>数学符号，符号<code>\acute&#123;a&#125;</code>，如：$\acute{a}$</li><li>数学符号，符号<code>\grave&#123;a&#125;</code>，如：$\grave{a}$</li><li>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：$\mathring{a}$</li><li>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：$\dot{a}$</li><li>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：$\ddot{a}$</li><li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li><li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li><li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li><li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li><li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li><li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li><li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li><li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li></ol><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://www.blog.yln956.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="http://www.blog.yln956.top/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="http://www.blog.yln956.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>learn</title>
    <link href="http://www.blog.yln956.top/2021/03/04/learn/"/>
    <id>http://www.blog.yln956.top/2021/03/04/learn/</id>
    <published>2021-03-04T11:50:53.000Z</published>
    <updated>2021-09-03T05:57:04.707Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="不知道放哪里的前置知识"><a href="#不知道放哪里的前置知识" class="headerlink" title="不知道放哪里的前置知识"></a>不知道放哪里的前置知识</h2><p>$$<br>C^m_n=\frac{n!}{m!(n-m)!}<br>$$<br>$$<br>例如,C^3_5=\frac{5!}{3!(5-3)!}<br>=\frac{5\times4\times3\times2\times1}{3\times2\times1\times2\times1}<br>=\frac{5\times4}{2\times1}<br>=10<br>$$</p><p>$$<br>0!=1<br>$$</p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p>$$<br>asdasd<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://www.blog.yln956.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://www.blog.yln956.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="随便写写" scheme="http://www.blog.yln956.top/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>教你如何从零开始搭建一个属于自己的网站</title>
    <link href="http://www.blog.yln956.top/2021/01/24/how-to-build-your-site/"/>
    <id>http://www.blog.yln956.top/2021/01/24/how-to-build-your-site/</id>
    <published>2021-01-24T07:03:07.000Z</published>
    <updated>2021-09-03T05:57:07.019Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>搭建博客遇到了挺多问题，以此文章纪念一下自己搭博客的历程</p><p>也写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽说是网站，对于个人来说，或许一般叫作博客。<br>但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。</p><p>当然，这本质还是一个新手向教程，也许会有点科普的感觉。</p><p>我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍（因为要铺开讲，倘若包括轶事，实在太多太杂，有些东西对于我自己而</p><p>已也不是很清楚，所以我也会点到为止），并让你明白这个东西在网站的过程中起到什么样的作用。</p><p>但我不会就细枝末节展开叙述，譬如如何注册账号、安装时如何点击下一步。</p><p>我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和<strong>善</strong></p><p><strong>用搜索引擎</strong>）别指望这个教程能让你直接成功，善用搜索引擎十分重要。</p><p>已经有所基础的同学大可跳读或者直接关闭。</p><blockquote><p>注释处多为相关补充说明，对正常流程没有影响，若没有兴趣，可以略过。</p></blockquote><h1 id="步骤（本文以windows为例）"><a href="#步骤（本文以windows为例）" class="headerlink" title="步骤（本文以windows为例）"></a>步骤（本文以windows为例）</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p><strong>什么是git?</strong></p><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo</p><p>博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解</p><p>一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p></blockquote><p>在安装Git之前，我建议先下载文本编辑器，我推荐两个文本编辑器</p><blockquote><p><strong>Visual Studio Code，简称 VS Code。</strong></p><p>目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）</p><p>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code </p><p>都要大上一个量级</p></blockquote><blockquote><p><strong>Sublime Text</strong></p><p>Sublime Text 是一个文本编辑器（<strong>收费软件</strong>，可以无限期试用，但是会有激活提示弹窗），不喜欢弹窗就自己找教程PJ</p><p>同时也是一个先进的代码编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富</p><p>扩展功能的Vim。</p></blockquote><p>到git官网上下载<a href="https://gitforwindows.org/">Download git</a>下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><blockquote><p><strong>什么是 Node.js ？</strong><br>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><p><strong>Hexo是基于Node.js的静态博客框架，所以如果电脑没有Node.js的话请务必安装一下</strong></p><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版(或者自行百度下载老版本)**而非</strong>当前发布版**（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>cmd输入（什么？你不知道什么是cmd，自行百度吧）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看Node包管理器版本 npm -&gt; node.js package managementnpm -version# 查看Node.js版本node --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/24/how-to-build-your-site/image-20210124161728937.png" alt="image-20210124161728937" loading="lazy"><em>如果能正常显示则说明安装成功</em></p><blockquote><p>Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><p>对了，国内使用 npm 可能很慢。</p><p><strong>你可以考虑切换为 <code>taobao</code> 镜像源。</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><blockquote><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客</p><p>的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p></blockquote><p><strong>选择一个空文件夹（可以自己创建一个）来保存将来属于你自己的博客</strong></p><p>这里我在桌面创建了一个文件夹叫myblog</p><p>在终端中输入以下命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g#如果安装完毕检查一下Hexo是否安装成功Hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/24/how-to-build-your-site/image-20210124215615498.png" alt="image-20210124215615498" loading="lazy"></p><p>在确保Hexo已经安装后，就可以开始安装自己的博客了</p><p>先初始化一下自己的Hexo，在你建的目录<strong>使用git bash</strong></p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124220044820.png" alt="image-20210124220044820" loading="lazy"></p><p>然后输入</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#hexo init myblog#建议使用 hexo init 你的名字.github.io，不过问题不大hexo init [你的博客文件夹名称]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/24/how-to-build-your-site/image-20210124220429237.png" alt="image-20210124220429237" loading="lazy"></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install#如果觉得安装慢点话可以尝试使用淘宝镜像源 效果和 npm install 一样，会更快npm install --registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装好以后打开文件夹可以看见自动生成的文件目录结构</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124220517969.png" alt="image-20210124220517969" loading="lazy"></p><table><thead><tr><th>文件名称</th><th>实际作用</th></tr></thead><tbody><tr><td>_config.yml</td><td>博客主题配置文件</td></tr><tr><td>node_modules</td><td>node.js依赖包文件夹</td></tr><tr><td>scaffolds</td><td>文章模板</td></tr><tr><td>source</td><td>存放你的博客文章</td></tr><tr><td>themes</td><td>博客主题文件夹</td></tr></tbody></table><p><strong>你新建的博客文章全部放在<code>source/_posts</code>文件夹中，格式为Markdown格式</strong></p><blockquote><p><strong>什么是Markdown?</strong></p><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><blockquote><p><strong>推荐一个Markdown编辑器</strong></p><p><strong>Typora</strong></p><p>Typora是一款轻便简洁的Markdown编辑器,支持即时渲染技术,这也是与其他Markdown编辑器最显著的区别.<del>重点是免费</del>!</p></blockquote><blockquote><p><strong>什么是及时渲染技术？</strong></p><p>即时渲染技术使得你写Markdown就像是写Word文档一样流畅,不像其他编辑器的有工具栏.</p></blockquote><p>这个时候已经可以在本地运行你的博客了只要输入指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#生成hexo博客hexo g#运行hexo博客hexo s#创建新的博客文章名称hexo new [你新的博客文章名称]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/24/how-to-build-your-site/image-20210124221511067.png" alt="image-20210124221511067" loading="lazy"></p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124221527411.png" alt="image-20210124221527411" loading="lazy"></p><p>启动hexo后打开浏览器，输入<code>localhost:4000</code>即可查看你的博客</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124221652468.png" alt="image-20210124221652468" loading="lazy"></p><p><strong>如果需要停止输入<code>ctrl+c</code>即可</strong></p><h2 id="注册-GitHub并新建仓库"><a href="#注册-GitHub并新建仓库" class="headerlink" title="注册 GitHub并新建仓库"></a>注册 GitHub并新建仓库</h2><p>打开<a href="https://github.com/">github官网</a></p><p>然后选择Sign up注册属于你自己的账号即可</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124162118908.png" alt="image-20210124162118908" loading="lazy"></p><p><strong>生成ssh key</strong></p><p>在终端中输入</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#这里youremail@example.com替换成你的邮箱ssh-keygen -t rsa -C  youremail@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输入完后可以一路回车</strong></p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124213353132.png" alt="image-20210124213353132" loading="lazy"></p><p>获取你本机当前的ssh key</p><p>在终端中输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显示的内容为你ssh的公匙</strong></p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124213410596.png" alt="image-20210124213410596" loading="lazy"></p><p><strong>将你的ssh key导入到GitHub中</strong></p><p>登陆GitHub账号，点击右上角头像-&gt;setting</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124222044812.png" alt="image-20210124222044812" loading="lazy"></p><p>在setting页面中选择SSH and GPG keys-&gt;New SSH key</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124222356061.png" alt="image-20210124222356061" loading="lazy"></p><p>填入对应到title和ssh key内容，点击添加即可</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124222621707.png" alt="image-20210124222621707" loading="lazy"></p><p><strong>创建Github仓库存储Hexo博客信息</strong></p><p>创建一个新的博客仓库</p><p>登陆GitHub账号选择右上角+号-&gt;New repository</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124222805168.png" alt="image-20210124222805168" loading="lazy"></p><p>填写好你仓库名称后选择添加仓库即可</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124223026404.png" alt="image-20210124223026404" loading="lazy"></p><p>打开刚创建好的仓库，拷贝仓库http链接，下面会用到</p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124223122865.png" alt="image-20210124223122865" loading="lazy"></p><h2 id="将Hexo的博客发布到Github"><a href="#将Hexo的博客发布到Github" class="headerlink" title="将Hexo的博客发布到Github"></a>将Hexo的博客发布到Github</h2><p><strong>打开<code>_config.yml</code></strong></p><p>在配置文件中找到(ctrl+f)：<code>deploy</code>将对应段落修改成以下内容</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repo: 你的github仓库链接 ##就是刚刚上面拷贝的  # repo: &#39;https:&#x2F;&#x2F;github.com&#x2F;XXXXX&#x2F;XXXX.github.io.git&#39;  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然后安装deploy-git</strong></p><p>git bash输入</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>执行完以上指令后打开浏览器访问<code>你的GitHub账号名+github.io</code>即可查看你的博客</strong></p><blockquote><p>使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>此时，http 网址会自动重定向到 https</p></blockquote><p><strong>如果你线下又写了新的博客，只需要执行<code>hexo d -g</code>即可部署到github上(当然，你要觉得输入麻烦，继续往下看)</strong></p><h2 id="备份与自动部署"><a href="#备份与自动部署" class="headerlink" title="备份与自动部署"></a>备份与自动部署</h2><p>我们当前只是将生成的静态文件部署到了云端。</p><p>为了以防万一，我们应该将网站的源代码文件也推送到 GitHub 仓库备份。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 与远程 Git 仓库建立连接，只此一次即可git remote add origin https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的名字.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来准备提交，这几句命令将是你以后每次备份所需要输入。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 添加到缓存区git add -Agit commit -m &quot;这次做了什么更改，简单描述下即可&quot;# 推送至远程仓库git push# 第一次提交，你可能需设置一下默认提交分支# git push --set-upstream origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次推送都要输入这三条命令，你可能觉得有些麻烦。<br>那么你可以编写 bash 脚本。</p><p>譬如，在根目录下新建 <code>update.sh</code>。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 如果没有消息后缀，默认提交信息为 &#96;:pencil: update content&#96;info&#x3D;$1if [&quot;$info&quot; &#x3D; &quot;&quot;];then info&#x3D;&quot;:pencil: update content&quot;figit add -Agit commit -m &quot;$info&quot;git push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此后更新的话，只需要在终端执行 <code>sh update.sh</code> 即可(其实点击就行了)。</p><p>同样，嫌输入<code>hexo c&amp;hexo g &amp;hexo d</code>麻烦可以在根目录下新建<code>hexo.sh</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo chexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新麻烦，每次部署也很麻烦，可以使用持续集成进行自动部署。</p><blockquote><p>什么是持续集成？<br>持续集成是一种软件开发实践。对软件进行自动化构建，以此来发现错误。<br>Travis CI 就是一个线上持续集成服务的提供商。它可以拉取你每次推送到 GitHub 上的代码，然后根据你的要求对其进行构建。<br>我们可以趁机让它自动生成网站静态文件，然后自动帮我们部署。<br>除此之外，你还可以使用 <a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions">GitHub Actions</a> ，<a href="https://www.netlify.com/">Netlify</a> 等服务。<br>GitHub Actions 相比 Travis 等，自身便拥有仓库的 Token，不再需要额外设置，可以直接使用 <code>secrets.GITHUB_TOKEN</code>。<br>推荐一个专门用来部署 gh-pages 的 Actions <a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages</a></p></blockquote><p>关于更多更具体的自动化部署方案和操作步骤，可以参考 <a href="https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/">初探无后端静态博客自动化部署方案</a>。</p><p>他在文章中详细介绍了 Netlify 、GitHub Actions 和 Travis CI 的部署方法。</p><p>你也可以参考 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></p><p>我就不在此画蛇添足。</p><h2 id="多部署博客"><a href="#多部署博客" class="headerlink" title="多部署博客"></a>多部署博客</h2><p>这是我分别部署在github（国外）和gitee（国内）的博客</p><p><a href="https://yln956.github.io/">https://yln956.github.io/</a></p><p><a href="https://yln956.gitee.io/">https://yln956.gitee.io/</a></p><p>话不多说上教程</p><p>gitee也和github一样设置ssh然后建立仓库，这部分不会的百度</p><p><strong>然后打开<code>_config.yml</code></strong></p><p>在配置文件中找到(ctrl+f)：<code>deploy</code>将对应段落修改成以下内容</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  type: git  repo:       github: 你的github仓库链接      gitee: 你的gitee仓库链接      ##github: &#39;https:&#x2F;&#x2F;github.com&#x2F;XXXXX&#x2F;XXXXX.github.io.git&#39;      ##gitee: &#39;https:&#x2F;&#x2F;gitee.com&#x2F;XXXXX&#x2F;XXXXX.git&#39;        branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="搭建博客遇到的一些问题"><a href="#搭建博客遇到的一些问题" class="headerlink" title="搭建博客遇到的一些问题"></a>搭建博客遇到的一些问题</h1><h2 id="图片部署不显示"><a href="#图片部署不显示" class="headerlink" title="图片部署不显示"></a>图片部署不显示</h2><p>解决办法</p><p>1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</p><p>2.在blog（hexo）目录下执行:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</p><p>4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">![你想要输入的替代文字](xxxx&#x2F;图片名.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p><p><strong>使用Typora会更方便，这样设置就可以了</strong></p><p><img src="/2021/01/24/how-to-build-your-site/image-20210124225259136.png" alt="image-20210124225259136" loading="lazy"></p><h2 id="hexo本地与部署不一致"><a href="#hexo本地与部署不一致" class="headerlink" title="hexo本地与部署不一致"></a>hexo本地与部署不一致</h2><ol><li><p>URL错误，检查是否能git成功</p></li><li><p>部署到远程服务器没来得及更新，过一段时间再看</p></li><li><p>浏览器保存了之前的数据，清除浏览器缓存后再强制刷新Shift+F5</p></li><li><p>branch错误<br>搜索了网上很多解决方案，大多数提及的都是前面几种，最后找到了网友<a href="https://www.zhihu.com/question/319817323/answer/649343660"><em>嗜睡狂魔</em></a>的方法。</p></li><li><p>远程服务器有以前静态页面的缓存。</p><p>当时我只是改了主题的颜色然后发现怎么弄都不行，最后清空仓库重新git就好了</p></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://hexo.io/zh-cn/docs/index.html">文档|Hexo</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰git详细教程</a></li><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;搭建博客遇到了挺多问题，以此文章纪念一下自己搭博客的历程&lt;/p&gt;
&lt;p&gt;也写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="教你如何从零开始搭建一个属于自己的网站" scheme="http://www.blog.yln956.top/categories/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="教程" scheme="http://www.blog.yln956.top/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="http://www.blog.yln956.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vm装mac10.15</title>
    <link href="http://www.blog.yln956.top/2021/01/22/vm%E8%A3%85mac10-15/"/>
    <id>http://www.blog.yln956.top/2021/01/22/vm%E8%A3%85mac10-15/</id>
    <published>2021-01-22T03:33:41.000Z</published>
    <updated>2021-09-03T05:57:02.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Windows系统使用VMware安装MacOS Catalina 10.15系统（黑苹果）的教程，提供MacOS 10.15系统镜像，虚拟机软件VMware Workstation Pro15.5，unlocker3.02和11.5版本package的darwin.iso下载。</p><a id="more"></a><h1 id="【安装准备】"><a href="#【安装准备】" class="headerlink" title="【安装准备】"></a>【安装准备】</h1><p>1 系统镜像：macOS.Catalina.10.15.0.cdr，已经修改来支持在 VMware Workstation Pro 中运行</p><p>2 虚拟机软件：VMware Workstation Pro，版本号不低于 15.5，激活方法自行寻找。</p><p>3 unlocker：解锁VMware的MacOS支持，版本号不低于 3.0.2</p><p>4 darwin.iso：VMware Tools For Mac，用于解决 安装后，MacOS分辨率太小（1024*768像素），版本号不低于11.5 （注意，官方11.5已经不提供下载，您需要从本页面下载darwin.iso，低版本无法在新的MacOS系统中安装）</p><p>链接：<a href="https://pan.baidu.com/s/1Afwkar7JbBNNWMtIAmlGZQ">https://pan.baidu.com/s/1Afwkar7JbBNNWMtIAmlGZQ</a><br>提取码：gje2<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>提取码：grq1 </p><h1 id="【安装步骤】"><a href="#【安装步骤】" class="headerlink" title="【安装步骤】"></a>【安装步骤】</h1><h2 id="1-安装虚拟机软件："><a href="#1-安装虚拟机软件：" class="headerlink" title="1 安装虚拟机软件："></a>1 安装虚拟机软件：</h2><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/201910221518567681_c_w_600.png" alt="VMware Workstation Pro 15.5安装程序启动界面" loading="lazy"></p><p>首先，安装 VMware Workstation Pro 15.5，如果你的版本是15.0，不要使用官方的在线升级功能，因为你可能会陷入重启，重新安装的循环。只需要下载最新的安装包，会自动覆盖升级，原来的激活信息会保留。其他版本，从重新安装15.5，再重新激活。</p><p>安装虚拟机就不详细说了，请自行百度</p><h2 id="2-安装unlocker："><a href="#2-安装unlocker：" class="headerlink" title="2 安装unlocker："></a>2 安装unlocker：</h2><p><strong>首先，任务管理器把所有关于VM的任务都关掉</strong></p><p>进入unlocker的目录，如果你是从Git上找到的unlocker，建议直接下载源码，不要下载 Releases 版本。进入源码根目录，右键，以<strong>管理员权限运行</strong> win-install.cmd，等待命令执行完毕，解锁 VMware Workstation Pro 安装 MacOS的功能。</p><h2 id="3-新建虚拟机："><a href="#3-新建虚拟机：" class="headerlink" title="3 新建虚拟机："></a>3 新建虚拟机：</h2><p>本文以典型为例</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122124653035.png" alt="image-20210122124653035" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122124756348.png" alt="image-20210122124756348" loading="lazy"></p><p>选择10.15</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122124826085.png" alt="image-20210122124826085" loading="lazy"></p><p>再选择放虚拟机的位置</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122124853188.png" alt="image-20210122124853188" loading="lazy"></p><p>这里选择硬盘大小，如果只是看看玩玩，40就够了，想用的建议大点，系统装完之后大概占用20G左右空间</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122124913372.png" alt="image-20210122124913372" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125012741.png" alt="image-20210122125012741" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125050551.png" alt="image-20210122125050551" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125121826.png" alt="image-20210122125121826" loading="lazy"></p><p>这里全勾了</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125148734.png" alt="image-20210122125148734" loading="lazy"></p><p>打开虚拟机目录编辑vmx文件，记事本就可以打开，在smc.present = “TRUE”下面一行添加smc.version = “0”</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125537308.png" alt="image-20210122125537308" loading="lazy"></p><p>然后打开虚拟机</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122125301662.png" alt="image-20210122125301662" loading="lazy"></p><h2 id="4-安装MacOS"><a href="#4-安装MacOS" class="headerlink" title="4 安装MacOS:"></a>4 安装MacOS:</h2><p>选择语言</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122130201051.png" alt="image-20210122130201051" loading="lazy"></p><p>选择磁盘工具格式化磁盘</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122130246531.png" alt="image-20210122130246531" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122130404576.png" alt="image-20210122130404576" loading="lazy"></p><p>然后返回选择安装，点继续，同意，然后等待安装完成</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122130457887.png" alt="image-20210122130457887" loading="lazy"></p><p>选择地区，然后一路继续</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122133101211.png" alt="image-20210122133101211" loading="lazy"></p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122133654266.png" alt="image-20210122133654266" loading="lazy"><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122133654903.png" alt="image-20210122133654903" loading="lazy"></p><h2 id="5-安装VMware-Tools："><a href="#5-安装VMware-Tools：" class="headerlink" title="5 安装VMware Tools："></a>5 安装VMware Tools：</h2><p>正常情况下，在第2步，安装 unlocker 时，会自动下载 darwin.iso，并复制到 VMware Tools 的根目录，但是由于官方源的失效，需要我们手动安装。先关闭MacOS，编辑虚拟机设置，在CDROM里，挂载 darwin.iso</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122133816635.png" alt="image-20210122133816635" loading="lazy"></p><p>然后再次启动MacOS，可以在桌面看到 VMware Tools 的盘符，双击，安装 VMware Tools 后即可</p><p>注意，这里要选择信任（先点击左下角的图标解锁），允许 系统 安装 VMware Tools。</p><p><img src="/2021/01/22/vm%E8%A3%85mac10-15/image-20210122134232974.png" alt="image-20210122134232974" loading="lazy"></p><p>安装成功后，会自动重启电脑，你就可以看到熟悉的MacOS系统，赶紧全屏，体验一下新系统操作的感觉吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows系统使用VMware安装MacOS Catalina 10.15系统（黑苹果）的教程，提供MacOS 10.15系统镜像，虚拟机软件VMware Workstation Pro15.5，unlocker3.02和11.5版本package的darwin.iso下载。&lt;/p&gt;</summary>
    
    
    
    <category term="vm装mac10.15" scheme="http://www.blog.yln956.top/categories/vm%E8%A3%85mac10-15/"/>
    
    
    <category term="虚拟机" scheme="http://www.blog.yln956.top/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="好东西" scheme="http://www.blog.yln956.top/tags/%E5%A5%BD%E4%B8%9C%E8%A5%BF/"/>
    
  </entry>
  
</feed>
